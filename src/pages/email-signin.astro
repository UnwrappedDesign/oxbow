---
import BaseLayout from "@/layouts/BaseLayout.astro";
---


<style>
  .container2 {
    -webkit-transform: scaleY(-1);
    transform: scaleY(-1);
  }
  .blob2 {
    -webkit-transform: scaleX(-1);
    transform: scaleX(-1);
  }
  .blob {
    width: 112px;
    height: 112px;
    display: grid;
    background: #fff;
    filter: blur(6px) contrast(20);
    padding: 11.2px;
    mix-blend-mode: darken;
  }

  .blob:before,
  .blob:after {
    content: "";
    grid-area: 1/1;
    width: 44.8px;
    height: 44.8px;
    background: #474bff;
    animation: blob-rhf26m 2s infinite;
  }

  .blob:after {
    animation-delay: -1s;
  }

  @keyframes blob-rhf26m {
    0% {
      transform: translate(0, 0);
    }

    25% {
      transform: translate(100%, 0);
    }

    50% {
      transform: translate(100%, 100%);
    }

    75% {
      transform: translate(0, 100%);
    }

    100% {
      transform: translate(0, 0);
    }
  }
</style>
<BaseLayout>
  <section class="relative overflow-hidden">
    <div class="max-w-4xl mx-auto text-center px-8 py-12 lg:py-48">
      <div class="prose-styles">
      <div class="rotate-45">
          <div class="flex items-center w-32 mx-auto container2">
            <div class="blob mx-auto blob2"></div>
            <div class="blob mx-auto relative"></div>
          </div>
          <div class="flex items-center w-32 mx-auto">
            <div class="blob mx-auto blob2"></div>
            <div class="blob mx-auto relative"></div>
          </div>
      </div>

        <p class="!mt-16">Hold on, we are building the blocks for you...</p>
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  import {
    getAuth,
    isSignInWithEmailLink,
    signInWithEmailLink,
  } from "firebase/auth";
  import { app } from "@/firebase/client";
  // Confirm the link is a sign-in with email link.
  const auth = getAuth(app);

  if (isSignInWithEmailLink(auth, window.location.href)) {
    // Additional state parameters can also be passed via URL.
    // This can be used to continue the user's intended action before triggering
    // the sign-in operation.
    // Get the email if available. This should be available if the user completes
    // the flow on the same device where they started it.
    let email = window.localStorage.getItem("emailForSignIn");
    if (!email) {
      // User opened the link on a different device. To prevent session fixation
      // attacks, ask the user to provide the associated email again. For example:
      email = window.prompt("Please provide your email for confirmation");
    }
    // The client SDK will parse the code from the link for you.
    signInWithEmailLink(auth, email, window.location.href)
      .then(async (result) => {
        // Clear email from storage.
        window.localStorage.removeItem("emailForSignIn");
        // You can access the new user via result.user
        // Additional user info profile not available via:
        // result.additionalUserInfo.profile == null
        // You can check if the user is new or existing:
        // result.additionalUserInfo.isNewUser
        const idToken = await result.user.getIdToken();
        await fetch("/api/auth/signin", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${idToken}`,
          },
        });

        const baseUrl = import.meta.env.PUBLIC_APP_BASE_URL;

        window.location.replace(baseUrl);
      })
      .catch(async (error) => {
        alert("Error signing in with email link, please try again.");
        // Some error occurred, you can inspect the code: error.code
        // Common errors could be invalid email and invalid or expired OTPs.
      });
  }
</script>
