---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Text from "@/components/fundations/typography/Text.astro";
import EntryStructure from "@/components/landing/EntryStructure.astro";
import StickyNav from "@/components/global/StickyNav.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
//
//
// Marketing
import { pageSections } from "@/data/entries.json";
import { pageExamples } from "@/data/entries.json";
//
//
// Application
import { forms, elements, overlay, navigation } from "@/data/entries.json";
//
//
// Ecommerce
import { storeSections } from "@/data/entries.json";
// Data
const groupedEntries = [
  {
    id: "marketing",
    title: "Marketing",
    description:
      "Heroes, pricing, features, footers, everything you need to make a landing page that looks legit instead of a template graveyard.",
    groups: [
      { id: "pageSections", label: "Page sections", data: pageSections },
      { id: "pageExamples", label: "Landing Pages", data: pageExamples },
    ],
  },
  {
    id: "application",
    title: "Application",
    description:
      "Navs, buttons, forms, layouts, all the boring but necessary pieces that stop your app from looking like a hackathon project.",
    groups: [
      { id: "navigation", label: "Navigation", data: navigation },
      { id: "overlay", label: "Overlay", data: overlay },
      { id: "forms", label: "Forms", data: forms },
      { id: "elements", label: "Elements", data: elements },
    ],
  },
  {
    id: "ecommerce",
    title: "eCommerce",
    description:
      "Carts, checkouts, promos, product pages, basically everything except the product itself. That partâ€™s on you.",
    groups: [{ id: "storeSections", label: "Pages", data: storeSections }],
  },
];
---
<BaseLayout
  title="Components - Oxbow UI"
  description="Browse all Oxbow UI components, elements, and layouts for marketing, application, and ecommerce UIs."
  image="/images/OpenGraph/twitter.png"
>
  <section
    data-fast-goal="navigated-to-components"
    x-data="{ tab: 'marketing', setTab(id){ this.tab = id; history.replaceState({}, '', `#${id}`) } }"
    x-init="(() => { const id = location.hash?.slice(1); if (id) tab = id })()"
  >
  <Wrapper variant="standard" >
      <nav class="relative flex space-x-2  w-fit" role="tablist" aria-label="Components sections">
        {groupedEntries.map(({ id, title }) => (
          <a
            role="tab"
            href={`#${id}`}
            data-id={id}
            @click.prevent="setTab($el.dataset.id)"
            :aria-selected={`tab === '${id}'`}
            class="inline-flex items-center justify-center h-7 px-2 rounded-md outline outline-1 outline-zinc-200 text-xs transition-colors"
            :class={`tab === '${id}' ? 'text-accent-600 bg-sand-100 shadow-subtle shadow-sand-500/20' : 'text-base-700 hover:text-accent-600'`}
          >{title}</a>
        ))}
      </nav>
    </Wrapper>
    {groupedEntries.map(({ id, title, description, groups }) => {
      const firstGroup = groups[0]?.id || '';
      return (
        <section
          id={id}
          x-show={`tab === '${id}'`}
          x-cloak
          style={id === 'marketing' ? '' : 'display:none'}
          x-data={`{ inner: '${firstGroup}', setInner(id){ this.inner = id } }`}
        >
          <Wrapper variant="standard">
            <section class="flex flex-col scroll-mt-24">
              <div>
                  <Text tag="p" variant="textSM" class=" text-base-600 max-w-md md:text-balance">{description}</Text>
                {/* Nested tabs for groups */}
                <nav class="flex items-center gap-2 mt-12 w-fit" role="tablist" aria-label={`${title} groups`}>
                  {groups.map(({ id: groupId, label }) => (
                    <a
                      role="tab"
                      href={`#${id}-${groupId}`}
                      data-id={groupId}
                      @click.prevent="setInner($el.dataset.id)"
                      class="inline-flex items-center justify-center h-7 px-2 rounded-md outline outline-1 outline-zinc-200 text-xs transition-colors"
                      :class={`inner === '${groupId}' ? 'text-accent-600 bg-sand-100 shadow-subtle shadow-sand-500/20' : 'text-base-700 hover:text-accent-600'`}
                    >{label}</a>
                  ))}
                </nav>
                <div class="mt-8">
                  {groups.map(({ id: groupId, label, data }, idx) => (
                    <div
                      id={groupId}
                      x-show={`inner === '${groupId}'`}
                      x-cloak
                      style={idx === 0 ? '' : 'display:none'}
                      class="flex flex-col gap-6"
                    >
                      <EntryStructure entries={data} />
                    </div>
                  ))}
                </div>
              </div>
            </section>
          </Wrapper>
        </section>
      );
    })}
  </section>
</BaseLayout>
