---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import BaseLayout from "@/layouts/BaseLayout.astro";
const { section, subsection } = Astro.params;
const components = await Astro.glob(`@/components/oxbow/**/*.astro`);
const sectionComponents = components.filter((component) => {
  const sectionRegex = new RegExp(`${section}\/${subsection}\/.+\.astro$`, "i");
  return component.file?.match(sectionRegex);
});
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/screenshots/*.png",
);
const formattedSubsection = subsection.replace("-", " ");
---

<BaseLayout>
  <section>
    <div class="max-w-5xl pt-12 lg:pt-32 2xl:max-w-[100rem] mx-auto px-8">
      <button
        class="flex items-center gap-2 text-base-500 hover:text-accent-500"
        onclick="history.back();"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-left size-5"
          ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
            d="M5 12l14 0"></path><path d="M5 12l6 6"></path><path
            d="M5 12l6 -6"></path></svg
        >Go Back</button
      >
      <h1
        class="text-4xl uppercase mt-4 font-semibold tracking-tight text-black lg:text-balance 2xl:text-6xl"
      >
        {subsection.replace(/-/g, " ")}
      </h1>
    </div>
    <div class="max-w-screen 2xl:max-w-[100rem] mx-auto px-8 mt-12">
      <div id="masonry-grid" class="gap-4 mt-12">
        {
          sectionComponents.map((component, index) => {
            const imagePath =
              "/src/screenshots/" +
              component.file
                .split("/")
                .slice(-3)
                .join("_")
                .replace(".astro", ".png");
            return (
              images[imagePath] && (
                <a
                  href={`/playground/${section}/${subsection}/${index + 1}`}
                  class="group inline-block w-full relative"
                >
                  <div class="absolute top-1 left-2 -mt-4 z-10">
                    <div class="bg-white text-black rounded-full p-2 border size-6 items-center flex justify-center text-xs">
                      {index + 1}
                    </div>
                  </div>
                  {index === 0 && (
                    <span class="absolute top-2 right-2 bg-accent-500 text-white rounded-[0.250rem] px-2 py-0.5 text-xs z-20">
                      Free
                    </span>
                  )}

                  <Image
                    src={images[imagePath]()}
                    alt=""
                    class="w-full object-cover hover:ring-base-100 border duration-300 border-base-200 rounded-lg ring-4 ring-base-50 cursor-pointer relative"
                  />
                </a>
              )
            );
          })
        }
      </div>
    </div>
  </section>
</BaseLayout>
<script type="module">
  const masonryGrid = document.getElementById("masonry-grid");
  const columnWidth = 300; // Adjust this value as needed
  const gap = 18; // Adjust this value to change the gap (in pixels)
  function createMasonryGrid() {
    const gridWidth = masonryGrid.offsetWidth;
    const columns = Math.floor(gridWidth / columnWidth) || 1;
    // Reset the grid layout
    masonryGrid.style.columnCount = columns.toString();
    masonryGrid.style.columnGap = `${gap}px`;
    // Remove any existing grid styles
    masonryGrid.style.display = "block";
    masonryGrid.style.gridTemplateColumns = "";
    masonryGrid.style.gridTemplateRows = "";
    const items = Array.from(masonryGrid.children);
    items.forEach((item) => {
      // Reset item styles
      item.style.gridRowStart = "";
      item.style.gridColumnStart = "";
      // Add styles for masonry layout
      item.style.breakInside = "avoid";
      item.style.marginBottom = `${gap}px`; // Set the vertical gap between items
    });
  }
  // Initial layout
  createMasonryGrid();
  // Update layout on window resize
  window.addEventListener("resize", createMasonryGrid);
  // Update layout when all images are loaded
  window.addEventListener("load", createMasonryGrid);
  // Optional: Update layout when new images are added
  const observer = new MutationObserver(createMasonryGrid);
  observer.observe(masonryGrid, { childList: true, subtree: true });
</script>
