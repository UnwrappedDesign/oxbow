---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import BaseLayout from "@/layouts/BaseLayout.astro";
import Text from "@/components/fundations/typography/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import { formatDistanceToNowStrict } from "date-fns";
import updates from "@/data/updates.json";

const { section, subsection } = Astro.params;
const components = await Astro.glob(`@/components/oxbow/**/*.astro`);
const sectionComponents = components.filter((component) => {
  const sectionRegex = new RegExp(`${section}\/${subsection}\/.+\.astro$`, "i");
  return component.file?.match(sectionRegex);
});
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/screenshots/*.png"
);
const formattedSubsection = subsection.replace("-", " ");

const user = Astro.locals.user;

const SEVEN_DAYS_AGO = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

// Define the number of columns based on the current page
const gridColumns = {
  // Marketing
  "marketing/hero": 2,
  "marketing/pricing": 4,
  "marketing/features": 4,
  "marketing/logo-clouds": 4,
  "marketing/bento-grids": 4,
  "marketing/timeline": 2,
  "marketing/steps": 2,
  // Emails
  "emails/receipts": 2,
  // Application
  "application/tabs": 1,
  "application/alerts": 1,
  "application/inputs": 2,
  "application/badges": 2,
  "application/tables": 2,
  "application/navbars": 1,
  "application/banners": 1,
  "application/toggles": 2,
  "application/buttons": 2,
  "application/avatars": 2,
  "application/textarea": 2,
  "application/pagination": 2,
  "application/checkboxes": 2,
  "application/typography": 2,
  "application/breadcrumbs": 2,
  "application/radiogroups": 2,
  "application/notifications": 2,
  "application/button-groups": 2,
};

// Get the current page path
const currentPage = `${section}/${subsection}`;

// Set the number of columns, defaulting to 3 if not specified
const lgColumns = gridColumns[currentPage] || 4;

// Define the grid columns class based on the lgColumns
const gridColumnsClass = `lg:grid-cols-${lgColumns}`;
---

<BaseLayout>
  <section>
    <Wrapper variant="standard" class="pb-4 pt-24">
      <div class="flex items-center gap-2">
        <button
          class="flex items-center text-sm cursor-pointer gap-2 text-base-500 hover:text-base-900"
          onclick="history.back();"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left size-4"
            ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
              d="M15 6l-6 6l6 6"></path></svg
          >Go Back</button
        >
        <span aria-hidden="true" class="text-base-500">/</span>
        <Text
          tag="h1"
          variant="textSM"
          class="font-medium tracking-tight text-base-900 capitalize"
        >
          {subsection.replace(/-/g, " ")}
        </Text>
      </div>

      <div
        class={`relative w-full grid grid-cols-1  mt-8 pt-8 border-t border-base-200  md:grid-cols-2 gap-y-12 gap-x-4  lg:gap-y-20 ${gridColumnsClass} items-start`}
      >
        {
          sectionComponents.map((component, index) => {
            const filePath = component.file.split("/").slice(-3).join("/");

            const imagePath = `/src/screenshots/${component.file
              .split("/")
              .slice(-3)
              .join("_")
              .replace(".astro", ".png")}`;

            if (!images[imagePath]) {
              return null;
            }

            const updatedAt = new Date(updates[filePath] * 1000);

            const isUpdatedLastWeek = updatedAt > SEVEN_DAYS_AGO;

            return (
              <a
                href={`/playground/${filePath.replace(".astro", "")}`}
                class="relative flex flex-col group"
              >
                <div class="flex flex-col">
                  <div class="flex flex-col gap-2">
                    <div class="flex items-center gap-2">
                      <Text
                        tag="p"
                        variant="textSM"
                        class="flex items-center capitalize  text-base-500 group-hover:text-base-900 gap-2"
                      >
                        <span>{(index + 1).toString().padStart(2, "0")}</span>
                        <span> {subsection.replace(/-/g, " ")}</span>
                        {!user && index === 0 && (
                          <span class="text-base-900 ">Open Demo</span>
                        )}
                      </Text>
                    </div>
                  </div>
                  {isUpdatedLastWeek && (
                    <Text
                      tag="p"
                      variant="textXS"
                      class="relative flex items-center gap-1 text-base-400"
                    >
                      Updated{" "}
                      {formatDistanceToNowStrict(updatedAt, {
                        unit: "day",
                        roundingMethod: "ceil",
                      })}{" "}
                      ago
                    </Text>
                  )}
                </div>

                <Image
                  width={1000}
                  height={1000}
                  src={images[imagePath]() || "/placeholder.svg"}
                  alt={`${subsection} preview ${index + 1}`}
                  class="object-cover w-full mt-2 rounded-lg cursor-pointer  outline outline-base-100 transition-all duration-300 ease-in-out"
                />
              </a>
            );
          })
        }
      </div>
    </Wrapper>
  </section>
</BaseLayout>
