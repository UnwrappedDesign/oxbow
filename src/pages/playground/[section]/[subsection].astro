---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import BaseLayout from "@/layouts/BaseLayout.astro";
import Text from "@/components/fundations/typography/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import Button from "@/components/fundations/buttons/Button.astro";
import ChevronDown from "@/components/fundations/icons/ChevronDown.astro";
import SubsectionToolbarIsland from "@/components/playground/SubsectionToolbarIsland";
import { formatDistanceToNowStrict } from "date-fns";
import updates from "@/data/updates.json";

const { section, subsection } = Astro.params;
const modules = import.meta.glob("@/components/oxbow/**/*.astro", {
  eager: true,
});
const keys = Object.keys(modules);
const sectionRegex = new RegExp(`${section}/${subsection}/.+\\.astro$`, "i");

// Build category â†’ blocks map from available components
const triples = keys.map((k) => k.split("/").slice(-3)); // [section, subsection, file]
const subsByCat = Object.fromEntries(
  Array.from(new Set(triples.map(([sec]) => sec))).map((sec) => {
    const subs = Array.from(
      new Set(triples.filter(([s]) => s === sec).map(([, sub]) => sub)),
    ).sort();
    return [sec, subs];
  }),
);

const sectionComponents = keys
  .filter((k) => k.match(sectionRegex))
  .sort()
  .map((k) => {
    const filePath = k.split("/").slice(-3).join("/");
    const imagePath = `/src/screenshots/${k
      .split("/")
      .slice(-3)
      .join("_")
      .replace(".astro", ".png")}`;
    const mod: any = (modules as any)[k] || {};
    return {
      key: k,
      filePath,
      imagePath,
      description: mod.description || "",
      free: !!mod.freeComponent,
      component: mod?.default,
    };
  });
const allSmall = sectionComponents.every(({ filePath }) => {
  const pathNoAstro = filePath.replace(".astro", "");
  return /\/(buttons|button-groups|button-icon|badges|breadcrumbs|checkboxes|inputs|input-groups|radiogroups|select|toggles|typography|flyouts|alerts|avatars|banners)\//i.test(
    pathNoAstro,
  );
});
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/screenshots/*.png",
);

const formattedSubsection = subsection.replace("-", " ");
const user = Astro.locals.user;
const SEVEN_DAYS_AGO = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

// Normalize subsection for lookup (keeps things case/char safe)
const subsectionKey = (subsection || "").toLowerCase();
---

<style>
  .masonry-grid {
    column-gap: 1.5rem;
  }

  .masonry-item {
    break-inside: avoid;
    margin-bottom: 1rem;
  }

  /* Responsive column count */
  @media (min-width: 1200px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  @media (min-width: 992px) and (max-width: 1199px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  @media (min-width: 768px) and (max-width: 991px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  @media (max-width: 767px) {
    .masonry-grid {
      column-count: 1;
    }
  }
</style>

<BaseLayout>
  <div
    x-data={`{ layout: 'grid', cat: '${section}', sub: '${subsection}', subs: {}, fmt(s){ return (s||'').replace(/-/g,' ').replace(/\b\w/g, c => c.toUpperCase()); } }`}
    x-init="subs = JSON.parse($el.dataset.subs || '{}')"
    data-subs={JSON.stringify(subsByCat)}
  >
    <section class="border-t border-base-200">
      <Wrapper variant="standard" class="lg:border-x lg:border-base-200">
        <div class="flex items-center justify-between gap-2">
          <Text
            tag="h1"
            variant="textSM"
            class="font-medium tracking-tight capitalize text-zinc-900"
          >
            {subsection.replace(/-/g, " ")}
          </Text>
          <div>
            <SubsectionToolbarIsland
              client:load
              cat={section}
              sub={subsection}
              subsByCat={subsByCat}
            />
          </div>
        </div>
      </Wrapper>
    </section>
  </div>
  <section class="border-y border-base-200">
    <Wrapper
      variant="standard"
      class="2xl:border-x lg:border-base-200 border-x"
    >
      <div class="masonry-grid">
        {
          sectionComponents.map(
            (
              { key, filePath, imagePath, description, free, component: C },
              index,
            ) => {
              const pathNoAstro = filePath.replace(".astro", "");
              if (!images[imagePath]) return null;
              const updatedAt = new Date(updates[filePath] * 1000);
              const isUpdatedLastWeek = updatedAt > SEVEN_DAYS_AGO;
              return (
                <a
                  href={`/playground/${pathNoAstro}`}
                  class="relative flex flex-col group masonry-item"
                  style="display: block;"
                >
                  <div class="flex flex-col sr-only gap-1">
                    {isUpdatedLastWeek && (
                      <Text
                        tag="p"
                        variant="textXS"
                        class="relative flex items-center gap-1 text-zinc-400"
                      >
                        Updated{" "}
                        {formatDistanceToNowStrict(updatedAt, {
                          unit: "day",
                          roundingMethod: "ceil",
                        })}{" "}
                        ago
                      </Text>
                    )}
                  </div>
                  <div class="mt-2 overflow-hidden bg-white rounded-lg">
                    <Image
                      width={1000}
                      height={1000}
                      src={images[imagePath]?.() ?? "/placeholder.png"}
                      alt={`${subsection} preview ${index + 1}`}
                      class="object-cover object-top"
                    />
                  </div>
                </a>
              );
            },
          )
        }
      </div>
    </Wrapper>
  </section>
</BaseLayout>
