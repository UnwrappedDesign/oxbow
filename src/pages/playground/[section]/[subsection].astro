---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import BaseLayout from "@/layouts/BaseLayout.astro";
import Text from "@/components/fundations/typography/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import Button from "@/components/fundations/buttons/Button.astro";
import ChevronDown from "@/components/fundations/icons/ChevronDown.astro";
import SubsectionToolbarIsland from "@/components/playground/SubsectionToolbarIsland";
import { formatDistanceToNowStrict } from "date-fns";
import updates from "@/data/updates.json";

const { section, subsection } = Astro.params;
const modules = import.meta.glob("@/components/oxbow/**/*.astro", {
  eager: true,
});
const keys = Object.keys(modules);
const sectionRegex = new RegExp(`${section}/${subsection}/.+\\.astro$`, "i");

// Build category â†’ blocks map from available components
const triples = keys.map((k) => k.split("/").slice(-3)); // [section, subsection, file]
const subsByCat = Object.fromEntries(
  Array.from(new Set(triples.map(([sec]) => sec))).map((sec) => {
    const subs = Array.from(
      new Set(triples.filter(([s]) => s === sec).map(([, sub]) => sub)),
    ).sort();
    return [sec, subs];
  }),
);

const sectionComponents = keys
  .filter((k) => k.match(sectionRegex))
  .sort()
  .map((k) => {
    const filePath = k.split("/").slice(-3).join("/");
    const imagePath = `/src/screenshots/${k
      .split("/")
      .slice(-3)
      .join("_")
      .replace(".astro", ".png")}`;
    const mod: any = (modules as any)[k] || {};
    return {
      key: k,
      filePath,
      imagePath,
      description: mod.description || "",
      free: !!mod.freeComponent,
      component: mod?.default,
    };
  });
const allSmall = sectionComponents.every(({ filePath }) => {
  const pathNoAstro = filePath.replace(".astro", "");
  return /\/(buttons|button-groups|button-icon|badges|breadcrumbs|checkboxes|inputs|input-groups|radiogroups|select|toggles|typography|flyouts|alerts|avatars|banners)\//i.test(
    pathNoAstro,
  );
});
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/screenshots/*.png",
);

const formattedSubsection = subsection.replace("-", " ");
const user = Astro.locals.user;
const SEVEN_DAYS_AGO = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

// Normalize subsection for lookup (keeps things case/char safe)
const subsectionKey = (subsection || "").toLowerCase();
---

<style>
  .masonry-grid {
    column-gap: 1.5rem;
  }

  .masonry-item {
    break-inside: avoid;
    margin-bottom: 1rem;
  }

  /* Responsive column count */
  @media (min-width: 1200px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  @media (min-width: 992px) and (max-width: 1199px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  @media (min-width: 768px) and (max-width: 991px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  @media (max-width: 767px) {
    .masonry-grid {
      column-count: 1;
    }
  }
</style>

<BaseLayout>
  <div
    x-data={`{ layout: 'grid', cat: '${section}', sub: '${subsection}', subs: {}, fmt(s){ return (s||'').replace(/-/g,' ').replace(/\b\w/g, c => c.toUpperCase()); } }`}
    x-init="subs = JSON.parse($el.dataset.subs || '{}')"
    data-subs={JSON.stringify(subsByCat)}
  >
    <section class="border-t border-base-200">
      <Wrapper variant="standard" class="lg:border-x lg:border-base-200">
        <div class="flex items-center justify-between gap-2">
          <Text
            tag="h1"
            variant="textSM"
            class="font-medium tracking-tight capitalize text-zinc-900"
          >
            {subsection.replace(/-/g, " ")}
          </Text>
          <div>
            <SubsectionToolbarIsland client:load cat={section} sub={subsection} subsByCat={subsByCat} />
          </div>
            <!--
            <div class="relative">
              <span class="sr-only">Category</span>
              <Button
                size="xxs"
                variant="oxbowMuted"
                class="pointer-events-auto !shadow-none inline-flex items-center gap-2 h-[28px] px-2 py-1"
                x-on:click.stop="openSub=false; openCat=!openCat; if(openCat) $nextTick(()=>$refs.catMenu?.focus())"
                x-on:keydown.arrow-down.prevent="openSub=false; openCat=true; $nextTick(()=>$refs.catMenu?.focus())"
                :aria-expanded="openCat"
                aria-haspopup="menu"
                aria-controls="cat-menu"
              >
                <span class="capitalize" x-text="fmt(cat)"></span>
                <ChevronDown class="size-4" />
              </Button>

              <div
                x-show="openCat"
                x-transition
                @click.outside="openCat=false"
                x-trap="openCat"
                x-ref="catMenu"
                id="cat-menu"
                tabindex="-1"
                role="menu"
                class="absolute right-0 top-full z-50 mt-2 w-52 origin-top-right rounded-xl outline outline-zinc-100 shadow bg-white text-[13px] text-zinc-600 divide-y divide-zinc-100"
                x-cloak
              >
                <div class="py-2 max-h-64 overflow-auto">
                  <template x-for="(list, key) in subs" :key="key">
                    <a
                      class="w-full flex items-center justify-between px-3 py-1.5 hover:bg-sand-100"
                      role="menuitem"
                      :href="`/playground/${key}/${(subs[key]||[])[0]||''}`"
                      @click="openCat=false"
                    >
                      <span class="capitalize" x-text="fmt(key)"></span>
                      <template x-if="cat===key">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                          class="size-4 text-blue-600"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4-4a.75.75 0 011.06-1.06l3.353 3.353 7.528-9.884a.75.75 0 011.043-.136z"
                            clip-rule="evenodd"></path>
                        </svg>
                      </template>
                    </a>
                  </template>
                </div>
              </div>
            </div>
            
            <div class="relative">
              <span class="sr-only">Block</span>
              <Button
                size="xxs"
                variant="oxbowMuted"
                class="pointer-events-auto !shadow-none inline-flex items-center gap-2 h-[28px] px-2 py-1"
                x-on:click.stop="openCat=false; openSub=!openSub; if(openSub) $nextTick(()=>$refs.subMenu?.focus())"
                x-on:keydown.arrow-down.prevent="openCat=false; openSub=true; $nextTick(()=>$refs.subMenu?.focus())"
                :aria-expanded="openSub"
                aria-haspopup="menu"
                aria-controls="sub-menu"
              >
                <span class="capitalize" x-text="fmt(sub)"></span>
                <ChevronDown class="size-4" />
              </Button>

              <div
                x-show="openSub"
                x-transition
                @click.outside="openSub=false"
                x-trap="openSub"
                x-ref="subMenu"
                id="sub-menu"
                tabindex="-1"
                role="menu"
                class="absolute right-0 top-full z-50 mt-2 w-64 origin-top-right rounded-xl outline outline-zinc-100 shadow bg-white text-[13px] text-zinc-600 divide-y divide-zinc-100"
                x-cloak
              >
                <div class="py-2 max-h-64 overflow-auto">
                  <template x-for="name in (subs[cat]||[])" :key="name">
                    <a
                      class="w-full flex items-center justify-between px-3 py-1.5 hover:bg-sand-100"
                      role="menuitem"
                      :href="`/playground/${cat}/${name}`"
                      @click="openSub=false"
                    >
                      <span class="capitalize" x-text="fmt(name)"></span>
                      <template x-if="sub===name">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                          class="size-4 text-blue-600"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4-4a.75.75 0 011.06-1.06l3.353 3.353 7.528-9.884a.75.75 0 011.043-.136z"
                            clip-rule="evenodd"></path>
                        </svg>
                      </template>
                    </a>
                  </template>
                </div>
              </div>
            </div>
            -->
          </div>
        </div>
      </Wrapper>
    </section>
    <section class="border-y border-base-200">
      <Wrapper
        variant="standard"
        class="2xl:border-x lg:border-base-200 border-x"
      >
        <div class="masonry-grid">
          {
            sectionComponents.map(
              (
                { key, filePath, imagePath, description, free, component: C },
                index,
              ) => {
                const pathNoAstro = filePath.replace(".astro", "");
                if (!images[imagePath]) return null;
                const updatedAt = new Date(updates[filePath] * 1000);
                const isUpdatedLastWeek = updatedAt > SEVEN_DAYS_AGO;
                return (
                  <a
                    href={`/playground/${pathNoAstro}`}
                    class="relative flex flex-col group masonry-item"
                    style="display: block;"
                  >
                    <div class="flex flex-col sr-only gap-1">
                      {isUpdatedLastWeek && (
                        <Text
                          tag="p"
                          variant="textXS"
                          class="relative flex items-center gap-1 text-zinc-400"
                        >
                          Updated{" "}
                          {formatDistanceToNowStrict(updatedAt, {
                            unit: "day",
                            roundingMethod: "ceil",
                          })}{" "}
                          ago
                        </Text>
                      )}
                    </div>
                    <div class="mt-2 overflow-hidden bg-white rounded-lg">
                      <Image
                        width={1000}
                        height={1000}
                        src={images[imagePath]?.() ?? "/placeholder.png"}
                        alt={`${subsection} preview ${index + 1}`}
                        class="object-cover object-top"
                      />
                    </div>
                  </a>
                );
              },
            )
          }
        </div>
      </Wrapper>
    </section>
  </div>
</BaseLayout>
