---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import BaseLayout from "@/layouts/BaseLayout.astro";

const { section, subsection } = Astro.params;

const components = await Astro.glob(`@/components/oxbow/**/*.astro`);
const sectionComponents = components.filter((component) => {
  const sectionRegex = new RegExp(`${section}\/${subsection}\/.+\.astro$`, "i");
  return component.file?.match(sectionRegex);
});

const images = import.meta.glob<{ default: ImageMetadata }>('/src/screenshots/*.png')
---
<BaseLayout>
  <section>
     <div class="max-w-5xl pt-12 lg:pt-32 2xl:max-w-[100rem] mx-auto px-8">
          <h1
            class="text-4xl font-semibold tracking-tight text-black lg:text-balance 2xl:text-6xl">
            Heros
          </h1>
     </div>
      <div class="max-w-screen 2xl:max-w-[100rem] mx-auto px-8 mt-12">
      <div
        id="masonry-grid"
        class="gap-4 mt-12">
        {
          sectionComponents.map((component, index) => {
            const imagePath = "/src/screenshots/" + component.file.split('/').slice(-3).join('_').replace('.astro', '.png');

            return images[imagePath] && (
              <a
                href={`/playground/${section}/${subsection}/${index + 1}`}
                class="group inline-block w-full relative">
                <div class="absolute top-1 left-2 -mt-4 z-10">
                  <div class="bg-white text-black rounded-full p-2 border size-6 items-center flex justify-center text-xs"> <!-- Added a border for visibility -->
                    {index + 1}
                  </div>
                </div>
                <Image
                  src={images[imagePath]()}
                  alt=""
                  class="w-full object-cover border rounded-lg group-hover:ring-2 group-hover:ring-offset-2 group-hover:ring-base-200 duration-300  relative"
                />
              </a>
            )
          })
        }
      </div>
    </div>
  </section>
</BaseLayout>

<script type="module">
 const masonryGrid = document.getElementById("masonry-grid");
const columnWidth = 300; // Adjust this value as needed
const gap = 18; // Adjust this value to change the gap (in pixels)
function createMasonryGrid() {
  const gridWidth = masonryGrid.offsetWidth;
  const columns = Math.floor(gridWidth / columnWidth) || 1;
  // Reset the grid layout
  masonryGrid.style.columnCount = columns.toString();
  masonryGrid.style.columnGap = `${gap}px`;
  // Remove any existing grid styles
  masonryGrid.style.display = 'block';
  masonryGrid.style.gridTemplateColumns = '';
  masonryGrid.style.gridTemplateRows = '';
  const items = Array.from(masonryGrid.children);
  items.forEach((item) => {
    // Reset item styles
    item.style.gridRowStart = '';
    item.style.gridColumnStart = '';
    // Add styles for masonry layout
    item.style.breakInside = 'avoid';
    item.style.marginBottom = `${gap}px`; // Set the vertical gap between items
  });
}
// Initial layout
createMasonryGrid();
// Update layout on window resize
window.addEventListener("resize", createMasonryGrid);
// Update layout when all images are loaded
window.addEventListener("load", createMasonryGrid);
// Optional: Update layout when new images are added
const observer = new MutationObserver(createMasonryGrid);
observer.observe(masonryGrid, { childList: true, subtree: true });
</script>
