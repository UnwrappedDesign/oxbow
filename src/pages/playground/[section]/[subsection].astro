---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import BaseLayout from "@/layouts/BaseLayout.astro";
import Text from "@/components/fundations/typography/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import { formatDistanceToNowStrict } from "date-fns";
import updates from "@/data/updates.json";

const { section, subsection } = Astro.params;
const components = await Astro.glob(`@/components/oxbow/**/*.astro`);

const sectionRegex = new RegExp(`${section}/${subsection}/.+\\.astro$`, "i");

const sectionComponents = components
  .filter((component) => component.file?.match(sectionRegex))
  .map((component) => {
    const filePath = component.file.split("/").slice(-3).join("/");
    const imagePath = `/src/screenshots/${component.file
      .split("/")
      .slice(-3)
      .join("_")
      .replace(".astro", ".png")}`;
    return {
      ...component,
      filePath,
      imagePath,
      description: component?.description || "",
    };
  });

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/screenshots/*.png"
);

const formattedSubsection = subsection.replace("-", " ");
const user = Astro.locals.user;
const SEVEN_DAYS_AGO = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

const gridColumns = {
  // Marketing
  "marketing/team": 2,
  "marketing/hero": 2,
  "marketing/steps": 2,
  "marketing/pricing": 2,
  "marketing/contact": 2,
  "marketing/features": 2,
  "marketing/timeline": 2,
  "marketing/logo-clouds": 2,
  "marketing/bento-grids": 2,
  "marketing/landing-pages": 2,
  // Ecommerce
  "ecommerce/product-details": 2,
  "ecommerce/product-list": 2,
  "ecommerce/category-previews": 2,
  // Application
  "application/tabs": 1,
  "application/alerts": 1,
  "application/inputs": 1,
  "application/input-groups": 1,
  "application/badges": 2,
  "application/tables": 2,
  "application/navbars": 1,
  "application/banners": 1,
  "application/toggles": 2,
  "application/buttons": 2,
  "application/button-icon": 2,
  "application/avatars": 2,
  "application/textarea": 2,
  "application/commandbar": 2,
  "application/sign-up": 2,
  "application/sign-in": 2,
  "application/pagination": 2,
  "application/checkboxes": 2,
  "application/typography": 2,
  "application/breadcrumbs": 2,
  "application/emptyStates": 2,
  "application/radiogroups": 2,
  "application/notifications": 2,
  "application/button-groups": 2,
};

const currentPage = `${section}/${subsection}`;
const lgColumns = gridColumns[currentPage] || 4;
const gridColumnsClass = `lg:grid-cols-${lgColumns}`;
---

<BaseLayout>
  <section class="border-t border-base-200">
    <Wrapper variant="standard" class="lg:border-x lg:border-base-200">
      <div class="flex items-center gap-2">
        <button
          class="flex items-center text-sm cursor-pointer gap-2 text-base-500 hover:text-base-900"
          onclick="history.back();"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left size-4"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M15 6l-6 6l6 6"></path>
          </svg>
          Go Back
        </button>
        <span aria-hidden="true" class="text-base-500">/</span>
        <Text
          tag="h1"
          variant="textSM"
          class="font-medium tracking-tight capitalize text-base-900"
        >
          {subsection.replace(/-/g, " ")}
        </Text>
      </div>
    </Wrapper>
  </section>

  <section class="border-t border-base-200">
    <Wrapper variant="standard" class="lg:border-x lg:border-base-200">
      <div
        class={`relative w-full grid grid-cols-1 md:grid-cols-2 gap-y-12 gap-x-4 lg:gap-y-20 ${gridColumnsClass} items-start`}
      >
        {
          sectionComponents.map(
            ({ filePath, imagePath, description }, index) => {
              if (!images[imagePath]) return null;

              const updatedAt = new Date(updates[filePath] * 1000);
              const isUpdatedLastWeek = updatedAt > SEVEN_DAYS_AGO;

              return (
                <a
                  href={`/playground/${filePath.replace(".astro", "")}`}
                  class="relative flex flex-col group"
                >
                  <div class="flex flex-col gap-1">
                    {isUpdatedLastWeek && (
                      <Text
                        tag="p"
                        variant="textXS"
                        class="relative flex items-center gap-1 text-base-400"
                      >
                        Updated{" "}
                        {formatDistanceToNowStrict(updatedAt, {
                          unit: "day",
                          roundingMethod: "ceil",
                        })}{" "}
                        ago
                      </Text>
                    )}
                    <div class="flex items-center gap-2">
                      <Text
                        tag="p"
                        variant="textXS"
                        class="flex flex-wrap items-center font-medium  text-base-500 group-hover:text-base-600 gap-1"
                      >
                        <span>{(index + 1).toString().padStart(2, "0")}.</span>
                        <span class="capitalize sr-only">
                          {" "}
                          {subsection.replace(/-/g, " ")}
                        </span>

                        {description.replace(/^./, (c) => c.toUpperCase())}
                        {!user && index === 0 && (
                          <span class="text-base-900 text-xs">Free Demo</span>
                        )}
                      </Text>
                    </div>
                  </div>
                  <div class="overflow-hidden rounded-lg  shadow-oxbow outline outline-base-200 bg-white">
                    <Image
                      width={1000}
                      height={1000}
                      src={images[imagePath]() || "/placeholder.png"}
                      alt={`${subsection} preview ${index + 1}`}
                      class="object-cover   object-top"
                    />
                  </div>
                </a>
              );
            }
          )
        }
      </div>
    </Wrapper>
  </section>
</BaseLayout>
