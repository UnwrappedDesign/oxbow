---
// Foundation
import BaseLayout from "@/layouts/BaseLayout.astro";
import Playground from "@/components/playground/Playground.astro";
import Text from "@/components/fundations/typography/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";

// Parameters
const { section, subsection, index } = Astro.params;
const components = await Astro.glob(`@/components/oxbow/**/*.astro`);
const sectionComponents = components.filter((component) => {
  const sectionRegex = new RegExp(`${section}\/${subsection}\/.+\.astro$`, "i");
  return component.file?.match(sectionRegex);
});
const component = sectionComponents[parseInt(index) - 1];

// Get the description for the current component
const componentDescription = component?.description || "";
---

<BaseLayout>
  <section class="border-t border-base-200">
    <Wrapper variant="standard" class="lg:border-x lg:border-base-200">
      <div class="flex items-end justify-between w-full">
        <div class="flex flex-wrap md:items-center gap-2">
          <div class="flex items-center gap-2">
            <button
              class="flex items-center text-sm gap-2 text-base-500 hover:text-base-900"
              onclick="history.back();"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left size-4"
                ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
                  d="M15 6l-6 6l6 6"></path></svg
              >Go back</button
            >
            <span aria-hidden="true" class="text-base-500">/</span>
            <Text
              tag="h1"
              variant="textSM"
              class="font-medium capitalize text-base-900"
            >
              {`${subsection.replace(/-/g, " ")} #${index.replace(/-/g, " ")}`}
            </Text>
          </div>
          <span aria-hidden="true" class="hidden text-base-500 md:block">/</span
          >
          {
            componentDescription && (
              <Text tag="p" variant="textSM" class=" text-base-500">
                {componentDescription}
              </Text>
            )
          }
        </div>
        <!--   <div class="sr-only ">
          <nav
            class="relative z-0 inline-flex gap-1.5 sr-only"
            aria-label="Pagination"
          >
            
            <IconButton
              disable
              aria-label="Go to previous page"
              variant="alternative"
              size="xs"
            >
              <ChevronLeft size="sm" slot="icon" />
              <span class="sr-only">Previous</span>
            </IconButton>

           
            <IconButton
              aria-label="Go to next page"
              variant="alternative"
              size="xs"
            >
              <ChevronRight size="sm" slot="icon" />
              <span class="sr-only">Next</span>
            </IconButton>
          </nav>
        </div> -->
      </div>
    </Wrapper>
  </section>
  <section class="overflow-hidden border-t border-base-200">
    <Wrapper variant="wide" class="py-8 2xl:border-x 2xl:border-base-200">
      <Playground
        componentIndex={parseInt(index)}
        componentPath={component.file.replace(/.*\/src/, "src")}
        playgroundRef={`${section}-${subsection}-${index}`}
      >
        <component.default />
      </Playground>
    </Wrapper>
  </section>
</BaseLayout>
<script>
  function resizeIFramesToFitContent() {
    const iframes = document.querySelectorAll("iframe");
    iframes.forEach((iframe) => {
      try {
        iframe.height = iframe.contentWindow?.document.body.scrollHeight + "px";
      } catch (e) {}
    });
    requestAnimationFrame(resizeIFramesToFitContent);
  }
  addEventListener(
    "load",
    requestAnimationFrame.bind(this, resizeIFramesToFitContent)
  );
</script>
