---
// Foundation
import BaseLayout from "@/layouts/BaseLayout.astro";
import Text from "@/components/fundations/typography/Text.astro";
import Playground from "@/components/playground/Playground.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import IconButton from "@/components/fundations/buttons/IconButton.astro";
import ChevronLeft from "@/components/fundations/icons/ChevronLeft.astro";
import ChevronRight from "@/components/fundations/icons/ChevronRight.astro";

// Parameters
const { section, subsection, index } = Astro.params;
const modules = import.meta.glob("@/components/oxbow/**/*.astro");
const keys = Object.keys(modules);
const sectionRegex = new RegExp(`${section}/${subsection}/.+\\.astro$`, "i");
const sectionKeys = keys.filter((k) => k.match(sectionRegex));
sectionKeys.sort();
const currentKey = sectionKeys[parseInt(index) - 1];
const componentModule = currentKey ? await modules[currentKey]() : undefined;

// Metadata from module exports
const componentDescription = componentModule?.description || "";
const freeComponent = componentModule?.freeComponent || false;

const sectionLength = sectionKeys.length;
const PreviewElement = parseInt(index) === 1 ? "div" : "a";
const PreviewElementProps =
  parseInt(index) === 1
    ? {}
    : { href: `/playground/${section}/${subsection}/${parseInt(index) - 1}` };
const NextElement = parseInt(index) === sectionLength ? "div" : "a";
const NextElementProps =
  parseInt(index) === sectionLength
    ? {}
    : { href: `/playground/${section}/${subsection}/${parseInt(index) + 1}` };
---

<!-- 
<style>
  html {
    overflow-y: auto;
    scrollbar-gutter: stable;
  }
</style> -->
<BaseLayout>
  <section class="border-t border-zinc-200">
    <Wrapper variant="standard" class="lg:border-x lg:border-zinc-200">
      <div class="flex items-end justify-between w-full">
        <div class="flex flex-wrap items-center gap-2">
          <div class="flex items-center gap-2">
            <button
              class="flex items-center text-sm gap-2 text-zinc-500 hover:text-zinc-900"
              onclick="history.back();"
            >
              <ChevronLeft size="sm" slot="icon" />
              Go back</button
            >
            <span aria-hidden="true" class="text-zinc-500">/</span>
            <Text
              tag="h1"
              variant="textSM"
              class="font-medium capitalize text-zinc-900"
            >
              {`${subsection.replace(/-/g, " ")} #${index.replace(/-/g, " ")}`}
            </Text>
          </div>
          <span aria-hidden="true" class="hidden text-zinc-500 md:block">/</span
          >
          {
            componentDescription && (
              <Text tag="p" variant="textSM" class=" text-zinc-500">
                {componentDescription}
              </Text>
            )
          }
        </div>
        <div>
          <nav class="relative z-0 inline-flex gap-1.5" aria-label="Pagination">
            <PreviewElement {...PreviewElementProps}>
              <IconButton
                disable={parseInt(index) === 1}
                aria-label="Go to previous page"
                variant="alternative"
                size="xs"
              >
                <ChevronLeft size="sm" slot="icon" />
                <span class="sr-only">Previous</span>
              </IconButton>
            </PreviewElement>
            <NextElement {...NextElementProps}>
              <IconButton
                disable={parseInt(index) === sectionLength}
                aria-label="Go to next page"
                variant="alternative"
                size="xs"
              >
                <ChevronRight size="sm" slot="icon" />
                <span class="sr-only">Next</span>
              </IconButton>
            </NextElement>
          </nav>
        </div>
      </div>
    </Wrapper>
  </section>
  <section class="border-t border-zinc-200">
    <Wrapper variant="wide" class="py-8 2xl:border-x 2xl:border-zinc-200">
      <Playground
        componentIndex={parseInt(index)}
        componentPath={currentKey ? currentKey.replace(/^\//, "") : ""}
        playgroundRef={`${section}-${subsection}-${index}`}
        freeComponent={freeComponent}
        initialTabIsCode={Astro.url.searchParams.get("tab") === "code"}
      >
        <componentModule.default />
      </Playground>
    </Wrapper>
  </section>
</BaseLayout>
<script is:inline>
  // Adjust iframe height when the preview posts its size
  window.addEventListener("message", (e) => {
    const d = e.data;
    if (!d || d.type !== "oxbow-iframe-height") return;
    const iframe = document.getElementById(d.id);
    if (iframe) iframe.style.height = (d.height || 0) + "px";
  });
</script>
