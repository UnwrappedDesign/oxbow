---
// Foundation
import BaseLayout from "@/layouts/BaseLayout.astro";
import Text from "@/components/fundations/typography/Text.astro";
import Playground from "@/components/playground/Playground.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import IconButton from "@/components/fundations/buttons/IconButton.astro";
import ChevronLeft from "@/components/fundations/icons/ChevronLeft.astro";
import ChevronRight from "@/components/fundations/icons/ChevronRight.astro";
// import DetailToolbarIsland from "@/components/playground/DetailToolbarIsland";
import type { ComponentInstance } from "astro";

type PlaygroundComponentModule = ComponentInstance & {
  description?: string;
  freeComponent?: boolean;
};

// Parameters
const { section, subsection, index } = Astro.params;
const modules = import.meta.glob("@/components/oxbow/**/*.astro") as Record<
  string,
  () => Promise<PlaygroundComponentModule>
>;
const keys = Object.keys(modules);
const sectionRegex = new RegExp(`${section}/${subsection}/.+\\.astro$`, "i");
const sectionKeys = keys.filter((k) => k.match(sectionRegex));
sectionKeys.sort();
const currentKey = sectionKeys[parseInt(index) - 1];
const componentModule = currentKey ? await modules[currentKey]() : undefined;

// Metadata from module exports
const componentDescription = componentModule?.description || "";
const freeComponent = componentModule?.freeComponent ?? true;

const sectionLength = sectionKeys.length;
const PreviewElement = parseInt(index) === 1 ? "div" : "a";
const PreviewElementProps =
  parseInt(index) === 1
    ? {}
    : { href: `/playground/${section}/${subsection}/${parseInt(index) - 1}` };
const NextElement = parseInt(index) === sectionLength ? "div" : "a";
const NextElementProps =
  parseInt(index) === sectionLength
    ? {}
    : { href: `/playground/${section}/${subsection}/${parseInt(index) + 1}` };

// Build category â†’ blocks map and counts for detail navigation
const triples = keys.map((k) => k.split("/").slice(-3)); // [section, subsection, file]
const subsByCat = Object.fromEntries(
  Array.from(new Set(triples.map(([sec]) => sec))).map((sec) => {
    const subs = Array.from(
      new Set(triples.filter(([s]) => s === sec).map(([, sub]) => sub))
    ).sort();
    return [sec, subs];
  })
);
const countsByCatSub = triples.reduce(
  (acc, [sec, sub]) => {
    const key = `${sec}/${sub}`;
    acc[key] = (acc[key] || 0) + 1;
    return acc;
  },
  {} as Record<string, number>
);
---

<style is:global>
  html {
    overflow-y: auto;
    scrollbar-gutter: stable;
  }

  :where(html, body) {
    margin: 0;
    padding: 0;
    min-height: 0 !important;
    height: auto !important;
  }
  #oxbow-root {
    display: block;
  }
  #oxbow-root img {
    max-width: 100%;
    height: auto;
  }
</style>

<BaseLayout>
  <section class="relative">
    <Wrapper variant="standard">
      <div class="flex items-end justify-between w-full">
        <div class="flex flex-wrap items-center gap-2">
          <div class="flex items-center gap-2">
            <Text
              tag="h1"
              variant="textSM"
              class="font-medium capitalize text-zinc-900 dark:text-zinc-50"
            >
              {subsection.replace(/-/g, " ")}
            </Text>
          </div>
          <Text
            tag="p"
            variant="textSM"
            class="flex gap-1 text-zinc-500 dark:text-zinc-400"
          >
            {
              componentDescription && (
                <span
                  aria-hidden="true"
                  class="hidden text-zinc-500 md:block dark:text-zinc-400"
                >
                  /
                </span>
              )
            }
            {componentDescription}
          </Text>
        </div>
        <!-- Toolbar moved into Playground toolbar -->
      </div>
    </Wrapper>
  </section>
  <section>
    <Wrapper variant="wide" class="relative py-8">
      <Playground
        componentIndex={parseInt(index)}
        componentPath={currentKey ? currentKey.replace(/^\//, "") : ""}
        playgroundRef={`${section}-${subsection}-${index}`}
        freeComponent={freeComponent}
        initialTabIsCode={Astro.url.searchParams.get("tab") === "code"}
        navCat={section}
        navSub={subsection}
        navIdx={parseInt(index)}
        subsByCat={subsByCat}
        counts={countsByCatSub}
        prevHref={parseInt(index) === 1
          ? undefined
          : `/playground/${section}/${subsection}/${parseInt(index) - 1}`}
        nextHref={parseInt(index) === sectionLength
          ? undefined
          : `/playground/${section}/${subsection}/${parseInt(index) + 1}`}
        sectionLength={sectionLength}
      >
        <componentModule.default />
      </Playground>
    </Wrapper>
  </section>
</BaseLayout>

<script is:inline>
  // Parent-side listener: update iframe and container height based on messages from /iframe/* pages
  (function () {
    function setHeightById(id, height) {
      const ifr = document.getElementById(id);
      if (!ifr || !(ifr instanceof HTMLIFrameElement)) return;
      const n = Number(height) || 0;
      if (n <= 0) return; // ignore bogus early heights
      const target = n + "px";
      if (ifr.style.height !== target) ifr.style.height = target;
      const container = ifr.parentElement;
      if (container && container.style.height !== target)
        container.style.height = target;
    }

    window.addEventListener("message", (e) => {
      try {
        const data = e?.data || {};
        if (data.type === "oxbow-height" && data.id) {
          setHeightById(data.id, data.height);
        }
      } catch (_) {}
    });
  })();
</script>
