---
import IframeHead from "@/components/IframeHead.astro";

const { componentPath } = Astro.params;
const params = Astro.url.searchParams;
const context = params.get("context");

// Lazy module map, only load needed component
const modules = import.meta.glob("@/components/oxbow/**/*.astro");
const keys = Object.keys(modules);
// Fix: strip any leading /src/components/oxbow/ from componentPath
let relComponentPath = componentPath.replace(/^\/src\/components\/oxbow\//, "");
const matchKey = keys.find((k) => k.endsWith(relComponentPath));
const component = matchKey ? await modules[matchKey]() : undefined;
---

<html lang="en" class="selection:text-blue selection:bg-blue/5">
  <head>
    <IframeHead />
    <style>
      html,
      body {
        margin: 0 !important;
        padding: 0 !important;
        min-height: 0 !important;
        height: auto !important;
        box-sizing: border-box;
        transform: none !important;
        zoom: 1 !important;
        backface-visibility: hidden;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
    </style>
  </head>
  <body>
    {
      context === "card" ? (
        <div class="p-4 md:p-6">
          <component.default />
        </div>
      ) : (
        <component.default />
      )
    }
    <script is:inline>
      (function () {
        const params = new URLSearchParams(window.location.search);
        const iframeId = params.get("iframeId") || "";

        const computeHeight = () => {
          try {
            const d = document;
            const b = d.body;
            const e = d.documentElement;
            return Math.max(
              b?.scrollHeight || 0,
              e?.scrollHeight || 0,
              b?.offsetHeight || 0,
              e?.offsetHeight || 0,
              b?.clientHeight || 0,
              e?.clientHeight || 0,
            );
          } catch (_) {
            return 0;
          }
        };

        let lastH = 0; let thTimer = null;
        const postHeightNow = () => {
          const h = computeHeight();
          if (Math.abs(h - lastH) < 1) return; lastH = h;
          try { parent.postMessage({ type: "oxbow-iframe-height", id: iframeId, height: h }, "*"); } catch (_) {}
        };
        const postHeight = () => {
          if (thTimer) return; thTimer = setTimeout(() => { thTimer = null; postHeightNow(); }, 33);
        };

        const postSoon = () => requestAnimationFrame(postHeight);

        // Initial syncs
        window.addEventListener("DOMContentLoaded", postSoon);
        window.addEventListener("load", () => {
          postHeight();
          setTimeout(postHeight, 50);
          setTimeout(postHeight, 200);
        });

        // Observe size and DOM changes
        try {
          const ro = new ResizeObserver(postSoon);
          ro.observe(document.documentElement);
          ro.observe(document.body);
        } catch (_) {}

        try {
          const mo = new MutationObserver(postSoon);
          mo.observe(document.documentElement, { childList: true, subtree: true, attributes: true });
        } catch (_) {}

        // Late-loading assets (images, fonts)
        document.querySelectorAll("img, video, iframe").forEach((el) => {
          if ("complete" in el && el.complete) return;
          el.addEventListener("load", postSoon, { once: true });
          el.addEventListener("error", postSoon, { once: true });
        });
        if (document.fonts && document.fonts.ready) {
          document.fonts.ready.then(postSoon).catch(() => {});
        }

        // Respond to parent explicit requests
        window.addEventListener("message", function (e) {
          if (e.data && e.data.type === "oxbow-request-height") postHeight();
        });
      })();
    </script>
  </body>
</html>
