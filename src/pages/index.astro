---
import { AstroSeo } from "@astrolib/seo";
// Marketing
import { pageSections } from "@/data/entries.json";
// Application
import { navigation } from "@/data/entries.json";
import { elements } from "@/data/entries.json";
import { overlay } from "@/data/entries.json";
// Forms
import { forms } from "@/data/entries.json";

import BaseLayout from "@/layouts/BaseLayout.astro";
import EntryStructure from "@/components/landing/EntryStructure.astro";
---

<AstroSeo
  title="Windstatic - Home "
  description="A set of elements, templates & layouts made with Tailwind CSS and Alpine.js"
  canonical="https://www.windstatic.com"
  openGraph={{
    url: "https://www.windstatic.com",
    title: "Windstatic - Home",
    description:
      "Discover a collection of components ready to be seamlessly integrated into your applications with just a simple copy and paste.",
    images: [
      {
        url: "https://www.windstatic.com/images/OpenGraph/facebook.png",
        width: 1200,
        height: 630,
        alt: "Social open graph",
        type: "image/png",
      },
      {
        url: "https://www.windstatic.com/OpenGraph/twitter.png",
        width: 4096,
        height: 4096,
        alt: "Twitter open graph",
        type: "image/png",
      },
      { url: "https://www.windstatic.com/OpenGraph/facebook.ong" },
      { url: "https://www.windstatic.com/OpenGraph/twitter.png" },
    ],
    site_name: "Windstatic",
  }}
  twitter={{
    handle: "@Mike_Andreuzza",
    site: "https://www.windstatic.com",
    cardType: "summary_large_image",
  }}
/>
<BaseLayout>
  <section class="relative overflow-hidden">

    <div class="max-w-xl mx-auto px-8 pt-12 lg:pt-32">
      <div class="flex items-center gap-4">
        <div class="inline-flex gap-2 items-center">
          <svg
            class="flex-none inline size-6"
            viewBox="0 0 64 64"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_459_2)">
              <path
                d="M32 12.75C23.4668 12.75 18.1332 17.0168 16 25.55C19.2 21.2833 22.9333 19.6832 27.2 20.75C29.6343 21.3585 31.3743 23.2498 33.3003 25.0795C36.4378 28.2643 40.0687 31.95 48 31.95C56.5332 31.95 61.8668 27.6832 64 19.15C60.8 23.4167 57.0667 25.0167 52.8 23.95C50.3657 23.3415 48.6257 21.4503 46.6997 19.6205C43.5622 16.4358 39.9313 12.75 32 12.75ZM16 31.95C7.46675 31.95 2.13325 36.2168 0 44.75C3.2 40.4833 6.93325 38.8833 11.2 39.95C13.6342 40.5585 15.3742 42.4497 17.3002 44.2795C20.4377 47.4642 24.0687 51.15 32 51.15C40.5332 51.15 45.8668 46.8833 48 38.35C44.8 42.6168 41.0667 44.2167 36.8 43.15C34.3657 42.5415 32.6258 40.6502 30.6998 38.8205C27.5623 35.6357 23.9313 31.95 16 31.95Z"
                fill="#38BDF9"
                stroke="#38BDF9"
                stroke-width="0.25"
              ></path>
            </g>
            <defs>
              <clipPath id="clip0_459_2">
                <rect
                  width="64"
                  height="64"
                  fill="white"
                ></rect>
              </clipPath>
            </defs>
          </svg> Tailwind CSS
        </div>
        ·
        <div class="inline-flex gap-2 items-center">
          <svg
            class="flex-none inline size-6"
            viewBox="0 0 64 64"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_460_7)">
              <path
                d="M49.7769 17L63.9992 31.16L49.7769 45.3197L35.5547 31.1597L49.7769 17Z"
                fill="#77C1D2"
              ></path>
              <path
                d="M14.2222 17L43.7067 46.355H15.2622L0 31.16L14.2222 17Z"
                fill="#2D3441"
              ></path>
            </g>
            <defs>
              <clipPath id="clip0_460_7">
                <rect
                  width="64"
                  height="29.5"
                  fill="white"
                  transform="translate(0 17)"
                ></rect>
              </clipPath>
            </defs>
          </svg>
          Alpine JS
        </div>
      </div>
      <div class="prose-styles pt-8">
        <h1>
          windstatic — a set of elements, templates & layouts made with
          Tailwind CSS and Alpine.js
        </h1>
        <p>
          Discover a collection of components ready to be seamlessly
          integrated into your applications with just a simple copy and paste.
        </p>
        <div class="flex gap-3 text-gray-400">
          <span
            class="hidden lg:inline"
            title="command palette">
            Search for anything with —
            <span class="text-xs"> ⌘ + K </span>
            or <span class="text-xs"> CTRL + K </span>
          </span>
        </div>
      </div>
    </div>
    <div class="max-w-7xl mx-auto px-8 pb-12 mt-12 lg:pb-32">
      <div
        x-data
        x-tabs>
        <div
          x-tabs:list
          class="-mb-px flex items-stretch gap-2 border-b">
          <button
            x-tabs:tab
            type="button"
            :class="$tab.isSelected ? 'border-blue-500 bg-white' : 'border-transparent'"
            class="inline-flex border-b-2 py-2.5 pr-6"
            >Marketing</button
          >
          <button
            x-tabs:tab
            type="button"
            :class="$tab.isSelected ? 'border-blue-500 bg-white' : 'border-transparent'"
            class="inline-flex r border-b-2 py-2.5 pr-6"
            >Application</button
          >
          <button
            x-tabs:tab
            type="button"
            :class="$tab.isSelected ? 'border-blue-500 bg-white' : 'border-transparent'"
            class="inline-flex r border-b-2 py-2.5 pr-6"
            >ECommerce</button
          >
        </div>
        <div
          x-tabs:panels
          class="pt-12">
          <section
            class="flex flex-col gap-24"
            x-tabs:panel>
            <div>
              <div>
                <div
                  class="prose-styles grid grid-cols-1 gap-4 lg:grid-cols-3 items-start bg-gray-50 p-8 border-l-4 border-blue-500">
                  <h2 class="!mt-0">Marketing</h2>
                  <p class="lg:col-span-2">
                    Hero sections, feature displays, and newsletter sign-up
                    forms — essential elements for crafting captivating
                    marketing websites. These components help make a strong
                    first impression, showcase key offerings, and grow your
                    audience, ensuring your site stands out and engages
                    visitors effectively.
                  </p>
                </div>
              </div>
              <section class="mt-12 flex flex-col gap-12 lg:gap-24">
                <div class="flex flex-col gap-6">
                  <div class="border-b pb-2">
                    <h3 class="text-base font-semibold leading-6 text-black">
                      Page sections
                    </h3>
                  </div>

                  <EntryStructure entries={pageSections} />
                </div>
              </section>
            </div>
          </section>
          <section x-tabs:panel>
            <div
              class="prose-styles grid grid-cols-1 gap-4 lg:grid-cols-3 items-start bg-gray-50 p-8 border-l-4 border-blue-500">
              <h2 class="!mt-0">Application UI</h2>
              <p class="lg:col-span-2">
                Form layouts, tables, and modal dialogs help create
                attractive, responsive web applications. Design intuitive
                forms, manage data with sortable tables, and use modal dialogs
                for smooth interactions, ensuring functionality and visual
                appeal across all devices.
              </p>
            </div>
            <section class="mt-12 flex flex-col gap-12 lg:gap-24">
              <div class="flex flex-col gap-6">
                <div class="border-b pb-2">
                  <h3 class="text-base font-semibold leading-6 text-black">
                    Navigation
                  </h3>
                </div>
                <EntryStructure entries={navigation} />
              </div>
              <div class="flex flex-col gap-6">
                <div class="border-b pb-2">
                  <h3 class="text-base font-semibold leading-6 text-black">
                    Elements
                  </h3>
                </div>
                <EntryStructure entries={elements} />
              </div>
              <div class="flex flex-col gap-6">
                <div class="border-b pb-2">
                  <h3 class="text-base font-semibold leading-6 text-black">
                    Overlay
                  </h3>
                </div>
                <EntryStructure entries={overlay} />
              </div>
              <div class="flex flex-col gap-6">
                <div class="border-b pb-2">
                  <h3 class="text-base font-semibold leading-6 text-black">
                    Forms
                  </h3>
                </div>
                <EntryStructure entries={forms} />
              </div>
            </section>
          </section>
          <section x-tabs:panel>
            <div
              class="prose-styles grid grid-cols-1 gap-4 lg:grid-cols-3 items-start bg-gray-50 p-8 border-l-4 border-blue-500">
              <h2 class="!mt-0">ECommerce</h2>
              <p class="lg:col-span-2">
                Checkout forms, shopping carts, and product views — all the
                essentials to build your next ecommerce front-end. Create
                seamless checkout processes, efficient shopping carts, and
                engaging product displays to ensure a smooth and appealing
                shopping experience for your customers.
              </p>
            </div>
            <section class="flex flex-col gap-4 mt-12">
              <div class="relative">
                <div
                  class="absolute inset-0 flex items-center"
                  aria-hidden="true">
                  <div class="w-full border-t border-gray-300"></div>
                </div>
                <div class="relative flex justify-start">
                  <span
                    class="bg-white pr-3 text-xl font-medium leading-6 text-black">
                    General sections</span
                  >
                </div>
              </div>
              <!-- <EntryStructure entries={general} /> -->
            </section>
          </section>
        </div>
      </div>
    </div>
    
  </section>
</BaseLayout>
<script>
  import {
    getAuth,
    isSignInWithEmailLink,
    signInWithEmailLink,
  } from "firebase/auth";
  import { app } from "../firebase/client";
  // Confirm the link is a sign-in with email link.
  const auth = getAuth(app);
  if (isSignInWithEmailLink(auth, window.location.href)) {
    // Additional state parameters can also be passed via URL.
    // This can be used to continue the user's intended action before triggering
    // the sign-in operation.
    // Get the email if available. This should be available if the user completes
    // the flow on the same device where they started it.
    let email = window.localStorage.getItem("emailForSignIn");
    if (!email) {
      // User opened the link on a different device. To prevent session fixation
      // attacks, ask the user to provide the associated email again. For example:
      email = window.prompt("Please provide your email for confirmation");
    }
    // The client SDK will parse the code from the link for you.
    signInWithEmailLink(auth, email, window.location.href)
      .then(async (result) => {
        // Clear email from storage.
        window.localStorage.removeItem("emailForSignIn");
        // You can access the new user via result.user
        // Additional user info profile not available via:
        // result.additionalUserInfo.profile == null
        // You can check if the user is new or existing:
        // result.additionalUserInfo.isNewUser
        const idToken = await result.user.getIdToken();
        await fetch("/api/auth/signin", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${idToken}`,
          },
        });
      })
      .catch(async (error) => {
        // Some error occurred, you can inspect the code: error.code
        // Common errors could be invalid email and invalid or expired OTPs.
      });
  }
</script>
