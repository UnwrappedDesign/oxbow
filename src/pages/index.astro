---
import { AstroSeo } from "@astrolib/seo";
import { general } from "@/data/entries.json";
import BaseLayout from "@/layouts/BaseLayout.astro";
import EntryStructure from "@/components/landing/EntryStructure.astro";
---

<AstroSeo
  title="Windstatic - Home "
  description="A set of elements, templates & layouts made with Tailwind CSS and Alpine.js"
  canonical="https://www.windstatic.com"
  openGraph={{
    url: "https://www.windstatic.com",
    title: "Windstatic - Home",
    description:
      "Discover a collection of components ready to be seamlessly integrated into your applications with just a simple copy and paste.",
    images: [
      {
        url: "https://www.windstatic.com/images/OpenGraph/facebook.png",
        width: 1200,
        height: 630,
        alt: "Social open graph",
        type: "image/png",
      },
      {
        url: "https://www.windstatic.com/OpenGraph/twitter.png",
        width: 4096,
        height: 4096,
        alt: "Twitter open graph",
        type: "image/png",
      },
      { url: "https://www.windstatic.com/OpenGraph/facebook.ong" },
      { url: "https://www.windstatic.com/OpenGraph/twitter.png" },
    ],
    site_name: "Windstatic",
  }}
  twitter={{
    handle: "@Mike_Andreuzza",
    site: "https://www.windstatic.com",
    cardType: "summary_large_image",
  }}
/>
<BaseLayout>
  <section>
    <div>
      <div class="max-w-xl mx-auto px-8 pt-12 lg:pt-32">
        <div class="prose-styles">
          <h1>
            windstatic — a set of elements, templates & layouts made with
            Tailwind CSS and Alpine.js
          </h1>
          <p>
            Discover a collection of components ready to be seamlessly
            integrated into your applications with just a simple copy and paste.
          </p>
          <div class="flex gap-3 text-gray-400">
            <span class="hidden lg:inline" title="command palette">
              Search for anything with —
              <span class="text-xs"> ⌘ + K </span>
              or <span class="text-xs"> CTRL + K </span>
            </span>
          </div>
        </div>
      </div>
      <div class="max-w-7xl mx-auto px-8 pb-12 mt-12 lg:pb-32">
        <div x-data x-tabs>
          <div x-tabs:list class="-mb-px flex items-stretch gap-2 border-b">
            <button
              x-tabs:tab
              type="button"
              :class="$tab.isSelected ? 'border-blue-500 bg-white' : 'border-transparent'"
              class="inline-flex border-b-2 py-2.5 pr-6">Marketing</button
            >
            <button
              x-tabs:tab
              type="button"
              :class="$tab.isSelected ? 'border-blue-500 bg-white' : 'border-transparent'"
              class="inline-flex r border-b-2 py-2.5 pr-6">Application</button
            >
            <button
              x-tabs:tab
              type="button"
              :class="$tab.isSelected ? 'border-blue-500 bg-white' : 'border-transparent'"
              class="inline-flex r border-b-2 py-2.5 pr-6"
              >ECommerce</button
            >
          </div>
          <div x-tabs:panels class="pt-12">
            <section x-tabs:panel>
              <div
                class="prose-styles grid grid-cols-1 gap-4 lg:grid-cols-3 items-start bg-gray-50 p-8 border-l-4 border-blue-500">
                <h2 class="!mt-0">Marketing</h2>
                <p class="lg:col-span-2">
                  Hero sections, feature displays, and newsletter sign-up forms
                  — essential elements for crafting captivating marketing
                  websites. These components help make a strong first
                  impression, showcase key offerings, and grow your audience,
                  ensuring your site stands out and engages visitors
                  effectively.
                </p>
              </div>
              <section class="flex flex-col gap-4 mt-12">
                <div class="relative">
                  <div
                    class="absolute inset-0 flex items-center"
                    aria-hidden="true"
                  >
                    <div class="w-full border-t border-gray-300"></div>
                  </div>
                  <div class="relative flex justify-start">
                    <span
                      class="bg-white pr-3 text-xl font-medium leading-6 text-black"
                    >
                      General sections</span
                    >
                  </div>
                </div>

                <EntryStructure entries={general} />
              </section>
            </section>
            <section x-tabs:panel>
              <div
                class="prose-styles grid grid-cols-1 gap-4 lg:grid-cols-3 items-start bg-gray-50 p-8 border-l-4 border-blue-500">
                <h2 class="!mt-0">Application UI</h2>
                <p class="lg:col-span-2">
                  Form layouts, tables, and modal dialogs help create
                  attractive, responsive web applications. Design intuitive
                  forms, manage data with sortable tables, and use modal dialogs
                  for smooth interactions, ensuring functionality and visual
                  appeal across all devices.
                </p>
              </div>
              <section class="flex flex-col gap-4 mt-12">
                <div class="relative">
                  <div
                    class="absolute inset-0 flex items-center"
                    aria-hidden="true">
                    <div class="w-full border-t border-gray-300"></div>
                  </div>
                  <div class="relative flex justify-start">
                    <span
                      class="bg-white pr-3 text-xl font-medium leading-6 text-black">
                      General sections</span
                    >
                  </div>
                </div>

                <!-- <EntryStructure entries={general} /> -->
              </section>
            </section>
            <section x-tabs:panel>
              <div
                class="prose-styles grid grid-cols-1 gap-4 lg:grid-cols-3 items-start bg-gray-50 p-8 border-l-4 border-blue-500">
                <h2 class="!mt-0">ECommerce</h2>
                <p class="lg:col-span-2">
                  Checkout forms, shopping carts, and product views — all the
                  essentials to build your next ecommerce front-end. Create
                  seamless checkout processes, efficient shopping carts, and
                  engaging product displays to ensure a smooth and appealing
                  shopping experience for your customers.
                </p>
              </div>
              <section class="flex flex-col gap-4 mt-12">
                <div class="relative">
                  <div
                    class="absolute inset-0 flex items-center"
                    aria-hidden="true">
                    <div class="w-full border-t border-gray-300"></div>
                  </div>
                  <div class="relative flex justify-start">
                    <span
                      class="bg-white pr-3 text-xl font-medium leading-6 text-black">
                      General sections</span
                    >
                  </div>
                </div>

                <!-- <EntryStructure entries={general} /> -->
              </section>
            </section>
          </div>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>
<script>
  import {
    getAuth,
    isSignInWithEmailLink,
    signInWithEmailLink,
  } from "firebase/auth";
  import { app } from "../firebase/client";

  // Confirm the link is a sign-in with email link.
  const auth = getAuth(app);

  if (isSignInWithEmailLink(auth, window.location.href)) {
    // Additional state parameters can also be passed via URL.
    // This can be used to continue the user's intended action before triggering
    // the sign-in operation.
    // Get the email if available. This should be available if the user completes
    // the flow on the same device where they started it.
    let email = window.localStorage.getItem("emailForSignIn");
    if (!email) {
      // User opened the link on a different device. To prevent session fixation
      // attacks, ask the user to provide the associated email again. For example:
      email = window.prompt("Please provide your email for confirmation");
    }
    // The client SDK will parse the code from the link for you.
    signInWithEmailLink(auth, email, window.location.href)
      .then(async (result) => {
        // Clear email from storage.
        window.localStorage.removeItem("emailForSignIn");
        // You can access the new user via result.user
        // Additional user info profile not available via:
        // result.additionalUserInfo.profile == null
        // You can check if the user is new or existing:
        // result.additionalUserInfo.isNewUser

        const idToken = await result.user.getIdToken();

        await fetch("/api/auth/signin", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${idToken}`,
          },
        });
      })
      .catch(async (error) => {
        // Some error occurred, you can inspect the code: error.code
        // Common errors could be invalid email and invalid or expired OTPs.
      });
  }
</script>
