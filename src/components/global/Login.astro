---
import Text from "@/components/fundations/typography/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
---

<section x-data="loginForm()">
  <Wrapper
    variant="hero"
    class="lg:py-32">
    <div class="text-center text-balance max-w-xl mx-auto">
      <Text
        tag="h1"
        variant="displayXL"
        class="text-black tracking-tighter font-semibold text-balance font-display"
        x-text="emailSent ? 'Check Your Inbox' : 'Sign in with your email'"
      />
      <Text
        x-cloak
        tag="p"
        variant="textBase"
        x-show="!emailSent"
        class="text-base-600 text-pretty mt-4">
        Please enter the email address linked to your account, and we will send
        a unique sign-in link to your inbox.
      </Text>
      <Text
        x-cloak
        tag="p"
        variant="textBase"
        x-show="emailSent"
        class="text-base-600 text-pretty mt-4">
        Please click the link in the email we sent to sign in to your account.
        If you can't find the email, be sure to check your spam folder.
      </Text>
    </div>
    <form
    x-cloak
      @submit.prevent="sendEmail()"
      x-show="!emailSent || errorMessage"
      >
      <div class="space-y-3 mt-6 pt-6 border-t max-w-xl mx-auto">
        <div>
          <label
            for="email"
            class="sr-only">
            Email
          </label>
          <input
            id="email"
            name="email"
            type="email"
            x-model="email"
            x-on:input="clearErrorMessage"
            autocomplete="on"
            placeholder="email@example.com"
            required
            aria-required="true"
            class="block w-full px-4 py-2 h-10  border-2 focus:ring-2 focus:ring-accent-500 bg-chalk border-transparent ring-1 ring-base-200 duration-300 rounded-lg appearance-none text-accent-500 placeholder-base-300 focus:border-accent-300 focus:outline-none sm:text-sm"
          />
          <div class="mt-4 space-y-2 text-xs text-base-500">
            <div
              x-cloak
              x-show="!!errorMessage">
              <p x-text="errorMessage"></p>
            </div>
          </div>
        </div>
        <div class="space-y-3">
          <button
            type="submit"
            aria-label="Get your link"
            class="rounded-full flex items-center transition-all duration-200 focus:ring-2 focus:ring-offset-2 focus:outline-none text-white bg-accent-500 hover:bg-accent-600 focus:ring-accent-600 h-9 px-4 py-2 text-sm font-medium w-full justify-center">
            Get your link
          </button>
          <div class="prose-styles">
            <small
              >By clicking continue, you agree to our <a href="/terms"
                >Terms of Service</a
              > and
              <a href="/privacy"> Privacy Policy. </a>
            </small>
          </div>
        </div>
      </div>
    </form>
    <div
      x-cloak
      x-show="emailSent"
      class="mt-6 pt-6 border-t">
      <Text
        tag="p"
        variant="textBase"
        class="text-base-600 text-pretty mt-4"
        >Didn't receive the email?</Text
      >
      <button
        class="rounded-full flex items-center transition-all duration-200 focus:ring-2 focus:ring-offset-2 focus:outline-none text-white bg-accent-500 hover:bg-accent-600 focus:ring-accent-600 h-9 px-4 py-2 text-sm font-medium w-full justify-center"
        @click="clearForm()">
        Try again
      </button>
    </div>
  </Wrapper>
</section>
<script>
  import Alpine from "alpinejs";
  import { sendSignInLinkToEmail } from "firebase/auth";
  import { auth } from "@/firebase/client";

  document.addEventListener("alpine:init", () => {
    Alpine.data("loginForm", () => ({
      email: "",
      emailSent: false,
      errorMessage: "",
      clearErrorMessage() {
        this.errorMessage = "";
      },
      clearForm() {
        this.email = "";
        this.emailSent = false;
        this.errorMessage = "";
      },
      async sendEmail() {
        const baseUrl = import.meta.env.PUBLIC_APP_BASE_URL;

        const actionCodeSettings = {
          url: `${baseUrl}/email-signin`,
          handleCodeInApp: true,
        };

        try {
          window.localStorage.setItem("emailForSignIn", this.email);

          await sendSignInLinkToEmail(auth, this.email, actionCodeSettings);

          this.emailSent = true;
        } catch (error) {
          console.log("error", error.code, error.message);
          if (error.code === "auth/admin-restricted-operation") {
            console.log("error auth/admin-restricted-operation");
            this.errorMessage = [
              "We couldn't find an account linked to this email address.",
              "Please check the email address or create a new account.",
            ].join(" ");
          } else {
            console.log("error else");
            this.errorMessage = [
              "We were unable to send the sign-in link to your email.",
              "Please check your email address and try again.",
            ].join(" ");
          }
        }
      },
    }));
  });
</script>
