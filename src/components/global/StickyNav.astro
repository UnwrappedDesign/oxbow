---
// StickyNav.astro
import Text from "@/components/fundations/typography/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
const navItems = [
  { href: "#marketing", text: "Marketing" },
  { href: "#application", text: "Application" },
  { href: "#emails", text: "Emails" },
  {
    text: "eCommerce",
    disabled: true,
    title: "Coming soon",
    umami: "eCommerce",
  },
];
---

<nav class="sticky top-0 left-0 right-0 z-10 bg-white">
  <Wrapper variant="standard" class="pt-0 border-b">
    <div class="flex space-x-4 relative bg-white pt-4">
      {
        navItems.map((item) =>
          item.disabled ? (
            <Text
              tag="p"
              variant="textBase"
              title={item.title}
              disabled
              class="font-medium border-b-2 pb-4 border-transparent cursor-not-allowed opacity-50"
            >
              {item.text}
            </Text>
          ) : (
            <Text
              tag="a"
              variant="textBase"
              href={item.href}
              class="nav-link hover:text-accent-500 font-medium border-b-2 pb-4 border-transparent"
            >
              {item.text}
            </Text>
          )
        )
      }
    </div>
  </Wrapper>
</nav>

<script>
  function updateActiveLink() {
    const sections = document.querySelectorAll("section[id]");
    const navLinks = document.querySelectorAll(".nav-link");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const currentId = entry.target.id;
            navLinks.forEach((link) => {
              if (link.getAttribute("href") === `#${currentId}`) {
                link.classList.add("text-accent-500", "border-accent-500");
                link.classList.remove("border-transparent");
              } else {
                link.classList.remove("text-accent-500", "border-accent-500");
                link.classList.add("border-transparent");
              }
            });
          }
        });
      },
      { rootMargin: "-50% 0px -50% 0px" }
    );

    sections.forEach((section) => observer.observe(section));

    navLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const targetId = link.getAttribute("href").substring(1);
        const targetSection = document.getElementById(targetId);
        if (targetSection) {
          targetSection.scrollIntoView({ behavior: "smooth" });
        }
      });
    });
  }

  document.addEventListener("DOMContentLoaded", updateActiveLink);
</script>
