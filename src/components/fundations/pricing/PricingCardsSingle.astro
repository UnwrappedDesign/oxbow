---
import Text from "@/components/fundations/typography/Text.astro";
import Button from "@/components/fundations/buttons/Button.astro";
import Check from "@/components/fundations/icons/Check.astro";

interface Props {
  tierName?: string;
  isPopular?: boolean;
  colorMode?: "white" | "light" | "dark" | "baseDark" | "accent";
  showFeatures?: boolean;
  buttonVariant?:
    | "default"
    | "accent"
    | "mutedDark"
    | "alternative"
    | "link"
    | "outline"
    | "ghost";
  featuresLayout?: "list" | "grid";
  isLeft?: boolean;
  isCentered?: boolean;
  isRight?: boolean;
  noShadow?: boolean;
  roundedDesktop?: "none" | "all" | "left" | "right";
}

const {
  tierName = "Core",
  isPopular,
  colorMode = "light",
  showFeatures = true,
  buttonVariant = "alternative",
  featuresLayout = "list",
  isLeft = false,
  isCentered = false,
  isRight = false,
  noShadow = false,
  roundedDesktop,
} = Astro.props as Props;

const tierDetails = {
  Core: {
    audience: "Solo flyers & dabblers",
    description: "All the basics so you don’t totally flail.",
    priceMonthly: "$29",
    priceAnnual: "$19",
  },
  Momentum: {
    audience: "Startup grinders",
    description: "Analytics and buzzwords included.",
    priceMonthly: "$49",
    priceAnnual: "$39",
  },
  Growth: {
    audience: "Corporate big shots",
    description: "Fancy tools to fake cred.",
    priceMonthly: "$99",
    priceAnnual: "$79",
  },
  Apex: {
    audience: "Red-carpet enterprises",
    description: "White-glove, nopeasants allowed.",
    priceMonthly: "$199",
    priceAnnual: "$149",
  },
};

const defaultFeatures = {
  Core: [
    "Unlimited members (just you)",
    "1 Team (you vs. you)",
    "50 Issues ( mistakes covered)",
    "Slack, GitHub & API",
    "Basic reports",
  ],
  Momentum: [
    "Unlimited teams",
    "Private squads",
    "Deep “insights”",
    "Custom branding",
    "Mobile access",
  ],
  Growth: [
    "All members welcome",
    "Advanced analytics",
    "Priority help",
    "Custom APIs",
    "Unlimited storage",
  ],
  Apex: [
    "Your own account hype-person",
    "Elite team controls",
    "Premium integrations",
    "VIP onboarding",
    "24/7 support",
  ],
};

const { description, priceMonthly, priceAnnual } = tierDetails[tierName];
const features = defaultFeatures[tierName] || [];

// Color classes
const colorClasses = {
  white: {
    cardBg: "bg-white outline outline-gray-200",
    borderColor: "border-gray-200",
    titleColor: "text-gray-900",
    introColor: "text-gray-500",
    priceColor: "text-gray-900",
    monthYearTextColor: "text-gray-500",
    featuresTextColor: "text-gray-500",
  },
  light: {
    cardBg: "bg-gray-50 outline outline-gray-200",
    borderColor: "border-gray-200",
    titleColor: "text-gray-900",
    introColor: "text-gray-500",
    priceColor: "text-gray-900",
    monthYearTextColor: "text-gray-500",
    featuresTextColor: "text-gray-500",
  },
  dark: {
    cardBg: "bg-gray-950",
    borderColor: "border-gray-800",
    titleColor: "text-white",
    introColor: "text-gray-400",
    priceColor: "text-white",
    monthYearTextColor: "text-gray-400",
    featuresTextColor: "text-gray-200",
  },
  baseDark: {
    cardBg: "bg-gray-900",
    borderColor: "border-gray-800",
    titleColor: "text-white",
    introColor: "text-gray-200",
    priceColor: "text-white",
    monthYearTextColor: "text-white/50",
    featuresTextColor: "text-gray-200",
  },
  accent: {
    cardBg: "bg-blue-500",
    borderColor: "border-white/10",
    titleColor: "text-white",
    introColor: "text-gray-200",
    priceColor: "text-white",
    monthYearTextColor: "text-blue-100",
    featuresTextColor: "text-gray-200",
  },
}[colorMode];

// Rounding logic:
// - mobile always rounded-xl
// - at lg: apply desktop rounding based on props
let roundingClass: string;

if (roundedDesktop === "none") {
  roundingClass = "rounded-xl lg:rounded-none";
} else if (roundedDesktop === "left") {
  roundingClass = "rounded-xl lg:rounded-l-xl lg:rounded-r-none";
} else if (roundedDesktop === "right") {
  roundingClass = "rounded-xl lg:rounded-r-xl lg:rounded-l-none";
} else if (isLeft) {
  roundingClass = "rounded-xl lg:rounded-r-none";
} else if (isRight) {
  roundingClass = "rounded-xl lg:rounded-l-none";
} else {
  roundingClass = "rounded-xl";
}
---

<div
  class={`relative flex flex-col justify-between h-full p-6 sm:p-4 sm:pb-5 lg:p-6 overflow-hidden ${roundingClass} ${colorClasses.cardBg} ${noShadow ? "" : "shadow-xl shadow-gray-500/15"}`}
>
  <div>
    <div class="flex flex-col gap-4">
      <div class="flex items-start justify-between w-full">
        <div>
          <Text
            tag="h3"
            variant="textBase"
            class={`font-medium ${colorClasses.titleColor}`}>{tierName}</Text
          >
          <Text
            tag="p"
            variant="textSM"
            class={`mt-1 ${colorClasses.introColor}`}>{description}</Text
          >
        </div>
        {
          isPopular && (
            <Text
              tag="span"
              variant="textXS"
              class={`mt-1 ${colorClasses.introColor}`}
            >
              Popular
            </Text>
          )
        }
      </div>

      <div class="flex items-center mt-2 gap-x-4">
        <p
          class={`text-4xl font-medium sm:text-3xl md:text-4xl ${colorClasses.priceColor}`}
        >
          <span
            data-monthly={priceMonthly}
            data-annual={priceAnnual}
            x-text="$el.dataset[duration]"></span>
        </p>
        <div
          class={` text-xs font-medium capitalize ${colorClasses.monthYearTextColor}`}
        >
          <div class="font-semibold">
            <span x-show="duration==='monthly'">month</span><span
              x-show="duration==='annual'"
              style="display:none;">annually</span
            >
          </div>
          <p>USD + Local taxes</p>
        </div>
      </div>
    </div>

    {
      showFeatures && (
        <div class={`pt-8 mt-8 border-t ${colorClasses.borderColor}`}>
          <Text
            tag="p"
            variant="textSM"
            class={`font-medium ${colorClasses.featuresTextColor}`}
          >
            {tierName} plan includes:
          </Text>
          <ul
            class={`flex flex-col mt-2 text-sm gap-3 ${colorClasses.featuresTextColor} ${featuresLayout === "grid" ? "grid grid-cols-1 lg:grid-cols-2" : ""}`}
            role="list"
          >
            {features.map((feature) => (
              <li class="flex items-center gap-1">
                <Check size="sm" />
                {feature}
              </li>
            ))}
          </ul>
        </div>
      )
    }
  </div>

  <Button class="w-full mt-4" variant={buttonVariant} size="sm"
    >Get Started</Button
  >
</div>
