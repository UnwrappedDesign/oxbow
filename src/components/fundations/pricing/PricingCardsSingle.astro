---
// Import necessary components
import Button from "../buttons/Button.astro";
import Badge from "../badges/Badge.astro";
import Check from "../icons/Check.astro";
import Text from "../typography/Text.astro";

// Props from the parent component
const {
  tierName = "Core", // Default tier is 'Core'
  isPopular,
  colorMode = "light", // Default color mode is 'light'
  showFeatures = true, // Controls whether to show the features
  buttonVariant = "alternative", // Default button variant is 'alternative'
  featuresLayout = "list", // New prop to control layout: 'list' or 'grid'
  roundedDesktop = "rounded-3xl", // Default prop for rounded corners on desktop
  isLeft = false, // New prop to control if the card is left
  isCentered = false, // New prop to control if the card is centered
  isRight = false, // New prop to control if the card is right
} = Astro.props;

const tierDetails = {
  Core: {
    audience: "Solo flyers & dabblers",
    description: "All the basics so you don’t totally flail.",
    priceMonthly: "$29.00",
    priceAnnual: "$19.00",
  },
  Momentum: {
    audience: "Startup grinders",
    description: "Looks legit—analytics and buzzwords included.",
    priceMonthly: "$49.00",
    priceAnnual: "$39.00",
  },
  Growth: {
    audience: "Corporate big shots",
    description: "Fancy tools to fake cutting-edge cred.",
    priceMonthly: "$129.00",
    priceAnnual: "$79.00",
  },
  Apex: {
    audience: "Red-carpet enterprises",
    description: "White-glove everything—no peasants allowed.",
    priceMonthly: "$199.00",
    priceAnnual: "$149.00",
  },
};

const defaultFeatures = {
  Core: [
    "Unlimited members (but it's mostly you)",
    "1 Team (you vs. you)",
    "50 Issues (rookie mistakes covered)",
    "Slack, GitHub & API",
    "Basic reports",
  ],
  Momentum: [
    "Unlimited teams",
    "Private squads",
    "Deep “insights”",
    "Custom branding",
    "Mobile access",
  ],
  Growth: [
    "All members welcome",
    "Advanced analytics",
    "Priority help",
    "Custom APIs",
    "Unlimited storage",
  ],
  Apex: [
    "Your own account hype-person",
    "Elite team controls",
    "Premium integrations",
    "VIP onboarding",
    "24/7 support",
  ],
};

// Get the baked-in tier details
const { audience, description, priceMonthly, priceAnnual } =
  tierDetails[tierName];

// Get the features for the current tier
const features = defaultFeatures[tierName] || [];

// Define the color classes based on the colorMode
const colorClasses = {
  white: {
    cardBg: "bg-white",
    innerBg: "bg-white rounded-[1.3rem]",
    titleColor: "text-base-900",
    subTitleColor: "text-base-500",
    introColor: "text-base-500",
    priceColor: "text-base-900",
    monthYearTextColor: "text-base-500",
    featuresTextColor: "text-base-500",
  },
  light: {
    cardBg: "bg-base-50 ",
    innerBg: "bg-white rounded-[1.3rem]",
    titleColor: "text-base-900",
    subTitleColor: "text-base-500",
    introColor: "text-base-500",
    priceColor: "text-base-900",
    monthYearTextColor: "text-base-500",
    featuresTextColor: "text-base-500",
  },
  dark: {
    cardBg: "bg-base-950 ",
    innerBg: "bg-white/10 rounded-[1.3rem]",
    titleColor: "text-white",
    subTitleColor: "text-base-200",
    introColor: "text-base-200",
    priceColor: "text-white",
    monthYearTextColor: "text-white/50",
    featuresTextColor: "text-base-200",
  },
  baseDark: {
    cardBg: "bg-base-900 ",
    innerBg: "bg-white/10 rounded-[1.3rem]",
    titleColor: "text-white",
    subTitleColor: "text-base-200",
    introColor: "text-base-200",
    priceColor: "text-white",
    monthYearTextColor: "text-white/50",
    featuresTextColor: "text-base-200",
  },
  accent: {
    cardBg: "bg-accent-600 ",
    innerBg: "bg-white/10 rounded-[1.3rem]",
    titleColor: "text-white",
    subTitleColor: "text-base-200",
    introColor: "text-base-200",
    priceColor: "text-white",
    monthYearTextColor: "text-accent-100",
    featuresTextColor: "text-base-200",
  },
}[colorMode];

// Define rounding classes based on the roundedDesktop prop
let roundingClass = roundedDesktop;
if (roundedDesktop === "left") {
  roundingClass = "rounded-3xl lg:rounded-r-none"; // Rounds left, no right
} else if (roundedDesktop === "right") {
  roundingClass = "rounded-3xl lg:rounded-l-none"; // Rounds right, no left
} else if (roundedDesktop === "none") {
  roundingClass = "lg:rounded-none"; // No rounding if specified
}

// Define padding classes based on position props
const paddingClasses = [
  isLeft && "lg:pr-0",
  isCentered && "lg:px-0",
  isRight && "lg:pl-0",
  "lg:py-1",
]
  .filter(Boolean)
  .join(" ");
---

<div class={`flex flex-col h-full p-8 ${roundingClass} ${colorClasses.cardBg}`}>
  <div>
    <div class="flex flex-col gap-4">
      <div class="flex items-start justify-between w-full">
        <div>
          <Text
            tag="h3"
            variant="textLG"
            class={`font-medium ${colorClasses.titleColor}`}
          >
            {tierName}
          </Text>
          <Text
            tag="p"
            variant="textSM"
            class={`font-medium ${colorClasses.subTitleColor}`}
          >
            {audience}
          </Text>
        </div>

        {
          isPopular && (
            <Badge variant="muted" size="xs">
              Popular
            </Badge>
          )
        }
      </div>
      <p
        class={`font-medium flex lg:text-3xl items-baseline text-2xl tracking-tighter ${colorClasses.priceColor}`}
      >
        <span
          data-monthly={priceMonthly}
          data-annual={priceAnnual}
          x-text="$el.dataset[duration]"></span>
        <span
          class={`text-sm font-normal font-sans tracking-normal ${colorClasses.monthYearTextColor}`}
        >
          <span x-show="duration === 'monthly'">/month</span>
          <span x-show="duration === 'annual'" style="display: none;"
            >/annually</span
          >
        </span>
      </p>
      <Text tag="p" variant="textSM" class={` ${colorClasses.introColor}`}>
        {description}
      </Text>
    </div>
  </div>
  <div>
    <Button class="w-full mt-4" variant={buttonVariant} size="sm">
      Get Started
    </Button>
    {
      showFeatures ? (
        <div class="mt-8">
          <Text
            tag="p"
            variant="textBase"
            class={`font-medium  ${colorClasses.featuresTextColor}`}
          >
            {tierName} plan includes:
          </Text>
          <ul
            class={`flex flex-col mt-2 gap-y-1 ${colorClasses.featuresTextColor} ${featuresLayout === "grid" ? "grid grid-cols-1 lg:grid-cols-2" : ""}`}
            role="list"
          >
            {features.map((feature) => (
              <li class="flex items-center gap-1">
                <Check size="sm" />
                <Text tag="span" variant="textSM">
                  {feature}
                </Text>
              </li>
            ))}
          </ul>
        </div>
      ) : null
    }
  </div>
</div>
