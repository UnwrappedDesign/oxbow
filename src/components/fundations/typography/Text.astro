---
// Used for paragraphs, spans, small, div, strong, em, blockquote or any other text element with different styles
//
export interface TextStyle {
  base: string;
}
export interface TextStyles {
  [key: string]: TextStyle;
}
export interface Props {
  tag?: "p" | "span" | "small" | "div" | "strong" | "em" | "blockquote" | "dd" | "dt";
  variant?: string;
  class?: string;
}
const textStyles: TextStyles = {
  eyebrow: {
    base: "text-accent-600 uppercase font-mono font-medium tracking-tight text-xs",
  },
  body: {
    base: "text-base font-medium text-base-500",
  },
  featureListItem: {
    base: "tracking-tight text-lg font-medium  text-base-900",
  },
  caption: {
    base: "text-sm font-normal text-base-400",
  },
  overline: {
    base: "text-xs font-medium uppercase tracking-wider",
  },
  small: {
    base: "text-sm font-normal",
  },
  link: {
    base: "text-primary-600 hover:text-primary-700 underline",
  },
  blockquote: {
    base: "text-lg italic font-medium text-base-500 border-l-4 border-base-300 pl-4",
  },
  code: {
    base: "font-mono text-sm bg-base-100 rounded px-1 py-0.5",
  },
  // Add more text variants as needed...
};
const {
  tag: Tag = "p",
  variant = "body",
  class: className = "",
  ...rest
} = Astro.props;
// Get the base classes for the variant
const baseClasses = textStyles[variant]?.base || textStyles.body.base;
// Combine base classes with additional classes
const combinedClasses = `${baseClasses} ${className}`.trim();
---

<Tag
  class={combinedClasses}
  {...rest}>
  <slot />
</Tag>
