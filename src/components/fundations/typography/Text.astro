---
// Used for paragraphs, spans, small, div, strong, em, blockquote, or any other text element with different styles
//
export interface TextStyle {
  light: string;
  dark?: string; // Make dark optional for styles that don't require it
}
export interface TextStyles {
  [key: string]: TextStyle;
}
export interface Props {
  tag?:
    | "a"
    | "p"
    | "span"
    | "small"
    | "div"
    | "strong"
    | "em"
    | "blockquote"
    | "dd"
    | "dt"
    | "summary"
    | "label";
  variant?: string;
  class?: string;
  darkMode?: boolean; // Add a prop to indicate if dark mode is enabled
  href?: string; // Add href for anchor tags
  for?: string; // Add for attribute for label tags
  id?: string; // Add id attribute for label tags
}
const textStyles: TextStyles = {
  bigNumbers: {
    light: "text-5xl font-normal font-mono text-accent-600",
    dark: "text-5xl font-normal font-mono text-white",
  },
  eyebrow: {
    light:
      "text-accent-600 uppercase font-mono font-medium tracking-tight text-xs",
    dark: "text-white uppercase font-mono font-medium tracking-tight text-xs",
  },
  body: {
    light: "text-base font-medium text-base-500",
    dark: "text-base-300 font-medium",
  },
  featureListItem: {
    light: "tracking-tight text-lg font-medium text-base-900",
    dark: "tracking-tight text-lg font-medium text-base-300",
  },
  caption: {
    light: "text-sm font-normal text-base-500",
    dark: "text-sm font-normal text-white",
  },
  overline: {
    light: "text-xs font-medium uppercase tracking-wider",
    dark: "text-xs font-medium uppercase tracking-wider",
  },
  small: {
    light: "text-sm font-normal text-base-500",
    dark: "text-sm font-normal text-white",
  },
  link: {
    light:
      "text-sm font-medium text-accent-500 duration-300 hover:text-base-900",
    dark: "text-sm font-medium text-white duration-300 hover:text-base-200",
  },
  inputLabel: {
    light: "text-sm font-medium text-base-500",
    dark: " text-sm font-medium text-white",
  },
  navigationLink: {
    light:
      "text-base-600 font-medium text-sm md:text-base hover:text-accent-500 duration-300",
    dark: "text-base-300 font-medium text-sm md:text-base hover:text-white duration-300",
  },
  blockquote: {
    light:
      "text-lg italic font-medium text-base-500 border-l-4 border-base-300 pl-4",
    dark: "text-lg italic font-medium text-base-400 border-l-4 border-base-500 pl-4",
  },
  summary: {
    light: "tracking-tight text-base font-medium text-base-900",
    dark: "tracking-tight text-base font-medium text-white",
  },
  code: {
    light: "font-mono text-sm bg-base-100 rounded px-1 py-0.5",
    dark: "font-mono text-sm bg-base-900 rounded px-1 py-0.5",
  },
  bigNumber: {
    light: "text-5xl font-normal font-mono text-accent-600",
    dark: "text-5xl font-normal font-mono text-white",
  },
  smallNumber: {
    light: "text-xl font-normal font-mono text-accent-600",
    dark: "text-xl font-normal font-mono text-white",
  },
  // Add more text variants as needed...
};

const {
  tag: Tag = "p",
  variant = "body",
  class: className = "",
  darkMode = false, // Get the dark mode prop
  href = "#", // Default href for anchor tags
  ...rest
} = Astro.props;

// Get the base classes for the variant
const baseClasses = darkMode
  ? textStyles[variant]?.dark || textStyles.body.dark
  : textStyles[variant]?.light || textStyles.body.light;

// Combine base classes with additional classes
const combinedClasses = `${baseClasses} ${className}`.trim();
---

<Tag
  class={combinedClasses}
  href={Tag === "a" ? href : undefined}
  {...rest}>
  <slot />
</Tag>
