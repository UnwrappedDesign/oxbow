---
export interface TextStyle {
  light: string;
  dark?: string; // Make dark optional for styles that don't require it
  info?: string; // Add an info style for specific text elements
  success?: string; // Add a success style for specific text elements
  warning?: string; // Add a warning style for specific text elements
  danger?: string; // Add a danger style for specific text elements
}

export interface TextStyles {
  [key: string]: TextStyle;
}

export interface Props {
  tag?:
    | "p"
    | "span"
    | "small"
    | "div"
    | "strong"
    | "em"
    | "blockquote"
    | "dd"
    | "dt"
    | "summary"
    | "label";
  variant?: string;
  class?: string;
  darkMode?: boolean; // Add a prop to indicate if dark mode is enabled
  for?: string; // Add for attribute for label tags
  id?: string; // Add id attribute for label tags
  info?: boolean;
  success?: boolean;
  warning?: boolean;
  danger?: boolean;
}

const textStyles: TextStyles = {
  bigNumbers: {
    light: "text-5xl font-normal font-mono text-accent-600",
    dark: "text-5xl font-normal font-mono text-white",
  },
  eyebrow: {
    light:
      "text-accent-600 uppercase font-mono font-medium tracking-tight text-xs",
    dark: "text-white uppercase font-mono font-medium tracking-tight text-xs",
  },
  body: {
    light: "text-base font-medium text-base-500",
    dark: "text-base-300 font-medium",
    info: "text-base font-medium text-accent-900",
    success: "text-base font-medium text-emerald-900",
    warning: "text-base font-medium text-amber-900",
    danger: "text-base font-medium text-rose-900",
  },
  featureListItem: {
    light: "tracking-tight text-lg font-medium text-base-900",
    dark: "tracking-tight text-lg font-medium text-base-300",
    info: "tracking-tight text-lg font-medium text-accent-800",
    success: "tracking-tight text-lg font-medium text-emerald-800",
    warning: "tracking-tight text-lg font-medium text-amber-800",
    danger: "tracking-tight text-lg font-medium text-rose-800",
  },
  featureListItemSmall: {
    light: "tracking-tight text-bas font-medium text-base-900",
    dark: "tracking-tight text-base font-medium text-base-300",
    info: "tracking-tight text-base font-medium text-accent-800",
    success: "tracking-tight text-base font-medium text-emerald-800",
    warning: "tracking-tight text-base font-medium text-amber-800",
    danger: "tracking-tight text-base font-medium text-rose-800",
  },
  caption: {
    light: "text-sm font-normal text-base-500",
    dark: "text-sm font-normal text-white",
    info: "text-sm font-normal text-accent-800",
    success: "text-sm font-normal text-emerald-800",
    warning: "text-sm font-normal text-amber-800",
    danger: "text-sm font-normal text-rose-800",
  },
  small: {
    light: "text-sm font-normal text-base-500",
    dark: "text-sm font-normal text-white",
    info: "text-sm font-normal text-accent-700",
    success: "text-sm font-normal text-emerald-700",
    warning: "text-sm font-normal text-amber-700",
    danger: "text-sm font-normal text-rose-700",
  },
  inputLabel: {
    light: "text-sm font-medium text-base-500",
    dark: " text-sm font-medium text-white",
  },
  blockquote: {
    light:
      "text-lg italic font-medium text-base-500 border-l-4 border-base-300 pl-4",
    dark: "text-lg italic font-medium text-base-400 border-l-4 border-base-500 pl-4",
  },
  summary: {
    light: "tracking-tight text-base font-medium text-base-900",
    dark: "tracking-tight text-base font-medium text-white",
  },
  code: {
    light: "font-mono text-sm bg-base-100 rounded px-1 py-0.5",
    dark: "font-mono text-sm bg-base-900 rounded px-1 py-0.5",
  },
  bigNumber: {
    light: "text-5xl font-normal font-mono text-accent-600",
    dark: "text-5xl font-normal font-mono text-white",
  },
  smallNumber: {
    light: "text-xl font-normal font-mono text-accent-600",
    dark: "text-xl font-normal font-mono text-white",
  },
  // Add more text variants as needed...
};

const {
  tag: Tag = "p", // default to paragraph
  variant = "body", // default to body variant
  class: className = "",
  darkMode = false, // Get the dark mode prop
  info = false,
  success = false,
  warning = false,
  danger = false,
  ...rest
} = Astro.props;

// Get the base classes for the variant (light or dark mode)
let baseClasses = darkMode
  ? textStyles[variant]?.dark || textStyles.body.dark
  : textStyles[variant]?.light || textStyles.body.light;

// Override with specific styles if `info`, `success`, `warning`, or `danger` is true
if (info) {
  baseClasses = textStyles[variant]?.info || textStyles.body.info;
} else if (success) {
  baseClasses = textStyles[variant]?.success || textStyles.body.success;
} else if (warning) {
  baseClasses = textStyles[variant]?.warning || textStyles.body.warning;
} else if (danger) {
  baseClasses = textStyles[variant]?.danger || textStyles.body.danger;
}

// Combine base classes with any additional custom classes
const combinedClasses = `${baseClasses} ${className}`.trim();
---

<Tag
  class={combinedClasses}
  {...rest}>
  <slot />
</Tag>
