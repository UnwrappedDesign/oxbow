---
export interface HeadingStyle {
  light: string; // Light mode classes
  dark?: string; // Optional dark mode classes
}

export interface HeadingStyles {
  [key: string]: HeadingStyle;
}

export interface Props {
  level: 1 | 2 | 3 | 4 | 5 | 6;
  variant?: string;
  class?: string;
  darkMode?: boolean; // Optional prop to determine dark mode
  id?: string; // Optional id for the heading
}
// if dark add darkMode={true}
const headingStyles: HeadingStyles = {
  display: {
    light:
      "text-4xl font-semibold tracking-tight text-base-900 sm:text-6xl lg:text-7xl",
    dark: "text-4xl font-semibold tracking-tight text-white sm:text-6xl lg:text-7xl",
  },
  displaySmall: {
    light: "text-4xl font-semibold tracking-tight text-base-900 sm:text-6xl",
    dark: "text-4xl font-semibold tracking-tight text-white sm:text-6xl",
  },
  default: {
    light:
      "text-4xl font-semibold tracking-tight text-base-900 lg:text-balance",
    dark: "text-4xl font-semibold tracking-tight text-white lg:text-balance",
  },
  defaultSmall: {
    light:
      "text-3xl font-semibold tracking-tight text-base-900 lg:text-balance",
    dark: "text-3xl font-semibold tracking-tight text-white lg:text-balance",
  },
  featureTitleLarge: {
    light: "tracking-tight text-2xl font-medium text-base-900",
    dark: "tracking-tight text-2xl font-medium text-white",
  },
   featureTitle: {
    light: "tracking-tight text-xl font-medium text-base-900",
    dark: "tracking-tight text-xl font-medium text-white",
  },
  featureTitleSmall: {
    light: "tracking-tight text-base font-medium text-base-900",
    dark: "tracking-tight text-base font-medium text-white",
  },
  footerHeading: {
    light: "tracking-tight text-base font-medium text-base-500",
    dark: "tracking-tight text-base font-medium text-white",
  },
  // Add more variants as needed
};

const {
  level,
  variant = "default",
  class: className = "",
  darkMode = false,
} = Astro.props;
const Tag = `h${level}`; // Dynamically create heading tag (h1, h2, etc.)

// Access the style based on the variant, defaulting to "default" if not found
const styleVariant = headingStyles[variant] || headingStyles.default;

// Determine if dark mode is enabled and use corresponding styles
const mode = darkMode ? "dark" : "light";
const combinedClasses = `${styleVariant[mode] || styleVariant.light} ${className}`;
---

<Tag class:list={combinedClasses}>
  <slot />
</Tag>
