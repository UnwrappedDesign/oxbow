---
import Text from "@/components/fundations/typography/Text.astro";
import AlpineTailwind from "@/components/global/AlpineTailwind.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro"

interface Props {
  title: string;
  subtitle?: string; // Make subtitle optional
  highlightText?: string;
  showAlpineTailwind?: boolean; // Optional prop to show AlpineTailwind
  showThemeNavigator?: boolean; // Optional prop to show ThemeNavigator
  textCentered?: boolean; // Optional prop to center text
  additionalText?: string; // Optional prop for additional text
  additionalTextClasses?: string; // Optional classes for additional text
  slot?: any;
  showButton?: boolean; // New optional prop
}

const {
  title,
  subtitle,
  highlightText,
  showAlpineTailwind = true,
  textCentered = false,
  additionalText,
  additionalTextClasses = "",
  showButton = false, // Default to false if not specified
} = Astro.props;
---

<section>
  <Wrapper
    variant="hero"
    class="py-12">
    <div class={`flex flex-col ${textCentered ? "justify-center" : ""}`}>
      {
        showAlpineTailwind && (
          <div class={`flex ${textCentered ? "justify-center" : ""}`}>
            <AlpineTailwind />
          </div>
        )
      }
      <Text
        tag="h1"
        variant="displayLG"
        class={`text-black tracking-tighter font-semibold text-balance font-display mt-2 ${textCentered ? "text-center text-balance" : ""}`}>
        {title}
      </Text>
      <div
        class={`flex flex-col ${textCentered ? "text-center text-balance max-w-xl mx-auto" : ""}`}>
        {
          subtitle && (
            <Text
              tag="p"
              variant="textBase"
              class={`text-base-600 text-pretty mt-4 ${textCentered ? "text-center" : ""}`}>
              {subtitle}
            </Text>
          )
        }
        {
          highlightText && (
            <Text
              tag="span"
              variant="text-base-600 text-pretty">
              {highlightText}
            </Text>
          )
        }
        {
          additionalText && (
            <Text
              tag="p"
              variant="textMD"
              class={`${additionalTextClasses}`}>
              {additionalText}
            </Text>
          )
        }
        {
          showButton && ( // Conditionally render the button
            <div class="flex mt-8">
              <Text
                tag="a"
                href="/pricing"
                variant="textBase"
                id="access-navigation-cta"
                data-umami-event="access-navigation-cta"
                class="rounded-full md:hidden flex items-center transition-all gap-x-2 duration-200 focus:ring-2 focus:ring-offset-2 focus:outline-none text-white bg-accent-500 hover:bg-accent-600 focus:ring-accent-600 h-10 px-4 py-2 font-medium w-auto justify-center"
              >
                Get all access for <span> $59</span><del class="text-white/70"> $149</del>
              </Text>
            </div>
          )
        }
      </div>
    </div>
  </Wrapper>
</section>