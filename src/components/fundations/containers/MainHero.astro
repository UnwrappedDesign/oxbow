---
// Assets
import AnimatedGradient from "@/components/assets/AnimatedGradient.astro";
// Fundations
import Text from "@/components/fundations/typography/Text.astro";
import OxbowLink from "@/components/fundations/buttons/OxbowLink.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
// Components
import AlpineTailwind from "@/components/global/AlpineTailwind.astro";

interface Props {
  title: string;
  subtitle?: string; // Make subtitle optional
  highlightText?: string;
  showAlpineTailwind?: boolean; // Optional prop to show AlpineTailwind
  showThemeNavigator?: boolean; // Optional prop to show ThemeNavigator
  textCentered?: boolean; // Optional prop to center text
  additionalText?: string; // Optional prop for additional text
  additionalTextClasses?: string; // Optional classes for additional text
  slot?: any;
  showButton?: boolean; // New optional prop
  is404?: boolean;
}

const {
  title,
  subtitle,
  highlightText,
  showAlpineTailwind = true,
  textCentered = false,
  additionalText,
  additionalTextClasses = "",
  showButton = false, // Default to false if not specified
  is404 = false,
} = Astro.props;
---

<section
  x-data="{ currentPath: window.location.pathname }"
  :class="currentPath === '/' ? ' ' : ''"
  class="relative"
>
  <Wrapper
    variant="standard"
    class="border-t h-[60dvh] relative overflow-hidden"
  >
    <AnimatedGradient
      class="absolute inset-0 z-0 pointer-events-none mask-y-from-0% transform scaleX(-1)"
    />
    <div
      class="pointer-events-none absolute inset-0 z-0 bg-base-50/2 dark:bg-black/5"
    >
    </div>
    <div class="relative h-full flex flex-col itmes-end z-1">
      <div class="mt-auto relative">
        <div
          class={`flex flex-col relative  ${textCentered ? "justify-center" : ""}`}
        >
          {
            showAlpineTailwind && ( // Conditionally render AlpineTailwind
              <div class={`flex ${textCentered ? "justify-center" : ""}`}>
                <AlpineTailwind />
              </div>
            )
          }
          <Text
            tag="h1"
            variant="displayMD"
            class={`text-black dark:text-white lg:text-balance  tracking-tighter font-mono mt-8 max-w-2xl ${textCentered ? "text-center text-balance max-w-3xl  mx-auto" : ""}`}
          >
            {title}
          </Text>
          <div
            class={`flex flex-col ${textCentered ? "text-center text-balance max-w-lg mx-auto " : ""}`}
          >
            {
              subtitle && (
                <Text
                  tag="p"
                  variant="textBase"
                  class={`text-base-600 dark:text-base-300 text-balance mt-2 max-w-xl ${textCentered ? "text-center text-balance max-w-lg mx-auto" : ""}`}
                >
                  {subtitle}
                </Text>
              )
            }
            {
              highlightText && (
                <Text tag="span" variant="textBase">
                  {highlightText}
                </Text>
              )
            }
            {
              additionalText && (
                <Text
                  tag="p"
                  variant="textSM"
                  class={`${additionalTextClasses}`}
                >
                  {additionalText}
                </Text>
              )
            }
            {
              showButton && ( // Conditionally render the button
                <div
                  class={`flex gap-2 flex-wrap mt-8  ${textCentered ? "justify-center" : ""}`}
                >
                  <OxbowLink
                    href="/components"
                    size="xs"
                    variant="default"
                    id="access-navigation-cta"
                    data-umami-event="access-navigation-cta"
                    class="w-full sm:w-auto"
                  >
                    Browse components
                  </OxbowLink>
                  <OxbowLink
                    href="/pricing#features"
                    size="xs"
                    variant="muted"
                    gap="sm"
                    id="access-navigation-cta"
                    data-umami-event="access-navigation-cta"
                    class="w-full sm:w-auto "
                  >
                    See what's included
                  </OxbowLink>
                </div>
              )
            }
            {
              is404 && (
                <div
                  class={`flex gap-2 flex-wrap mt-8 ${textCentered ? "justify-center" : ""}`}
                >
                  <OxbowLink
                    size="base"
                    variant="accent"
                    href="/components"
                    id="404-components"
                    data-umami-event="404-components"
                  >
                    Browse components
                  </OxbowLink>
                  <OxbowLink
                    size="base"
                    variant="muted"
                    href="/"
                    id="404-home"
                    data-umami-event="404 home"
                  >
                    Go back home
                  </OxbowLink>
                </div>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </Wrapper>
</section>
