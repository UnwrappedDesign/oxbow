---
import Text from "@/components/fundations/typography/Text.astro";
import AlpineTailwind from "@/components/global/AlpineTailwind.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";

interface Props {
  title: string;
  subtitle?: string; // Make subtitle optional
  highlightText?: string;
  showAlpineTailwind?: boolean; // Optional prop to show AlpineTailwind
  showThemeNavigator?: boolean; // Optional prop to show ThemeNavigator
  textCentered?: boolean; // Optional prop to center text
  additionalText?: string; // Optional prop for additional text
  additionalTextClasses?: string; // Optional classes for additional text
  slot?: any;
  showButton?: boolean; // New optional prop
}

const {
  title,
  subtitle,
  highlightText,
  showAlpineTailwind = true,
  textCentered = false,
  additionalText,
  additionalTextClasses = "",
  showButton = false, // Default to false if not specified
} = Astro.props;
---

<section
  x-data="{ currentPath: window.location.pathname }"
  :class="currentPath === '/' ? ' pt-16 pb-0' : ''"
>
  <Wrapper variant="hero" class="py-12">
    <div class={`flex flex-col ${textCentered ? "justify-center" : ""}`}>
      {
        showAlpineTailwind && ( // Conditionally render AlpineTailwind
          <div class={`flex ${textCentered ? "justify-center" : ""}`}>
            <AlpineTailwind />
          </div>
        )
      }
      <Text
        tag="h1"
        variant="displayLG"
        class={`text-black tracking-tight font-bold text-balance font-display  mt-4 ${textCentered ? "text-center text-balance " : ""}`}
      >
        {title}
      </Text>
      <div
        class={`flex flex-col ${textCentered ? "text-center text-balance max-w-xl mx-auto " : ""}`}
      >
        {
          subtitle && (
            <Text
              tag="p"
              variant="textLG"
              class={`text-base-600 text-balance mt-4   ${textCentered ? "text-center" : ""}`}
            >
              {subtitle}
            </Text>
          )
        }
        {
          highlightText && (
            <Text tag="span" variant="text-base-600 text-pretty">
              {highlightText}
            </Text>
          )
        }
        {
          additionalText && (
            <Text tag="p" variant="textBase" class={`${additionalTextClasses}`}>
              {additionalText}
            </Text>
          )
        }
        {
          showButton && ( // Conditionally render the button
            <div
              class={`flex gap-2 flex-wrap mt-8 ${textCentered ? "justify-center" : ""}`}
            >
              <Text
                tag="a"
                href="/pricing"
                variant="textBase"
                id="access-navigation-cta"
                data-umami-event="access-navigation-cta"
                class="flex items-center justify-center w-full h-12 px-6 py-2 font-medium text-white transition-all duration-200 border rounded-full border-accent-950 ring-4 ring-base-50 sm:w-auto gap-x-2 focus:ring-2 focus:ring-offset-2 focus:outline-none bg-accent-950 hover:bg-accent-900 focus:ring-accent-900"
              >
                Get all access for <del class="opacity-45">$149</del> $67
              </Text>
              <Text
                tag="a"
                href="/components"
                variant="textBase"
                id="access-navigation-cta"
                data-umami-event="access-navigation-cta"
                class="flex items-center justify-center w-full h-12 px-6 py-2 font-medium transition-all duration-200 bg-white border rounded-full sm:w-auto ring-4 ring-base-50 text-accent-600 focus:ring-2 focus:ring-offset-2 focus:outline-none border-base-200 hover:text-accent-950 focus:ring-accent-600"
              >
                Browse components
              </Text>
            </div>
          )
        }
      </div>
    </div>
  </Wrapper>
</section>
