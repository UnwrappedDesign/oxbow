---
const {
  id,
  name,
  label,
  error,
  options = [],
  variant = "default",
  size = "base",
  class: className = "",
  hideLabel = false,
  hint,
  isGrouped = false,
  noRounded = false,
  noRoundedLeft = false,
  noRoundedRight = false,
  noRoundedTop = false,
  noRoundedBottom = false,
  noRoundedTopLeft = false,
  noRoundedTopRight = false,
  noRoundedBottomLeft = false,
  noRoundedBottomRight = false,
  // Alpine.js props
  xData = "",
  xInit = "",
  xModel = "",
  xOn = {},
  xShow = "",
  xEffect = "",
  xTransition = "",
  // layout tweaks
  compact = false,
  noMarginTop = false,
  ...rest
} = Astro.props;
const variantClasses = {
  default: [
    "ring-1",
    "bg-white",
    "focus:ring-2",
    "text-zinc-500",
    "ring-zinc-200",
    "border-transparent",
    "focus:outline-none",
    "focus:ring-offset-2",
    "placeholder-zinc-400",
    "focus:bg-transparent",
    "focus:border-zinc-300",
    "focus:ring-blue-500",
    "focus:ring-offset-white",
    // Dark mode merged in
    "dark:bg-zinc-900",
    "dark:text-zinc-100",
    "dark:ring-zinc-700",
    "dark:placeholder-zinc-400",
    "dark:focus:border-zinc-600",
    "dark:focus:ring-zinc-500",
    "dark:focus:ring-offset-zinc-900",
  ],
  dark: [
    "ring-1",
    "bg-zinc-900",
    "focus:ring-2",
    "text-zinc-200",
    "ring-zinc-800",
    "border-zinc-800",
    "focus:outline-none",
    "focus:ring-offset-2",
    "placeholder-zinc-500",
    "focus:bg-transparent",
    "focus:border-zinc-800",
    "focus:ring-blue-400",
    "focus:ring-offset-zinc-900",
    // Extra dark mode for high contrast
    "dark:bg-black",
    "dark:text-zinc-100",
    "dark:ring-zinc-900",
    "dark:placeholder-zinc-500",
    "dark:focus:border-zinc-700",
    "dark:focus:ring-zinc-700",
    "dark:focus:ring-offset-black",
  ],
};
const sizeClasses = {
  xxs: ["h-7", "pl-3", "pr-8", "py-1.5", "text-xs"],
  xs: ["h-8", "pl-4", "pr-10", "py-2", "text-xs"],
  sm: ["h-9", "pl-4", "pr-10", "py-2", "text-xs"],
  base: ["h-10", "pl-4", "pr-10", "py-2", "text-sm"],
  md: ["h-11", "pl-4", "pr-10", "py-2", "text-sm"],
  lg: ["h-12", "pl-4", "pr-10", "py-2.5", "text-base"],
  xl: ["h-14", "pl-5", "pr-12", "py-3", "text-lg"],
};

const _noTopLeft =
  noRounded || noRoundedTop || noRoundedLeft || noRoundedTopLeft;
const _noTopRight =
  noRounded || noRoundedTop || noRoundedRight || noRoundedTopRight;
const _noBottomLeft =
  noRounded || noRoundedBottom || noRoundedLeft || noRoundedBottomLeft;
const _noBottomRight =
  noRounded || noRoundedBottom || noRoundedRight || noRoundedBottomRight;
// Only add one rounded class if all corners are rounded (default)
let roundedClass = "rounded-md";
if (_noTopLeft && _noTopRight && _noBottomLeft && _noBottomRight) {
  roundedClass = "rounded-none";
} else if (!_noTopLeft && !_noTopRight && !_noBottomLeft && !_noBottomRight) {
  roundedClass = "rounded-md";
} else {
  const parts = [];
  if (!_noTopLeft) parts.push("rounded-tl-md");
  if (!_noTopRight) parts.push("rounded-tr-md");
  if (!_noBottomLeft) parts.push("rounded-bl-md");
  if (!_noBottomRight) parts.push("rounded-br-md");
  roundedClass = parts.join(" ");
}
let selectClasses = [
  "block",
  "transition",
  "duration-300",
  "ease-in-out",
  "appearance-none", // <--- add this
  ...(sizeClasses[size] || sizeClasses.base),
  ...(variantClasses[variant] || variantClasses.default),
  roundedClass,
  ...className.split(" "),
];
// Compact mode removes vertical padding to align with grouped buttons
if (compact) {
  selectClasses.push("py-0");
}
const errorTextColor = "text-red-600";
// Process Alpine.js event handlers
const alpineEvents = Object.entries(xOn)
  .map(([event, handler]) => {
    return `@${event}="${handler}"`;
  })
  .join(" ");
// Check if any Alpine.js directives are being used
const hasAlpine =
  xData ||
  xInit ||
  xModel ||
  Object.keys(xOn).length > 0 ||
  xShow ||
  xEffect ||
  xTransition;
---

{/* Version without Alpine.js */}
{
  !hasAlpine && (
    <div class="w-full">
      {!hideLabel && (
        <label
          for={id}
          class={`block mb-1 font-medium text-zinc-500 dark:text-zinc-300 ${
            size === "xs"
              ? "text-xs"
              : size === "sm"
                ? "text-sm"
                : size === "lg"
                  ? "text-base"
                  : "text-sm"
          } ${isGrouped ? "sr-only" : ""}`}
        >
          {label}
        </label>
      )}
      <div class={`relative${!hideLabel && label && !noMarginTop ? " mt-1" : ""}`}>
        <select
          {...rest}
          id={id}
          name={name}
          class:list={selectClasses}
          aria-invalid={!!error}
          aria-describedby={error ? `${id}-error` : undefined}
        >
          <slot>
            {options.map((opt) => (
              <option value={opt.value} selected={opt.value === rest.value}>
                {opt.label}
              </option>
            ))}
          </slot>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none" />
      </div>
      {error && (
        <p id={`${id}-error`} class={`mt-1 text-sm ${errorTextColor}`}>
          {error}
        </p>
      )}
    </div>
  )
}
{/* Version with Alpine.js */}
{
  hasAlpine && (
    <div
      class="w-full"
      x-data={xData}
      x-init={xInit}
      x-show={xShow}
      x-effect={xEffect}
      x-transition={xTransition}
    >
      {!hideLabel && (
        <label
          for={id}
          class={`block mb-1 font-medium text-zinc-500 ${
            size === "xs"
              ? "text-xs"
              : size === "sm"
                ? "text-sm"
                : size === "lg"
                  ? "text-base"
                  : "text-sm"
          } ${isGrouped ? "sr-only" : ""}`}
        >
          {label}
        </label>
      )}
      <div class={`relative${!hideLabel && label && !noMarginTop ? " mt-1" : ""}`}>
        <select
          {...rest}
          id={id}
          name={name}
          class:list={selectClasses}
          aria-invalid={!!error}
          aria-describedby={error ? `${id}-error` : undefined}
          x-model={xModel}
          set:html={Object.keys(xOn).length > 0 ? alpineEvents : undefined}
        >
          <slot>
            {options.map((opt) => (
              <option value={opt.value} selected={opt.value === rest.value}>
                {opt.label}
              </option>
            ))}
          </slot>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none" />
      </div>
      {error && (
        <p id={`${id}-error`} class={`mt-1 text-sm ${errorTextColor}`}>
          {error}
        </p>
      )}
      <p
        x-show="errorMessage"
        x-text="errorMessage"
        class={`mt-1 text-sm ${errorTextColor}`}
        style="display: none;"
      />
    </div>
  )
}
