---
const {
  id,
  name,
  label,
  error,
  options = [],
  variant = "default",
  size = "base",
  class: className = "",
  ...rest
} = Astro.props;

const variantClasses = {
  default: ["bg-white", "border", "text-base-500", "ring-1", "ring-base-200", "placeholder-base-400", "focus:border-base-300", "focus:outline-none", "focus:ring-accent-500", "focus:ring-offset-2", "focus:ring-2"],
  dark: ["bg-base-800", "text-base-100", "border-base-700", "ring-1", "ring-base-700", "placeholder-base-400", "focus:ring-base-500", "focus:ring-offset-2", "focus:border-base-600", "focus:outline-none"],
};

const sizeClasses = {
  base: ["h-10", "px-4", "py-2", "text-sm", "rounded-md"]
};

let selectClasses = [
  "block", "w-full", "transition", "duration-300", "ease-in-out",
  ...sizeClasses[size],
  ...variantClasses[variant],
  ...className.split(" ")
];

const errorTextColor = variant === "dark" ? "text-red-400" : "text-red-600";
---

<div class="w-full">
  {label && (
    <label for={id} class="block mb-1 text-sm font-medium text-base-500">
      {label}
    </label>
  )}
  <div class="relative">
    <select
      {...rest}
      id={id}
      name={name}
      class:list={selectClasses}
      aria-invalid={!!error}
      aria-describedby={error ? `${id}-error` : undefined}
    >
      {options.map(opt => (
        <option value={opt.value} selected={opt.value === rest.value}>
          {opt.label}
        </option>
      ))}
    </select>
    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-base-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </div>
  </div>
  {error && (
    <p id={`${id}-error`} class={`mt-1 text-sm ${errorTextColor}`}>
      {error}
    </p>
  )}
</div>
