---
// components/Input.astro
import Badge from "@/components/fundations/badges/Badge.astro";
// Icons
import X from "@/components/fundations/icons/X.astro";

const {
  as = "input", // "input" | "textarea" | "select" | "checkbox" | "radio" | "mention" | "tags" | "url-with-select"
  type = "text", // only when as="input"
  id,
  name,
  label,
  error,
  options = [], // for select or radio group
  suggestions = [], // for mention input
  initialTags = [], // for tags input
  urlOptions = ["https://", "http://"], // for url-with-select input
  defaultUrlOption = "https://", // for url-with-select input
  variant = "default", // "default" | "dark" | "transparent-light" | "transparent-dark"
  size = "base", // xs, sm, base, md, lg
  class: className = "",
  passwordToggle = false, // New prop to enable password toggle
  ...rest
} = Astro.props;

const variantClasses = {
  default: [
    "bg-white",
    "border",
    "border-transparent",
    "text-base-500",
    "ring-1",
    "ring-base-200",
    "placeholder-base-400",
    "focus:border-base-300",
    "focus:bg-transparent",
    "focus:outline-none",
    "focus:ring-accent-500",
    "focus:ring-offset-2",
    "focus:ring-2",
  ],
  dark: [
    "bg-base-800",
    "text-base-100",
    "border-base-700",
    "ring-1",
    "ring-base-700",
    "placeholder-base-400",
    "focus:ring-base-500",
    "focus:ring-offset-2",
    "focus:border-base-600",
    "focus:outline-none",
  ],
  "transparent-light": [
    "bg-transparent",
    "border",
    "border-base-200",
    "text-accent-700",
    "placeholder-base-400",
    "focus:border-accent-500",
    "focus:outline-none",
    "focus:ring-1",
    "focus:ring-accent-500",
  ],
  "transparent-dark": [
    "bg-transparent",
    "border",
    "border-base-700",
    "text-base-100",
    "placeholder-base-500",
    "focus:border-accent-400",
    "focus:outline-none",
    "focus:ring-1",
    "focus:ring-accent-400",
  ],
};

const sizeClasses = {
  xs: ["h-8", "px-3", "text-xs", "rounded-md"],
  sm: ["h-9", "px-4", "text-sm", "rounded-md"],
  base: ["h-10", "px-4", "py-2", "text-sm", "rounded-md"],
  md: ["h-11", "px-5", "text-base", "rounded-md"],
  lg: ["h-12", "px-6", "text-base", "rounded-md"],
};

const textareaClasses = {
  xs: ["px-3", "py-2", "text-xs", "rounded-md"],
  sm: ["px-4", "py-2", "text-sm", "rounded-md"],
  base: ["px-4", "py-3", "text-sm", "rounded-md"],
  md: ["px-5", "py-3", "text-base", "rounded-md"],
  lg: ["px-6", "py-4", "text-base", "rounded-md"],
};

const checkboxRadioSizeClasses = {
  xs: ["w-3", "h-3"],
  sm: ["w-3.5", "h-3.5"],
  base: ["w-4", "h-4"], // Reduced from w-5 h-5 to size-4
  md: ["w-4.5", "h-4.5"],
  lg: ["w-5", "h-5"], // Reduced from w-7 h-7 to w-5 h-5
};

const checkboxRadioClasses = {
  default: [
    "text-accent-600",
    "border-base-300",
    "rounded",
    "focus:ring-accent-500",
    "focus:ring-offset-2",
    "focus:ring-2",
  ],
  dark: [
    "text-accent-500",
    "border-base-600",
    "rounded",
    "focus:ring-accent-400",
    "focus:ring-offset-base-800",
    "focus:ring-2",
  ],
  "transparent-light": [
    "text-accent-600",
    "border-base-300",
    "rounded",
    "focus:ring-accent-500",
    "focus:ring-2",
  ],
  "transparent-dark": [
    "text-accent-500",
    "border-base-600",
    "rounded",
    "focus:ring-accent-400",
    "focus:ring-2",
  ],
};

// Dropdown styling for mention input
const dropdownClasses = {
  default: "bg-white border border-base-200 shadow-lg rounded-md mt-1",
  dark: "bg-base-800 border border-base-700 shadow-lg rounded-md mt-1",
  "transparent-light": "bg-white border border-base-200 shadow-lg rounded-md mt-1",
  "transparent-dark": "bg-base-800 border border-base-700 shadow-lg rounded-md mt-1",
};

const dropdownItemClasses = {
  default: "px-4 py-2 hover:bg-base-100 cursor-pointer",
  dark: "px-4 py-2 hover:bg-base-700 cursor-pointer",
  "transparent-light": "px-4 py-2 hover:bg-base-100 cursor-pointer",
  "transparent-dark": "px-4 py-2 hover:bg-base-700 cursor-pointer",
};

const labelClasses = {
  default: "text-base-500",
  dark: "text-base-200",
  "transparent-light": "text-base-700",
  "transparent-dark": "text-base-200",
};
const labelSizeClasses = {
  xs: "text-xs",
  sm: "text-sm",
  base: "text-sm",
  md: "text-base",
  lg: "text-base",
};

const searchClasses = ["pl-10"];

// URL select width classes based on size
const urlSelectWidthClasses = {
  xs: "w-20",
  sm: "w-24",
  base: "w-24",
  md: "w-28",
  lg: "w-32",
};

// URL select text color based on variant
const urlSelectTextColor = {
  default: "text-base-500",
  dark: "text-base-100",
  "transparent-light": "text-accent-700",
  "transparent-dark": "text-base-100",
};

let inputClasses = [];
if (as === "input" && (type === "checkbox" || type === "radio")) {
  inputClasses = [
    ...(checkboxRadioSizeClasses[size] || checkboxRadioSizeClasses.base),
    ...(checkboxRadioClasses[variant] || checkboxRadioClasses.default),
  ];
} else if (as === "textarea") {
  inputClasses = [
    "block",
    "w-full",
    "min-h-[100px]",
    "appearance-none",
    "transition",
    "duration-300",
    "ease-in-out",
    "resize-y",
    ...(textareaClasses[size] || textareaClasses.base),
    ...(variantClasses[variant] || variantClasses.default),
  ];
} else if (as === "mention") {
  // Special classes for mention input
  inputClasses = [
    "block",
    "w-full",
    "appearance-none",
    "transition",
    "duration-300",
    "ease-in-out",
    ...(sizeClasses[size] || sizeClasses.base),
    ...(variantClasses[variant] || variantClasses.default),
  ];
} else if (as === "tags") {
  // Special classes for tags input
  inputClasses = [
    "block",
    "w-full",
    "appearance-none",
    "transition",
    "duration-300",
    "ease-in-out",
    ...(sizeClasses[size] || sizeClasses.base),
    ...(variantClasses[variant] || variantClasses.default),
  ];
} else if (as === "url-with-select") {
  // Special classes for URL input with select
  inputClasses = [
    "block",
    "w-full",
    "appearance-none",
    "transition",
    "duration-300",
    "ease-in-out",
    "rounded-md", // Use full rounded corners
    "pl-0", // Remove left padding since the select is there
    ...(sizeClasses[size] || sizeClasses.base).filter(cls => !cls.includes("rounded") && !cls.includes("px-")), // Remove default rounded and padding classes
    ...(variantClasses[variant] || variantClasses.default),
  ];
} else {
  inputClasses = [
    "block",
    "w-full",
    "appearance-none",
    "transition",
    "duration-300",
    "ease-in-out",
    ...(as === "input" && type === "search" ? searchClasses : []),
    // Add right padding for password fields with toggle
    ...(as === "input" && type === "password" && passwordToggle ? ["pr-10"] : []),
    ...(sizeClasses[size] || sizeClasses.base),
    ...(variantClasses[variant] || variantClasses.default),
  ];
}

if (className) {
  inputClasses = [...inputClasses, ...className.split(" ").filter(Boolean)];
}

const errorTextColor = variant.includes("dark")
  ? "text-red-400"
  : "text-red-600";

// Check if this is a password field with toggle enabled
const isPassword = as === "input" && type === "password" && passwordToggle;

// Convert suggestions array to JSON string for Alpine.js
const suggestionsJson = JSON.stringify(suggestions);

// Convert initialTags array to JSON string for Alpine.js
const initialTagsJson = JSON.stringify(initialTags);

// Convert urlOptions array to JSON string for Alpine.js
const urlOptionsJson = JSON.stringify(urlOptions);
---

<div class="w-full">
  {
    as !== "checkbox" && as !== "radio" && label && (
      <label
        for={id}
        class={`mb-1 block font-medium ${labelSizeClasses[size] || "text-sm"} ${labelClasses[variant] || labelClasses.default}`}
      >
        {label}
      </label>
    )
  }

  {
    as === "input" && type !== "checkbox" && type !== "radio" && (
      <div class="relative" x-data={isPassword ? "{ showPassword: false }" : undefined}>
        {type === "search" && (
          <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class={`h-4 w-4 ${variant.includes("dark") ? "text-base-400" : "text-base-500"}`}
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
          </div>
        )}
        <input
          {...rest}
          x-bind:type={isPassword ? "showPassword ? 'text' : 'password'" : undefined}
          type={type}
          id={id}
          name={name}
          class:list={inputClasses}
          aria-required={rest.required ? "true" : undefined}
          aria-invalid={error ? "true" : undefined}
          aria-describedby={error ? `${id}-error` : undefined}
        />
        
        {isPassword && (
          <button
            type="button"
            @click="showPassword = !showPassword"
            class="absolute inset-y-0 right-0 flex items-center pr-3 text-base-500 focus:outline-none"
            tabindex="-1"
            aria-label="Toggle password visibility"
          >
            <svg
              x-show="!showPassword"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="size-5"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
              <path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path>
              <path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6"></path>
            </svg>
            <svg
              x-show="showPassword"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="size-5"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
              <path d="M10.585 10.587a2 2 0 0 0 2.829 2.828"></path>
              <path d="M16.681 16.673a8.717 8.717 0 0 1 -4.681 1.327c-3.6 0 -6.6 -2 -9 -6c1.272 -2.12 2.712 -3.678 4.32 -4.674m2.86 -1.146a9.055 9.055 0 0 1 1.82 -.18c3.6 0 6.6 2 9 6c-.666 1.11 -1.379 2.067 -2.138 2.87"></path>
              <path d="M3 3l18 18"></path>
            </svg>
          </button>
        )}
      </div>
    )
  }

  {
    as === "textarea" && (
      <textarea
        {...rest}
        id={id}
        name={name}
        rows={rest.rows || "4"}
        class:list={inputClasses}
        aria-required={rest.required ? "true" : undefined}
        aria-invalid={error ? "true" : undefined}
        aria-describedby={error ? `${id}-error` : undefined}
      />
    )
  }

  {
    as === "select" && (
      <div class="relative">
        <select
          {...rest}
          id={id}
          name={name}
          class:list={inputClasses}
          aria-required={rest.required ? "true" : undefined}
          aria-invalid={error ? "true" : undefined}
          aria-describedby={error ? `${id}-error` : undefined}
        >
          {options.map((opt) => (
            <option value={opt.value} selected={opt.value === rest.value}>
              {opt.label}
            </option>
          ))}
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class={`h-4 w-4 ${variant.includes("dark") ? "text-base-400" : "text-base-500"}`}
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </div>
      </div>
    )
  }

  {
    as === "url-with-select" && (
      <div
        x-data={`{
          protocol: '${defaultUrlOption}',
          urlOptions: ${urlOptionsJson},
          urlValue: ''
        }`}
        class="relative"
      >
        <div class:list={[
          "flex",
          "items-center",
          "rounded-md",
          "overflow-hidden",
          "divide-x divide-base-200 ",
          ...(variantClasses[variant] || variantClasses.default)
        ]}>
          <div class="flex items-center pl-2 mr-2">
            <select
              x-model="protocol"
              aria-label="URL protocol"
              class:list={[
                "appearance-none",
                "bg-transparent",
                "border-0",
                "focus:outline-none",
                "focus:ring-0",
                "pr-6", // Space for the dropdown arrow
                urlSelectWidthClasses[size] || "w-24",
                urlSelectTextColor[variant] || "text-base-500",
                size === "xs" ? "text-xs" : 
                size === "sm" ? "text-sm" : 
                size === "base" ? "text-sm" : 
                size === "md" ? "text-base" : 
                "text-base"
              ]}
            >
              <template x-for="option in urlOptions" :key="option">
                <option x-text="option" :value="option" :selected="option === protocol"></option>
              </template>
            </select>
           
          </div>
          
          <input
            {...rest}
            type="text"
            id={id}
            name={name}
            x-model="urlValue"
            class:list={[
              "flex-1",
              "bg-transparent",
              "border-0",
              "focus:outline-none",
              "focus:ring-0",
              "py-2",
              "px-1",
              size === "xs" ? "text-xs" : 
              size === "sm" ? "text-sm" : 
              size === "base" ? "text-sm" : 
              size === "md" ? "text-base" : 
              "text-base",
              variant.includes("dark") ? "text-base-100" : "text-base-700"
            ]}
            aria-required={rest.required ? "true" : undefined}
            aria-invalid={error ? "true" : undefined}
            aria-describedby={error ? `${id}-error` : undefined}
          />
        </div>
        
       
        <input 
          type="hidden" 
          name={`${name}-full-url`} 
          x-bind:value="protocol + urlValue" 
          
        />
      </div>
    )
  }

  {
  as === "mention" && (
    <div
      x-data={`{ 
        query: '', 
        suggestions: ${suggestionsJson}, 
        open: false,
        filteredSuggestions() {
          return this.suggestions.filter(s => s.toLowerCase().includes(this.query.toLowerCase()));
        }
      }`}
      class="relative"
    >
      <div class="relative flex items-center">
        <span class={`absolute left-0 flex items-center justify-center pl-3 ${variant.includes("dark") ? "text-base-300" : "text-base-500"}`}>@</span>
        <input
          type="text"
          id={id}
          name={name}
          placeholder={rest.placeholder || "username"}
          x-model="query"
          @focus="open = true"
          @click.away="open = false"
          class:list={[
            ...inputClasses,
            "pl-8" // Add left padding for @ symbol
          ]}
          aria-required={rest.required ? "true" : undefined}
          aria-invalid={error ? "true" : undefined}
          aria-describedby={error ? `${id}-error` : undefined}
          {...rest}
        />
      </div>
      
      
      <div 
        x-show="open && filteredSuggestions().length > 0" 
        x-transition:enter="transition ease-out duration-200"
        x-transition:enter-start="opacity-0 transform scale-95"
        x-transition:enter-end="opacity-100 transform scale-100"
        x-transition:leave="transition ease-in duration-150"
        x-transition:leave-start="opacity-100 transform scale-100"
        x-transition:leave-end="opacity-0 transform scale-95"
        class="absolute z-10 w-full" 
        class:list={[dropdownClasses[variant] || dropdownClasses.default]}
        style="display: none;"
      >
        <ul class="py-1 max-h-60 overflow-auto">
          <template x-for="suggestion in filteredSuggestions()" :key="suggestion">
            <li 
              x-text="suggestion" 
              @click="query = suggestion; open = false"
              class:list={[dropdownItemClasses[variant] || dropdownItemClasses.default, variant.includes("dark") ? "text-base-200" : "text-base-700"]}
            ></li>
          </template>
        </ul>
      </div>
    </div>
  )
}

  {
    as === "tags" && (
      <div
        x-data={`{ 
          tags: ${initialTagsJson}, 
          newTag: '',
          addTag() {
            if (this.newTag.trim() !== '' && !this.tags.includes(this.newTag.trim())) {
              this.tags.push(this.newTag.trim())
              this.newTag = ''
            }
          },
          removeTag(index) {
            this.tags.splice(index, 1)
          }
        }`}
        class="space-y-2"
      >
        <input
          type="text"
          id={id}
          name={name}
          placeholder={rest.placeholder || "Add a tag"}
          x-model="newTag"
          @keydown.enter.prevent="addTag()"
          class:list={inputClasses}
          aria-required={rest.required ? "true" : undefined}
          aria-invalid={error ? "true" : undefined}
          aria-describedby={error ? `${id}-error` : undefined}
          {...rest}
        />
        
        <div class="flex flex-wrap gap-2 mt-2">
          <template x-for="(tag, index) in tags" :key="index">
            <Badge variant="muted" size="xs" class="flex items-center gap-1">
              <span x-text="tag"></span>
              <button 
                @click="removeTag(index)" 
                type="button"
                class="inline-flex items-center justify-center size-4 rounded-full hover:bg-base-200 focus:outline-none focus:ring-2  focus:ring-accent-500"
                aria-label="Remove tag"
              >
                <X slot="left-icon" size="xs" />
              </button>
            </Badge>
          </template>
        </div>
        
        <p class={`text-xs ${variant.includes("dark") ? "text-base-400" : "text-base-500"}`}>
          Press Enter to add a tag
        </p>
        
        
        <input 
          type="hidden" 
          name={`${name}-values`} 
          x-bind:value="JSON.stringify(tags)" 
        />
      </div>
    )
  }

  {
    as === "checkbox" && (
      <div class="flex items-center">
        <input
          {...rest}
          type="checkbox"
          id={id}
          name={name}
          class:list={[
            "rounded",
            "border-base-300",
            "text-accent-600",
            "focus:ring-accent-500",
            "focus:ring-offset-2",
            "focus:ring-2",
            "shadow",
            // Force smaller size for checkboxes
            size === "xs"
              ? "w-3 h-3"
              : size === "sm"
                ? "w-3.5 h-3.5"
                : size === "base"
                  ? "size-4"
                  : size === "md"
                    ? "w-4.5 h-4.5"
                    : "w-5 h-5",
          ]}
          aria-required={rest.required ? "true" : undefined}
          aria-invalid={error ? "true" : undefined}
          aria-describedby={error ? `${id}-error` : undefined}
        />
        {label && (
          <label
            for={id}
            class={`ml-2 text-sm font-medium ${labelClasses[variant] || labelClasses.default}`}
          >
            {label}
          </label>
        )}
      </div>
    )
  }
  
  {
    as === "radio" && (
      <div class="space-y-2">
        {label && (
          <div
            class={`text-sm font-medium ${labelClasses[variant] || labelClasses.default}`}
          >
            {label}
          </div>
        )}
        {options.map((opt) => (
          <div class="flex flex-col gap-1">
            <label
              for={`${id}-${opt.value}`}
              class={`text-sm ${labelClasses[variant] || labelClasses.default}`}
            >
              {opt.label}
            </label>
            <input
              {...rest}
              type="radio"
              id={`${id}-${opt.value}`}
              name={name}
              value={opt.value}
              class:list={inputClasses}
              checked={opt.value === rest.value}
              aria-required={rest.required ? "true" : undefined}
              aria-invalid={error ? "true" : undefined}
              aria-describedby={error ? `${id}-error` : undefined}
            />
          </div>
        ))}
      </div>
    )
  }

  {
    error && (
      <p class={`mt-1 text-sm ${errorTextColor}`} id={`${id}-error`}>
        {error}
      </p>
    )
  }
</div>

