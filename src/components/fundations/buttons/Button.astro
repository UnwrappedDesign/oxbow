---
interface Props {
  variant?:
    | "default"
    | "accent"
    | "muted"
    | "mutedDark"
    | "alternative"
    | "link"
    | "outline"
    | "ghost";
  size?: "xxs" | "xs" | "sm" | "base" | "md" | "lg" | "xl";
  onlyIconSize?: "xxs" | "xs" | "sm" | "base" | "md" | "lg" | "xl";
  gap?: "xxs" | "xs" | "sm" | "base" | "md" | "lg";
  loading?: boolean;
  fullWidth?: boolean;
  class?: string;
  href?: string;
  target?: string;
  rel?: string;
  noRounded?: boolean;
  noRoundedLeft?: boolean;
  noRoundedRight?: boolean;
  noRoundedTop?: boolean;
  noRoundedBottom?: boolean;
  noRoundedTopLeft?: boolean;
  noRoundedTopRight?: boolean;
  noRoundedBottomLeft?: boolean;
  noRoundedBottomRight?: boolean;
  [key: string]: any;
}

const {
  variant = "default",
  size = "base",
  onlyIconSize,
  gap,
  loading = false,
  fullWidth = false,
  class: className,
  href,
  target,
  rel,
  noRounded = false,
  noRoundedLeft = false,
  noRoundedRight = false,
  noRoundedTop = false,
  noRoundedBottom = false,
  noRoundedTopLeft = false,
  noRoundedTopRight = false,
  noRoundedBottomLeft = false,
  noRoundedBottomRight = false,
  ...rest
} = Astro.props as Props;

const _noTopLeft =
  noRounded || noRoundedTop || noRoundedLeft || noRoundedTopLeft;
const _noTopRight =
  noRounded || noRoundedTop || noRoundedRight || noRoundedTopRight;
const _noBottomLeft =
  noRounded || noRoundedBottom || noRoundedLeft || noRoundedBottomLeft;
const _noBottomRight =
  noRounded || noRoundedBottom || noRoundedRight || noRoundedBottomRight;

let roundedClass = "rounded-md";
if (_noTopLeft && _noTopRight && _noBottomLeft && _noBottomRight) {
  roundedClass = "rounded-none";
} else {
  const parts = [];
  if (!_noTopLeft) parts.push("rounded-tl-md");
  if (!_noTopRight) parts.push("rounded-tr-md");
  if (!_noBottomLeft) parts.push("rounded-bl-md");
  if (!_noBottomRight) parts.push("rounded-br-md");
  if (parts.length) roundedClass = parts.join(" ");
}

const isLink = typeof href === "string";
const finalHref = isLink ? href : undefined;
const finalTarget = target || undefined;
const finalRel = finalTarget === "_blank" ? rel || "noopener noreferrer" : rel;
const isDisabled = loading || rest.disabled;
const tabIndexValue: string | undefined = isDisabled ? "-1" : undefined;

const defaultClass = [
  "text-white",
  "bg-base-900",
  "outline",
  "outline-base-900",
  "hover:bg-base-950",
  "focus:outline-base-950",
  "shadow-sm",
];

const accentClass = [
  "text-white",
  "bg-accent-500",
  "outline",
  "outline-accent-500",
  "hover:bg-accent-600",
  "focus:outline-accent-600",
  "shadow-sm",
];

const alternativeClass = [
  "text-base-700",
  "bg-white",
  "outline",
  "outline-base-200",
  "hover:shadow-sm",
  "focus:outline-base-900",
  "shadow-sm",
];

const mutedClass = [
  "text-base-600",
  "bg-base-50",
  "outline",
  "outline-base-50",
  "hover:bg-base-200",
  "focus:outline-base-600",
];
const mutedDarkClass = [
  "text-white",
  "bg-base-800",
  "outline",
  "outline-accent-800",
  "hover:bg-base-900",
  "focus:outline-base-500",
];

const outlineClass = [
  "text-base-700",
  "outline",
  "outline-base-500",
  "bg-transparent",
  "hover:bg-base-100",
  "focus:outline-base-600",
  "shadow-sm",
];

const ghostClass = [
  "text-base-600",
  "bg-transparent",
  "hover:bg-base-100",
  "focus:outline-base-300",
];

const linkClass = [
  "text-accent-500",
  "bg-transparent",
  "hover:underline",
  "focus:underline",
  "focus:outline-none",
  "p-0",
  "h-auto",
  "rounded-none",
];

const xxs = ["h-7", "px-3", "py-1.5", "text-xs"];
const xs = ["h-8", "px-4", "py-2", "text-xs"];
const sm = ["h-9", "px-4", "py-2", "text-sm"];
const base = ["h-10", "px-6", "py-3", "text-base"];
const md = ["h-11", "px-6", "py-3", "text-base"];
const lg = ["h-12", "px-6", "py-3", "text-lg"];
const xl = ["h-14", "px-6", "py-3", "text-xl"];

const iconXXS = ["w-7", "h-7", "p-2"];
const iconXS = ["w-8", "h-8", "p-2"];
const iconSM = ["w-9", "h-9", "p-2"];
const iconBase = ["w-10", "h-10", "p-2"];
const iconMD = ["w-11", "h-11", "p-2"];
const iconLG = ["w-12", "h-12", "p-3"];
const iconXL = ["w-14", "h-14", "p-3"];

const gapXXS = ["gap-2"];
const gapXS = ["gap-2"];
const gapSM = ["gap-4"];
const gapBase = ["gap-8"];
const gapMD = ["gap-10"];
const gapLG = ["gap-12"];

const disabledClass = [
  "opacity-50",
  "cursor-not-allowed",
  "pointer-events-none",
];
const loadingClass = ["relative", "opacity-80", "cursor-wait"];
const additionalClasses = className ? className.split(" ") : [];

const hasDefaultSlot = Astro.slots.has("default");
const isIconOnly =
  !hasDefaultSlot &&
  (Astro.slots.has("left-icon") || Astro.slots.has("right-icon"));

const variantClass =
  {
    default: defaultClass,
    accent: accentClass,
    muted: mutedClass,
    mutedDark: mutedDarkClass,
    alternative: alternativeClass,
    outline: outlineClass,
    ghost: ghostClass,
    link: linkClass,
  }[variant] || defaultClass;

const sizeClass = onlyIconSize
  ? {
      xxs: iconXXS,
      xs: iconXS,
      sm: iconSM,
      base: iconBase,
      md: iconMD,
      lg: iconLG,
      xl: iconXL,
    }[onlyIconSize]
  : !isIconOnly
    ? {
        xxs,
        xs,
        sm,
        base,
        md,
        lg,
        xl,
      }[size]
    : {
        xxs: iconXXS,
        xs: iconXS,
        sm: iconSM,
        base: iconBase,
        md: iconMD,
        lg: iconLG,
        xl: iconXL,
      }[size];

const gapMap = {
  xxs: gapXXS,
  xs: gapXS,
  sm: gapSM,
  base: gapBase,
  md: gapMD,
  lg: gapLG,
};

const gapClass = gapMap[gap] || [];

const baseClasses = [
  "flex",
  "items-center",
  "justify-center",
  "text-center",
  "font-medium",
  "duration-500",
  "ease-in-out",
  "transition-colors",
  "focus:outline-2",
  "focus:outline-offset-2",
  "focus:z-10",
  "select-none",
  variantClass,
  sizeClass,
  gapClass,
  roundedClass,
  isDisabled && disabledClass,
  loading && loadingClass,
  fullWidth && "w-full",
  ...additionalClasses,
];

const spinnerHTML = `
  <span class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
    <svg class="w-5 h-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  </span>
`;
---

{
  isLink ? (
    <a
      href={finalHref}
      target={finalTarget}
      rel={finalRel}
      aria-busy={loading}
      aria-disabled={isDisabled}
      role="link"
      class:list={baseClasses}
      {...rest}
    >
      {loading && <Fragment set:html={spinnerHTML} />}
      {!loading && (
        <>
          {Astro.slots.has("left-icon") && <slot name="left-icon" />}
          <slot />
          {Astro.slots.has("right-icon") && <slot name="right-icon" />}
        </>
      )}
    </a>
  ) : (
    <button class:list={baseClasses} {...rest}>
      {loading && <Fragment set:html={spinnerHTML} />}
      {!loading && (
        <>
          {Astro.slots.has("left-icon") && <slot name="left-icon" />}
          <slot />
          {Astro.slots.has("right-icon") && <slot name="right-icon" />}
        </>
      )}
    </button>
  )
}
