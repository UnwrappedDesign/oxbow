---
import LoadingIcon from "@/components/fundations/icons/Loading.astro";

type ButtonVariant =
  | "oxbowDefault"
  | "oxbowMuted"
  | "oxbowAccent"
  | "oxbowOutline"
  | "default"
  | "accent"
  | "accentDark"
  | "muted"
  | "alternative"
  | "outline"
  | "ghost"
  | "text"
  | "link"
  | "info"
  | "success"
  | "warning"
  | "danger"
  | "onlyIcon"
  | "icon";

type ButtonSize = "xxs" | "xs" | "sm" | "base" | "md" | "lg" | "xl";
type ButtonGap = "xxs" | "xs" | "sm" | "base" | "md" | "lg";

interface Props {
  variant?: ButtonVariant;
  size?: ButtonSize;
  onlyIconSize?: ButtonSize;
  gap?: ButtonGap;
  iconOnly?: boolean;
  loading?: boolean;
  fullWidth?: boolean;
  class?: string;
  href?: string;
  target?: string;
  rel?: string;
  noRounded?: boolean;
  noRoundedLeft?: boolean;
  noRoundedRight?: boolean;
  noRoundedTop?: boolean;
  noRoundedBottom?: boolean;
  noRoundedTopLeft?: boolean;
  noRoundedTopRight?: boolean;
  noRoundedBottomLeft?: boolean;
  noRoundedBottomRight?: boolean;
  justify?: "center" | "between" | "end";
  [key: string]: any;
}

const iconVariant = [
  "text-zinc-600",
  "bg-zinc-100",
  "outline",
  "outline-1",
  "outline-transparent",
  "hover:bg-zinc-200",
  "focus-visible:outline-zinc-300",
  "dark:text-zinc-200",
  "dark:bg-zinc-800",
  "dark:outline-transparent",
  "dark:hover:bg-zinc-700",
  "dark:focus-visible:outline-zinc-600",
];

const BUTTON_VARIANTS: Record<ButtonVariant, string[]> = {
  oxbowDefault: [
    "text-white",
    "bg-zinc-900",
    "outline",
    "outline-zinc-900",
    "hover:bg-zinc-950",
    "focus-visible:outline-zinc-950",
    "dark:bg-zinc-800",
    "dark:text-white",
    "dark:outline-zinc-600",
    "dark:hover:bg-zinc-700",
    "dark:focus-visible:outline-zinc-500",
  ],
  oxbowMuted: [
    "text-zinc-600",
    "bg-base-100",
    "outline",
    "outline-base-50",
    "hover:bg-base-50",
    "focus-visible:outline-base-100",
    "dark:text-zinc-200",
    "dark:bg-zinc-700",
    "dark:outline-zinc-600",
    "dark:hover:bg-zinc-600",
    "dark:focus-visible:outline-zinc-500",
  ],
  oxbowAccent: [
    "text-white",
    "bg-accent-600",
    "outline",
    "outline-accent-500",
    "hover:bg-accent-500",
    "focus-visible:outline-accent-600",
    "dark:bg-blue-600",
    "dark:text-white",
    "dark:outline-blue-400",
    "dark:hover:bg-blue-500",
    "dark:focus-visible:outline-blue-300",
  ],
  oxbowOutline: [
    "text-base-700",
    "outline",
    "outline-base-200",
    "bg-transparent",
    "hover:outline-accent-600",
    "focus-visible:outline-accent-500",
    "dark:text-base-200",
    "dark:outline-base-400",
    "dark:hover:outline-accent-400",
    "dark:bg-zinc-800",
  ],
  default: [
    "text-white",
    "bg-zinc-900",
    "outline",
    "outline-zinc-900",
    "hover:bg-zinc-950",
    "focus-visible:outline-zinc-950",
    "dark:bg-zinc-100",
    "dark:text-zinc-900",
    "dark:outline-zinc-100",
    "dark:hover:bg-zinc-200",
    "dark:focus-visible:outline-zinc-200",
  ],
  accent: [
    "text-white",
    "bg-blue-700",
    "outline",
    "outline-blue-700",
    "hover:bg-blue-600",
    "focus-visible:outline-blue-600",
    "dark:bg-blue-600",
    "dark:text-zinc-100",
    "dark:outline-blue-600",
    "dark:hover:bg-blue-700",
    "dark:focus-visible:outline-blue-500",
  ],
  accentDark: [
    "text-white",
    "bg-blue-900",
    "outline",
    "outline-blue-900",
    "hover:bg-blue-800",
    "focus-visible:outline-blue-800",
    "dark:bg-blue-800",
    "dark:text-zinc-100",
    "dark:outline-blue-700",
    "dark:hover:bg-blue-700",
    "dark:focus-visible:outline-blue-600",
  ],
  muted: [
    "text-zinc-600",
    "bg-zinc-50",
    "outline",
    "outline-zinc-100",
    "hover:bg-zinc-200",
    "focus-visible:outline-zinc-600",
    "dark:text-zinc-100",
    "dark:bg-zinc-800",
    "dark:outline-zinc-800",
    "dark:hover:bg-zinc-700",
    "dark:focus-visible:outline-zinc-700",
  ],
  alternative: [
    "text-zinc-800",
    "bg-zinc-100",
    "outline",
    "outline-zinc-200",
    "hover:bg-zinc-200",
    "hover:text-zinc-900",
    "focus-visible:outline-zinc-400",
    "dark:text-zinc-100",
    "dark:bg-zinc-700",
    "dark:outline-zinc-600",
    "dark:hover:bg-zinc-600",
    "dark:focus-visible:outline-zinc-400",
  ],
  outline: [
    "text-zinc-700",
    "bg-white",
    "outline",
    "outline-zinc-200",
    "hover:shadow-sm",
    "hover:bg-zinc-50",
    "focus-visible:outline-zinc-900",
    "dark:text-zinc-100",
    "dark:bg-zinc-800",
    "dark:outline-zinc-600",
    "dark:hover:bg-zinc-700",
    "dark:focus-visible:outline-zinc-400",
  ],
  ghost: [
    "text-zinc-600",
    "bg-transparent",
    "hover:bg-zinc-100",
    "focus-visible:outline-zinc-300",
    "dark:text-zinc-100",
    "dark:bg-transparent",
    "dark:hover:bg-zinc-900",
    "dark:focus-visible:outline-zinc-700",
  ],
  text: [
    "text-zinc-500",
    "bg-white",
    "outline",
    "outline-zinc-200",
    "hover:text-blue-600",
    "hover:bg-zinc-50",
    "focus-visible:outline-blue-500",
    "dark:text-zinc-200",
    "dark:bg-zinc-700",
    "dark:outline-zinc-600",
    "dark:hover:bg-zinc-600",
    "dark:focus-visible:outline-zinc-500",
  ],
  link: [
    "text-blue-500",
    "bg-transparent",
    "hover:underline",
    "focus-visible:underline",
    "focus-visible:outline-none",
    "p-0",
    "rounded-none",
    "dark:text-blue-400",
    "dark:bg-transparent",
  ],
  info: [
    "text-white",
    "bg-sky-700",
    "outline",
    "outline-sky-700",
    "hover:bg-sky-600",
    "focus-visible:outline-sky-600",
    "dark:bg-sky-600",
    "dark:text-zinc-100",
    "dark:outline-sky-600",
    "dark:hover:bg-sky-700",
    "dark:focus-visible:outline-sky-500",
  ],
  success: [
    "text-white",
    "bg-emerald-700",
    "outline",
    "outline-emerald-700",
    "hover:bg-emerald-600",
    "focus-visible:outline-emerald-600",
    "dark:bg-emerald-600",
    "dark:text-zinc-100",
    "dark:outline-emerald-600",
    "dark:hover:bg-emerald-700",
    "dark:focus-visible:outline-emerald-500",
  ],
  warning: [
    "text-white",
    "bg-amber-700",
    "outline",
    "outline-amber-700",
    "hover:bg-amber-600",
    "focus-visible:outline-amber-600",
    "dark:bg-amber-600",
    "dark:text-zinc-100",
    "dark:outline-amber-600",
    "dark:hover:bg-amber-700",
    "dark:focus-visible:outline-amber-500",
  ],
  danger: [
    "text-white",
    "bg-rose-700",
    "outline",
    "outline-rose-700",
    "hover:bg-rose-600",
    "focus-visible:outline-rose-600",
    "dark:bg-rose-600",
    "dark:text-zinc-100",
    "dark:outline-rose-600",
    "dark:hover:bg-rose-700",
    "dark:focus-visible:outline-rose-500",
  ],
  onlyIcon: iconVariant,
  icon: iconVariant,
};

const SIZE_MAP: Record<ButtonSize, { button: string[]; icon: string[] }> = {
  xxs: {
    button: ["h-7", "px-3", "text-xs"],
    icon: ["h-7", "w-7", "text-xs"],
  },
  xs: {
    button: ["h-8", "px-3.5", "text-xs"],
    icon: ["h-8", "w-8", "text-xs"],
  },
  sm: {
    button: ["h-9", "px-4", "text-sm"],
    icon: ["h-9", "w-9", "text-sm"],
  },
  base: {
    button: ["h-10", "px-5", "text-sm"],
    icon: ["h-10", "w-10", "text-base"],
  },
  md: {
    button: ["h-11", "px-6", "text-base"],
    icon: ["h-11", "w-11", "text-base"],
  },
  lg: {
    button: ["h-12", "px-6", "text-lg"],
    icon: ["h-12", "w-12", "text-lg"],
  },
  xl: {
    button: ["h-14", "px-7", "text-xl"],
    icon: ["h-14", "w-14", "text-xl"],
  },
};

const GAP_MAP: Record<ButtonGap, string> = {
  xxs: "gap-1.5",
  xs: "gap-2",
  sm: "gap-2.5",
  base: "gap-3",
  md: "gap-4",
  lg: "gap-6",
};

const BASE_CLASSES = [
  "relative",
  "flex",
  "items-center",
  "justify-center",
  "text-center",
  "font-medium",
  "transition-colors",
  "duration-200",
  "ease-in-out",
  "select-none",
  "focus-visible:outline-2",
  "focus-visible:outline-offset-2",
  "focus-visible:z-10",
];
const DISABLED_CLASSES = [
  "pointer-events-none",
  "cursor-not-allowed",
  "opacity-60",
];
const LOADING_CLASSES = ["opacity-80", "cursor-wait"];

const {
  variant = "default",
  size = "base",
  onlyIconSize,
  gap,
  iconOnly: iconOnlyProp,
  loading = false,
  fullWidth = false,
  class: className,
  href,
  target,
  rel,
  noRounded = false,
  noRoundedLeft = false,
  noRoundedRight = false,
  noRoundedTop = false,
  noRoundedBottom = false,
  noRoundedTopLeft = false,
  noRoundedTopRight = false,
  noRoundedBottomLeft = false,
  noRoundedBottomRight = false,
  justify = "center",
  ...rest
} = Astro.props as Props;

const _noTopLeft =
  noRounded || noRoundedTop || noRoundedLeft || noRoundedTopLeft;
const _noTopRight =
  noRounded || noRoundedTop || noRoundedRight || noRoundedTopRight;
const _noBottomLeft =
  noRounded || noRoundedBottom || noRoundedLeft || noRoundedBottomLeft;
const _noBottomRight =
  noRounded || noRoundedBottom || noRoundedRight || noRoundedBottomRight;

let roundedClasses: string[] = ["rounded-md"];
const anyCornerOverride =
  _noTopLeft || _noTopRight || _noBottomLeft || _noBottomRight;
if (anyCornerOverride) {
  if (_noTopLeft && _noTopRight && _noBottomLeft && _noBottomRight) {
    roundedClasses = ["rounded-none"];
  } else {
    const parts: string[] = [];
    if (!_noTopLeft) parts.push("rounded-tl-md");
    if (!_noTopRight) parts.push("rounded-tr-md");
    if (!_noBottomLeft) parts.push("rounded-bl-md");
    if (!_noBottomRight) parts.push("rounded-br-md");
    roundedClasses = parts;
  }
}

const justifyClass = {
  center: "justify-center",
  between: "justify-between",
  end: "justify-end",
}[justify];

const isLink = typeof href === "string";
const finalHref = isLink ? href : undefined;
const finalTarget = target || undefined;
const finalRel = finalTarget === "_blank" ? rel || "noopener noreferrer" : rel;
const isDisabled = loading || Boolean(rest.disabled);
const tabIndexValue: number | undefined = isDisabled ? -1 : undefined;

const hasDefaultSlot = Astro.slots.has("default");
const hasLeftIcon = Astro.slots.has("left-icon");
const hasRightIcon = Astro.slots.has("right-icon");

const explicitIconVariant = variant === "onlyIcon" || variant === "icon";
const iconOnly =
  iconOnlyProp !== undefined
    ? iconOnlyProp
    : explicitIconVariant || (!hasDefaultSlot && (hasLeftIcon || hasRightIcon));

const variantClasses = BUTTON_VARIANTS[variant] || BUTTON_VARIANTS.default;

const sizeEntry = SIZE_MAP[size] ?? SIZE_MAP.base;
const iconSizeKey = (onlyIconSize ?? size) as ButtonSize;
const iconSizeEntry = SIZE_MAP[iconSizeKey] ?? sizeEntry;
const sizeClasses = iconOnly ? iconSizeEntry.icon : sizeEntry.button;

const hasIconAndLabel =
  !iconOnly && hasDefaultSlot && (hasLeftIcon || hasRightIcon);
const computedGapKey = gap ?? (hasIconAndLabel ? "xs" : undefined);
const gapClasses =
  computedGapKey && GAP_MAP[computedGapKey as ButtonGap]
    ? [GAP_MAP[computedGapKey as ButtonGap]]
    : [];

const additionalClasses =
  typeof className === "string"
    ? className
        .split(/\s+/)
        .map((value) => value.trim())
        .filter(Boolean)
    : [];

const baseClasses = [
  ...BASE_CLASSES,
  justifyClass,
  ...roundedClasses,
  fullWidth && "w-full",
  ...variantClasses,
  ...sizeClasses,
  ...gapClasses,
  ...(isDisabled ? DISABLED_CLASSES : []),
  ...(loading ? LOADING_CLASSES : []),
  ...additionalClasses,
].filter(Boolean);
---

{
  isLink ? (
    <a
      href={finalHref}
      target={finalTarget}
      rel={finalRel}
      aria-busy={loading}
      aria-disabled={isDisabled}
      role="link"
      tabindex={tabIndexValue}
      class:list={baseClasses}
      {...rest}
    >
      {loading ? (
        <span
          class="absolute inset-0 grid place-items-center"
          aria-hidden="true"
        >
          <LoadingIcon class="h-5 w-5 animate-spin" />
        </span>
      ) : (
        <>
          {hasLeftIcon && <slot name="left-icon" />}
          <slot />
          {hasRightIcon && <slot name="right-icon" />}
        </>
      )}
    </a>
  ) : (
    <button
      class:list={baseClasses}
      disabled={isDisabled}
      tabindex={tabIndexValue}
      {...rest}
    >
      {loading ? (
        <span
          class="absolute inset-0 grid place-items-center"
          aria-hidden="true"
        >
          <LoadingIcon class="h-5 w-5 animate-spin" />
        </span>
      ) : (
        <>
          {hasLeftIcon && <slot name="left-icon" />}
          <slot />
          {hasRightIcon && <slot name="right-icon" />}
        </>
      )}
    </button>
  )
}
