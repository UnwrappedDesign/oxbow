---
// Dynamic classes toggled at runtime; keep original names in prod
export const excludeFromObfuscation = [
  "bg-zinc-50",
  "bg-white/5",
  "dark:bg-white/5",
  "text-accent-600",
  "text-zinc-600",
];
import Search from "@/components/fundations/icons/Search.astro";
import XIcon from "@/components/fundations/icons/X.astro";
import Mail from "@/components/fundations/icons/Mail.astro";
import Grid from "@/components/fundations/icons/Grid.astro";
import Tools from "@/components/fundations/icons/Tools.astro";
import Calendar from "@/components/fundations/icons/Calendar.astro";
import Plus from "@/components/fundations/icons/Plus.astro";
import Report from "@/components/fundations/icons/Report.astro";
---

<div
  class="flex items-center justify-center p-8 py-24 bg-white dark:bg-zinc-900"
>
  <!-- Copy:start -->
  <!--
  
  - [x-cloak] hides uninitialized Alpine content until hydration to avoid flicker.
 
<style>
  :global([x-cloak]) {
    display: none !important;
  }
  
</style> 

-->
  <div
    class="w-full max-w-2xl overflow-hidden bg-white shadow-lg dark:bg-zinc-800 rounded-xl outline outline-zinc-200 dark:outline-zinc-800"
    x-data="{
      open: true,
      query: '',
      selected: 0,
      // chord handling
      pendingChord: '',
      chordTimer: null,
      // demo actions
      go(href){ console.log('navigate ->', href) },
      // options/shortcuts (new copy)
      options: [
        { id: 'open-inbox', text: 'Open Inbox', desc: 'Latest updates and mentions', icon: 'mail', href: '#inbox', shortcuts: ['W','I'] },
        { id: 'browse-collections', text: 'Browse Collections', desc: 'Explore saved components and patterns', icon: 'grid', href: '#collections', shortcuts: ['W','C'] },
        { id: 'integrations-directory', text: 'Open Integrations', desc: 'Connect tools and automate workflows', icon: 'tools', href: '#integrations', shortcuts: ['W','T'] },
        { id: 'new-document', text: 'Start New Document', desc: 'Blank canvas for ideas', icon: 'plus', href: '#new', shortcuts: ['N'] },
        { id: 'activity-log', text: 'View Activity Log', desc: 'All changes across the workspace', icon: 'report', href: '#activity', shortcuts: ['L'] },
        { id: 'schedule-standup', text: 'Plan Standup', desc: 'Book a daily team catch‑up', icon: 'calendar', href: '#standup', shortcuts: ['S'] },
      ],
      // example cards data (new copy)
      requests: [
        { id:'r1', name:'Avery Gray', badge:'Overtime', from:'Aug 12', to:'Aug 12' },
        { id:'r2', name:'Noah Patel', badge:'WFH', from:'Aug 13', to:'Aug 13' },
        { id:'r3', name:'Isla Chen', badge:'Training', from:'Aug 14', to:'Aug 15' },
        { id:'r4', name:'Marco Santos', badge:'Leave', from:'Aug 16', to:'Aug 18' },
      ],
      score(text, q){
        q = (q||'').trim().toLowerCase();
        if(!q) return 1;
        text = (text||'').toLowerCase();
        if(text === q) return 1000;
        if(text.startsWith(q)) return 500;
        // subsequence match
        let i=0,j=0; while(i<text.length && j<q.length){ if(text[i]===q[j]) j++; i++; }
        return j===q.length ? 200 : (text.includes(q) ? 100 : -1);
      },
      get filtered(){
        const q = this.query; const arr = this.options.map(o=>({o, s: Math.max(this.score(o.text,q), this.score(o.desc,q))}))
          .filter(x=>x.s>=0)
          .sort((a,b)=> b.s - a.s)
          .map(x=>x.o);
        return arr;
      },
      openList(){ this.open = true; this.selected = 0; },
      closeList(){ this.open = false; this.pendingChord=''; if(this.chordTimer) { clearTimeout(this.chordTimer); this.chordTimer=null; } },
      prev(){ if(!this.filtered.length) return; this.selected = (this.selected - 1 + this.filtered.length) % this.filtered.length; },
      next(){ if(!this.filtered.length) return; this.selected = (this.selected + 1) % this.filtered.length; },
      choose(idx=this.selected){ const item = this.filtered[idx]; if(!item) return; this.go(item.href); this.closeList(); },
      // Handle chord shortcuts like G then T
      onKey(e){
        if(e.key==='Escape'){ this.closeList(); return; }
        if((e.metaKey||e.ctrlKey) && !e.shiftKey && !e.altKey && e.key.toLowerCase()==='k'){ e.preventDefault(); this.openList(); this.$nextTick(()=> this.$refs.input?.focus()); return; }
        if(e.key==='/'){ e.preventDefault(); this.openList(); this.$nextTick(()=> this.$refs.input?.focus()); return; }
        const k = e.key.length===1 ? e.key.toUpperCase() : e.key;
        // If a chord is pending, try resolve
        if(this.pendingChord){
          const seq = [this.pendingChord, k];
          const foundIdx = this.options.findIndex(o=> JSON.stringify(o.shortcuts)===JSON.stringify(seq));
          if(foundIdx>-1){ this.selected = foundIdx; this.choose(); e.preventDefault(); }
          this.pendingChord=''; if(this.chordTimer){ clearTimeout(this.chordTimer); this.chordTimer=null; }
          return;
        }
        // Start a chord or single-key command
        // If any command has first key === k, start chord
        const hasChordStart = this.options.some(o=>o.shortcuts.length===2 && o.shortcuts[0]===k);
        if(hasChordStart){
          this.pendingChord = k;
          if(this.chordTimer) clearTimeout(this.chordTimer);
          this.chordTimer = setTimeout(()=>{ this.pendingChord=''; this.chordTimer=null; }, 1200);
          e.preventDefault();
          return;
        }
        // Single key command
        const oneIdx = this.options.findIndex(o=>o.shortcuts.length===1 && o.shortcuts[0]===k);
        if(oneIdx>-1){ this.selected = oneIdx; this.choose(); e.preventDefault(); }
      }
    }"
    @keydown.window="onKey($event)"
  >
    <!-- Input -->
    <div class="relative p-2">
      <div class="relative">
        <Search
          class="pointer-events-none absolute top-3.5 left-4 text-zinc-400"
          size="base"
          slot="icon"
        />
        <input
          x-ref="input"
          x-model="query"
          @focus="openList()"
          @keydown.arrow-down.prevent="next()"
          @keydown.arrow-up.prevent="prev()"
          @keydown.enter.prevent="choose()"
          @keydown.escape.prevent="closeList()"
          class="w-full h-12 bg-transparent border rounded-lg pr-14 border-zinc-200 dark:border-zinc-700 text-zinc-800 dark:text-zinc-100 placeholder-zinc-400 dark:placeholder-zinc-500 pl-11 sm:text-sm focus:outline-none focus:border-blue-500 dark:focus:border-blue-400"
          placeholder="Search anything or type a command..."
          autocomplete="off"
          role="combobox"
          :aria-expanded="open"
          aria-controls="options"
          aria-autocomplete="list"
        />
        <!-- kbd hint -->
        <div
          class="pointer-events-none absolute right-2 top-1/2 -translate-y-1/2 hidden sm:flex gap-1 text-[0.70rem] text-zinc-500"
        >
          <kbd
            class="px-1 border rounded bg-zinc-100 dark:bg-zinc-800 border-zinc-200 dark:border-zinc-700"
            >⌘</kbd
          >
          <kbd
            class="px-1 border rounded bg-zinc-100 dark:bg-zinc-800 border-zinc-200 dark:border-zinc-700"
            >K</kbd
          >
        </div>
        <!-- Clear -->
        <button
          type="button"
          x-show="query.length>0"
          @click="query=''; $nextTick(()=> $refs.input?.focus())"
          class="absolute right-[3.25rem] top-1/2 -translate-y-1/2 size-7 inline-flex items-center justify-center rounded-md text-zinc-500 hover:text-zinc-700 hover:bg-zinc-100 dark:hover:bg-white/10"
          aria-label="Clear search"
        >
          <XIcon size="sm" />
        </button>
      </div>
    </div>

    <!-- Pending requests row -->
    <template x-if="open">
      <div class="px-3 py-2">
        <div
          class="px-2 pt-2 text-[0.70rem] font-medium text-zinc-500 dark:text-zinc-300"
        >
          Recent Items <span x-text="requests.length"></span>
        </div>
        <div class="flex pb-2 mt-2 overflow-x-auto overflow-y-auto gap-2">
          <template x-for="r in requests" :key="r.id">
            <div
              class="w-56 px-3 py-2 rounded-lg shrink-0 bg-zinc-50 dark:bg-white/5"
            >
              <div class="inline-flex items-center gap-2">
                <span
                  class="inline-flex items-center justify-center size-7 rounded-full bg-white dark:bg-white/5 dark:text-zinc-300 text-[0.70rem] font-semibold text-zinc-700"
                >
                  <span
                    x-text="r.name.split(' ').map(n=>n[0]).join('').slice(0,2)"
                  ></span>
                </span>
                <span
                  class="text-[0.70rem] px-2 py-0.5 rounded-full bg-blue-100 text-blue-800 outline outline-blue-100 dark:bg-blue-500/15 dark:text-blue-200 dark:outline-blue-500/10"
                  x-text="r.badge"></span>
              </div>
              <div
                class="mt-1 text-[12px] font-medium text-zinc-800 dark:text-zinc-100"
                x-text="r.name"
              >
              </div>
              <div
                class="text-[0.70rem] text-zinc-500 dark:text-zinc-400"
                x-text="r.from + ' → ' + r.to"
              >
              </div>
            </div>
          </template>
        </div>
      </div>
    </template>

    <!-- Shortcuts list -->
    <div class="py-1">
      <div class="px-6 py-1 text-[0.70rem] font-medium text-zinc-500">
        Commands
      </div>
      <ul
        id="options"
        role="listbox"
        class="divide-y divide-zinc-100 dark:divide-zinc-800"
      >
        <template x-for="(opt, idx) in filtered" :key="opt.id">
          <li
            role="option"
            :aria-selected="selected === idx"
            @mouseenter="selected = idx"
            @click="choose(idx)"
            :class="selected === idx ? 'bg-zinc-50 dark:bg-white/5' : ''"
            class="flex items-center justify-between px-6 py-3 cursor-pointer text-zinc-900 dark:text-zinc-50"
          >
            <div class="flex items-center gap-3">
              <div
                class="bg-white rounded-lg size-8 dark:bg-white/5 grid place-items-center ring-1 ring-zinc-200 dark:ring-zinc-700"
              >
                <template x-if="opt.icon==='mail'"><Mail size="sm" /></template>
                <template x-if="opt.icon==='grid'"><Grid size="sm" /></template>
                <template x-if="opt.icon==='tools'"
                  ><Tools size="sm" /></template
                >
                <template x-if="opt.icon==='plus'"><Plus size="sm" /></template>
                <template x-if="opt.icon==='report'"
                  ><Report size="sm" /></template
                >
                <template x-if="opt.icon==='calendar'"
                  ><Calendar size="sm" /></template
                >
              </div>
              <div>
                <div class="text-sm font-medium" x-text="opt.text"></div>
                <div
                  class="text-xs text-zinc-500 dark:text-zinc-400"
                  x-text="opt.desc"
                >
                </div>
              </div>
            </div>
            <!-- Shortcut hint -->
            <div
              class="hidden sm:flex items-center gap-1 text-[0.70rem] text-zinc-600"
            >
              <template x-for="(k, i) in opt.shortcuts" :key="k">
                <span class="inline-flex items-center gap-1">
                  <kbd
                    class="px-1 border rounded bg-zinc-100 dark:bg-zinc-800 border-zinc-200 dark:border-zinc-700 dark:text-zinc-400 text-zinc-600"
                    x-text="k"></kbd>
                </span>
              </template>
            </div>
          </li>
        </template>
        <li
          x-show="filtered.length===0"
          class="px-6 py-6 text-sm italic text-center text-zinc-500"
        >
          No results
        </li>
      </ul>
    </div>

    <!-- Footer help -->
    <div
      class="px-4 py-2 text-[0.70rem] text-zinc-500 dark:text-zinc-400 flex items-center justify-between bg-zinc-50 dark:bg-white/10"
    >
      <div>
        Tip: press <kbd
          class="px-1 border rounded bg-zinc-100 dark:bg-zinc-800 border-zinc-200 dark:border-zinc-700 dark:text-zinc-400 text-zinc-600"
          >/</kbd
        > to explore commands
      </div>
      <div class="items-center hidden sm:flex gap-2">
        <span class="flex items-center gap-1"
          ><kbd
            class="px-1 border rounded bg-zinc-100 dark:bg-zinc-800 border-zinc-200 dark:border-zinc-700 dark:text-zinc-400 text-zinc-600"
            >↑</kbd
          ><kbd
            class="px-1 border rounded bg-zinc-100 dark:bg-zinc-800 border-zinc-200 dark:border-zinc-700 dark:text-zinc-400 text-zinc-600"
            >↓</kbd
          > to navigate</span
        >
        <span class="flex items-center gap-1"
          ><kbd
            class="px-1 border rounded bg-zinc-100 dark:bg-zinc-800 border-zinc-200 dark:border-zinc-700 dark:text-zinc-400 text-zinc-600"
            >↵</kbd
          > to select</span
        >
      </div>
    </div>
  </div>
  <!-- Copy:end -->
</div>
