---
// Transition utility classes referenced by x-transition should not be obfuscated
export const excludeFromObfuscation = [
  "translate-y-2",
  "translate-y-0",
  "sm:translate-x-2",
  "sm:translate-x-0",
  "opacity-0",
  "opacity-100",
];
import Check from "@/components/fundations/icons/Check.astro";
import CircleInfo from "@/components/fundations/icons/CircleInfo.astro";
import AlertTriangle from "@/components/fundations/icons/AlertTriangle.astro";
import X from "@/components/fundations/icons/X.astro";
import Button from "@/components/fundations/buttons/Button.astro";
import IconButton from "@/components/fundations/buttons/IconButton.astro";
import Text from "@/components/fundations/typography/Text.astro";
---

<div
  class="flex items-center justify-center p-8 py-40 bg-white lg:py-56 dark:bg-zinc-900"
>
  <!-- copy:start -->
  <!-- 
// Make sure to change  "open: false",  to  open: true. On the z-data="{}".
//
//Programmatic usage:
//
// window.dispatchEvent(new CustomEvent('notify', {
//  detail: { type:'success', title:'Saved', message:'All good', timeout: 4000 }
// }))
-->
  <div
    class="w-full max-w-xl mx-auto"
    x-data="{
      open: true,
      type: 'success', // success | info | warning | error
      title: 'Success!',
      message: 'Coffee has been successfully refilled.',
      timeout: 4000,
      timer: null,
      show(payload = {}) {
        // Merge defaults and payload
        const d = { type:'success', title:this.title, message:this.message, timeout:this.timeout, ...payload };
        this.type = d.type; this.title = d.title; this.message = d.message; this.timeout = d.timeout;
        this.open = true;
        this.startTimer();
      },
      close(){ this.open = false; this.clearTimer(); },
      clearTimer(){ if(this.timer){ clearTimeout(this.timer); this.timer = null; } },
      startTimer(){ this.clearTimer(); if(this.timeout !== false){ this.timer = setTimeout(()=> this.close(), Number(this.timeout)||4000); } }
    }"
    x-init="window.addEventListener('notify', (e) => show(e.detail||{}))"
  >
    <!-- Demo triggers (optional) -->
    <div class="flex flex-wrap items-center justify-center gap-2">
      <Button
        variant="muted"
        size="sm"
        @click="show({ type:'success', title:'Saved', message:'Changes stored.' })"
        >Success</Button
      >
      <Button
        variant="muted"
        size="sm"
        @click="show({ type:'info', title:'Heads up', message:'New version available.' })"
        >Info</Button
      >
      <Button
        variant="muted"
        size="sm"
        @click="show({ type:'warning', title:'Check access', message:'Some users lost permissions.' })"
        >Warning</Button
      >
      <Button
        variant="muted"
        size="sm"
        @click="show({ type:'error', title:'Sync failed', message:'Could not reach the server.' })"
        >Error</Button
      >
    </div>
    <!-- Live region rendered permanently; panel is toggled inside -->
    <div
      aria-live="assertive"
      class="fixed inset-0 flex items-end px-4 py-6 pointer-events-none sm:items-start sm:p-6"
    >
      <div class="flex flex-col items-center w-full space-y-4 sm:items-end">
        <!-- Panel -->
        <div
          x-show="open"
          x-transition:enter="transform ease-out duration-300"
          x-transition:enter-start="translate-y-2 opacity-0 sm:translate-x-2 sm:translate-y-0"
          x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
          x-transition:leave="transition ease-in duration-150"
          x-transition:leave-start="opacity-100"
          x-transition:leave-end="opacity-0"
          @mouseenter="clearTimer()"
          @mouseleave="startTimer()"
          class="w-full max-w-sm bg-white rounded-lg shadow-lg pointer-events-auto outline-1 outline-black/5 transition dark:bg-zinc-800 dark:-outline-offset-1 dark:outline-white/10"
          role="status"
          aria-live="polite"
        >
          <div class="p-4">
            <div class="flex items-start">
              <div class="shrink-0">
                <template x-if="type==='success'"
                  ><div class="text-emerald-500">
                    <Check size="base" />
                  </div></template
                >
                <template x-if="type==='info'"
                  ><div class="text-blue-500">
                    <CircleInfo size="base" />
                  </div></template
                >
                <template x-if="type==='warning'"
                  ><div class="text-amber-500">
                    <AlertTriangle size="base" />
                  </div></template
                >
                <template x-if="type==='error'"
                  ><div class="text-rose-500">
                    <AlertTriangle size="base" />
                  </div></template
                >
              </div>
              <div class="ml-3 w-0 flex-1 pt-0.5">
                <Text
                  tag="p"
                  variant="textSM"
                  class="font-medium text-zinc-900 dark:text-white"
                  x-text="title"
                />
                <Text
                  tag="p"
                  variant="textSM"
                  class="mt-1 text-zinc-500 dark:text-zinc-400 text-pretty"
                  x-text="message"
                />
              </div>
              <div class="flex ml-4 shrink-0">
                <IconButton
                  variant="muted"
                  size="xxs"
                  type="button"
                  @click="close()"
                >
                  <span class="sr-only">Close</span>
                  <X size="sm" />
                </IconButton>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- copy:end -->
</div>
