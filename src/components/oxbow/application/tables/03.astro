---
export const excludeFromObfuscation = [
  "bg-zinc-50",
  "border-zinc-200",
  "text-zinc-700",
  "tabular-nums",
  "ring-1",
  "ring-zinc-200",
];

import ChevronUp from "@/components/fundations/icons/ChevronUp.astro";
import ChevronDown from "@/components/fundations/icons/ChevronDown.astro";
import Button from "@/components/fundations/buttons/Button.astro";
---

<div class="flex flex-col justify-center p-8 mx-auto bg-white dark:bg-zinc-900">
  <!-- Usable data table: filters + sorting + pagination -->
  <div
    x-data="{ sortKey:'name', sortDir:'asc', page:1, size:5,
    rows:[
      { name:'Alex Thompson', email:'a.tompson@company.com', location:'San Francisco, US', status:'Inactive', balance:1750 },
      { name:'James Wilson', email:'j.wilson@company.com', location:'London, UK', status:'Inactive', balance:650 },
      { name:'Lars Nielsen', email:'l.nielsen@company.com', location:'Stockholm, SE', status:'Active', balance:1000 },
      { name:'Maria Garcia', email:'m.garcia@company.com', location:'Madrid, Spain', status:'Active', balance:0 },
      { name:'Sarah Chen', email:'sarah.c@company.com', location:'Singapore', status:'Active', balance:600 },
      { name:'David Kim', email:'d.kim@company.com', location:'Seoul, KR', status:'Active', balance:1000 },
      { name:'Emma Laurent', email:'e.laurent@company.com', location:'Berlin, DE', status:'Active', balance:1200 },
    ],
    setSort(k){ if(this.sortKey===k) this.sortDir=this.sortDir==='asc'?'desc':'asc'; else { this.sortKey=k; this.sortDir='asc'; } this.page=1; },
    sorted(){ const a=[...this.rows]; const k=this.sortKey; const dir=this.sortDir==='asc'?1:-1; return a.sort((x,y)=>(x[k]>y[k]?1:-1)*dir); },
    total(){ return this.sorted().length; },
    pages(){ return Math.max(1, Math.ceil(this.total()/this.size)); },
    pageRows(){ const s=(this.page-1)*this.size; return this.sorted().slice(s,s+this.size); }
  }"
    class="flow-root max-w-7xl mx-auto"
  >
    <!-- Filter/search removed -->
    <div class="overflow-x-auto">
      <div class="flex flex-col justify-center">
        <table class="min-w-[900px] text-sm bg-white dark:bg-zinc-900">
          <thead
            class="bg-zinc-100 dark:bg-zinc-800 border-b border-zinc-200 dark:border-zinc-700"
          >
            <tr>
              <th
                class="px-3 py-2 text-left font-medium text-zinc-700 dark:text-zinc-100"
              >
                <button
                  @click="setSort('name')"
                  class="hover:underline flex items-center gap-1"
                >
                  Name
                  <template x-if="sortKey==='name'">
                    <span>
                      <template x-if="sortDir==='asc'"
                        ><ChevronUp size="sm" /></template
                      >
                      <template x-if="sortDir==='desc'"
                        ><ChevronDown size="sm" /></template
                      >
                    </span>
                  </template>
                </button>
              </th>
              <th
                class="px-3 py-2 text-left font-medium text-zinc-700 dark:text-zinc-100"
                ><button @click="setSort('email')" class="hover:underline"
                  >Email <span
                    x-text="sortKey==='email'?(sortDir==='asc'?'▲':'▼'):''"
                  ></span></button
                ></th
              >
              <th
                class="px-3 py-2 text-left font-medium text-zinc-700 dark:text-zinc-100"
                >Location</th
              >
              <th
                class="px-3 py-2 text-left font-medium text-zinc-700 dark:text-zinc-100"
                >Status</th
              >
              <th
                class="px-3 py-2 text-right font-medium text-zinc-700 dark:text-zinc-100"
                ><button @click="setSort('balance')" class="hover:underline"
                  >Balance <span
                    x-text="sortKey==='balance'?(sortDir==='asc'?'▲':'▼'):''"
                  ></span></button
                ></th
              >
            </tr>
          </thead>
          <tbody>
            <template x-for="r in pageRows()" :key="r.email">
              <tr class="even:bg-zinc-50 dark:even:bg-zinc-800">
                <td
                  class="px-3 py-2 text-zinc-700 dark:text-zinc-100 font-medium"
                  x-text="r.name"></td>
                <td
                  class="px-3 py-2 text-zinc-500 dark:text-zinc-300"
                  x-text="r.email"></td>
                <td
                  class="px-3 py-2 text-zinc-500 dark:text-zinc-300"
                  x-text="r.location"></td>
                <td
                  class="px-3 py-2"
                  :class="r.status==='Active' ? 'text-emerald-600 dark:text-emerald-400' : r.status==='Inactive' ? 'text-red-600 dark:text-red-400' : 'text-yellow-600 dark:text-yellow-400'"
                  x-text="r.status"></td>
                <td
                  class="px-3 py-2 text-right tabular-nums text-zinc-700 dark:text-zinc-100 font-mono font-medium"
                  x-text="Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(r.balance)"
                ></td>
              </tr>
            </template>
            <tr x-show="pageRows().length===0"
              ><td
                class="px-3 py-6 text-center text-zinc-500 dark:text-zinc-300"
                colspan="5">No results</td
              ></tr
            >
          </tbody>
        </table>
        <div
          class="flex items-center justify-between p-3 border-t border-zinc-200 dark:border-zinc-700"
        >
          <div class="text-zinc-900 dark:text-zinc-100 text-sm font-mono">
            <span x-text="(page-1)*size + 1"></span> – <span
              x-text="Math.min(page*size,total())"></span> of <span
              x-text="total()"></span>
          </div>
          <div class="flex items-center gap-1">
            <Button
              size="xs"
              variant="muted"
              :disabled="page<=1"
              @click="page=1">First</Button
            >
            <Button
              size="xs"
              variant="muted"
              :disabled="page<=1"
              @click="page=page-1">Prev</Button
            >
            <Button
              size="xs"
              variant="muted"
              :disabled="page>=pages()"
              @click="page=page+1">Next</Button
            >
            <Button
              size="xs"
              variant="muted"
              :disabled="page>=pages()"
              @click="page=pages()">Last</Button
            >
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
