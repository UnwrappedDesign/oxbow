---
// Compact playground card for small components rendered in grids
import { Code } from "astro:components";
import * as prettier from "prettier";
import { canSeeCode } from "@/utils/canSeeCode";
import { getUserThemeColor } from "@/utils/getUserTheme";
import Eye from "@/components/fundations/icons/Eye.astro";
import Check from "@/components/fundations/icons/Check.astro";
import CodeIcon from "@/components/fundations/icons/Code.astro";
import Mobile from "@/components/fundations/icons/Mobile.astro";
import Tablet from "@/components/fundations/icons/Tablet.astro";
import Desktop from "@/components/fundations/icons/Desktop.astro";
import Button from "@/components/fundations/buttons/Button.astro";
import Download from "@/components/fundations/icons/Download.astro";
import DownloadButton from "@/components/playground/DownloadButton.astro";
import Clipboard from "@/components/fundations/icons/Clipboard.astro";
interface Props {
  componentIndex: number;
  componentPath: string; // like components/oxbow/application/buttons/01.astro
  freeComponent?: boolean;
}
const {
  componentIndex,
  componentPath,
  freeComponent = false,
} = Astro.props as Props;
const user = Astro.locals.user;
const canSee = canSeeCode(user, freeComponent);
const userThemeColor = getUserThemeColor(user, "blue", Astro);
// Always render slot HTML for code copy, but preview now uses an iframe
const rawSlotHtml = await Astro.slots.render("default");
const slotCode = canSee ? rawSlotHtml : "";
// Extract copy region using the same convention as Playground
let code = "";
if (canSee) {
  const startMarker = /<!--\s*copy:start\s*-->/i;
  const endMarker = /<!--\s*copy:end\s*-->/i;
  if (startMarker.test(slotCode) && endMarker.test(slotCode)) {
    const start = slotCode.search(startMarker);
    const afterStart = slotCode.slice(start).replace(startMarker, "");
    code = afterStart.split(endMarker)[0] || "";
  }
  if (!code) {
    // Typography special-case: copy just <Text>...</Text>
    if (/\/typography\//i.test(componentPath)) {
      const m = slotCode.match(/<Text[\s\S]*?<\/Text>/);
      if (m) code = m[0];
    }
  }
  if (!code) {
    // Light wrapper strip
    let s = slotCode;
    s = s.replace(/^\s*<section[^>]*>/i, "").replace(/<\/section>\s*$/i, "");
    s = s.replace(/^\s*<div[^>]*>/i, "").replace(/<\/div>\s*$/i, "");
    code = s || slotCode;
  }
}
let ppcode = "";
if (canSee) {
  try {
    ppcode = await prettier.format(code, { parser: "html" });
  } catch (error) {
    console.error(`Prettier formatting failed for ${componentPath}:`, error);
    // Fall back to unformatted code
    ppcode = code;
  }
}
// Preview will render via same-origin iframe at /iframe/[...componentPath]
const iframeCardSrc = `/iframe/${componentPath}?iframeId=card-${componentIndex}&context=card`;
---

<section
  x-data=`{ tab: 'preview', copied: false, containerWidth: '100%', viewportSize: 'desktop', dragging: false, startX: 0, startWidth: 0, iframeId: 'card-${componentIndex}', iframeHeight: 0 }`
  class="isolate flex flex-col relative h-auto h-full"
>
  <div class="flex items-center justify-between gap-2 shrink-0 w-full py-2">
    <Button
      onlyIconSize="xxs"
      variant="alternative"
      class="shadow-base-500/50"
      href={`#${componentIndex}`}
    >
      <span class="text-xs">{componentIndex}</span>
    </Button>
    <div class="flex items-center gap-1">
      <span class="hidden md:inline-flex gap-1">
        <Button
          onlyIconSize="xxs"
          variant="alternative"
          x-on:click="viewportSize = 'mobile'; containerWidth = '375px'"
          :class="viewportSize === 'mobile' ? 'outline-base-100' : ''"
        >
          <Mobile slot="left-icon" size="sm" />
        </Button>
        <Button
          onlyIconSize="xxs"
          variant="alternative"
          x-on:click="viewportSize = 'tablet'; containerWidth = '768px'"
          :class="viewportSize === 'tablet' ? 'outline-base-100' : ''"
        >
          <Tablet slot="left-icon" size="sm" />
        </Button>
        <Button
          onlyIconSize="xxs"
          variant="alternative"
          x-on:click="viewportSize = 'desktop'; containerWidth = '100%'"
          :class="viewportSize === 'desktop' ? 'outline-base-100' : ''"
        >
          <Desktop slot="left-icon" size="sm" />
        </Button>
      </span>
      <div
        aria-hidden="true"
        class="mx-1 h-4 w-[1px] bg-zinc-200 hidden md:inline-block"
      >
      </div> 
      <Button
        onlyIconSize="xxs"
        variant="alternative"
        class="shadow-base-500/50"
        x-on:click="tab='preview'"
        :class="tab==='preview' && ''"
        title="Preview"
        aria-label="Preview"
      >
        <Eye slot="left-icon" size="sm" />
      </Button>
      {(user || freeComponent) && (
        <Button
          onlyIconSize="xxs"
          variant="alternative"
          class="shadow-base-500/50"
          x-on:click="tab='code'"
          :class="tab==='code' && ''"
          title="Code"
          aria-label="Code"
        >
          <CodeIcon slot="left-icon" size="sm" />
        </Button>
      )}
      <Button
        onlyIconSize="xxs"
        variant="alternative"         
        class="shadow-base-500/50"
        x-on:click="$clipboard($refs.code?.innerText||''); copied = true; setTimeout(() => copied = false, 2000)"
        title="Copy"
        aria-label="Copy"
      >
        <Clipboard x-show="!copied" slot="left-icon" size="sm" />
        <Check x-show="copied" slot="right-icon" size="sm" />
      </Button>
      {
        (user || freeComponent) && (
          <DownloadButton
            componentIndex={componentIndex}
            componentPath={componentPath}
            code={ppcode}
          />
        )
      }
    </div>
  </div>
  <div
    class="flex flex-col items-start justify-start scrollbar-hide h-full min-h-0 rounded-xl bg-white shadow-normal shadow-base-500/10 overflow-hidden"
  >
    <div
      x-show="tab==='preview'"
      class="w-full flex flex-col justify-center items-center h-full min-h-0 leading-none overflow-visible transition-all duration-500 ease-in-out p-0 scrollbar-hide"
    >
      <div
        class="w-full flex flex-col  h-fit min-h-0 leading-none overflow-hidden transition-all duration-500 ease-in-out p-0 scrollbar-hide"
      >
        <div class="relative">
          <div
            class="bg-white text-base transition-all h-full overflow-visible"
            x-bind:style="{
              width: containerWidth,
              minWidth: '0px',
              maxWidth: '100%'
            }"
            x-ref="resizable"
          >
            <iframe
              :id="iframeId"
              data-src={iframeCardSrc}
              class="block w-full border-0"
              title={`Preview ${componentPath}`}
              loading="lazy"
              fetchpriority="low"
              :style="`height: ${Math.max(iframeHeight||0, 240)}px; transition: height 250ms ease-in-out;`"
              x-intersect.margin.200px.once="$el.src = $el.dataset.src; $el.removeAttribute('data-src')"
              x-on:load="
                try { $event.target.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e) {}
                setTimeout(() => { try { $event.target.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e) {} }, 50);
                setTimeout(() => { try { $event.target.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e) {} }, 200);
              "
              x-init="
                window.addEventListener('message', (e) => {
                  if(e.data && e.data.type==='oxbow-iframe-height' && e.data.id === iframeId){ iframeHeight = e.data.height; }
                });
              "
            ></iframe>
          </div>
          <!-- Resizer buttons restored; no drag handle -->
        </div>
      </div>
    </div>
    {(user || freeComponent) && (
      <div
        x-show="tab==='code'"
        class="code-pane size-full overflow-auto p-3 text-xs bg-white rounded-xl"
        x-ref="code"
      >
        <Code
          code={ppcode}
          lang="html"
          theme="css-variables"
          class="scrollbar-hide"
        />
      </div>
    )}
  </div>
</section>
<style>
  :global(.code-pane pre) {
    white-space: pre;
    overflow-x: auto;
    overflow-y: hidden;
    word-break: normal;
    word-wrap: normal;
  }
  :global(.code-pane code) {
    white-space: inherit;
  }
</style>
