---
// Compact playground card for small components rendered in grids
import { Code } from "astro:components";
import * as prettier from "prettier";
import { canSeeCode } from "@/utils/canSeeCode";
import { getUserThemeColor } from "@/utils/getUserTheme";
import Eye from "@/components/fundations/icons/Eye.astro";
import Check from "@/components/fundations/icons/Check.astro";
import Mobile from "@/components/fundations/icons/Mobile.astro";
import Tablet from "@/components/fundations/icons/Tablet.astro";
import CodeIcon from "@/components/fundations/icons/Code.astro";
import Button from "@/components/fundations/buttons/Button.astro";
import Desktop from "@/components/fundations/icons/Desktop.astro";
import Download from "@/components/fundations/icons/Download.astro";
import Clipboard from "@/components/fundations/icons/Clipboard.astro";
interface Props {
  componentIndex: number;
  componentPath: string; // like components/oxbow/application/buttons/01.astro
  freeComponent?: boolean;
}
const {
  componentIndex,
  componentPath,
  freeComponent = false,
} = Astro.props as Props;
const user = Astro.locals.user;
const canSee = canSeeCode(user, freeComponent);
const userThemeColor = getUserThemeColor(user, "blue", Astro);
const slotCode = canSee ? await Astro.slots.render("default") : "";
// Extract copy region using the same convention as Playground
let code = "";
if (canSee) {
  const startMarker = /<!--\s*copy:start\s*-->/i;
  const endMarker = /<!--\s*copy:end\s*-->/i;
  if (startMarker.test(slotCode) && endMarker.test(slotCode)) {
    const start = slotCode.search(startMarker);
    const afterStart = slotCode.slice(start).replace(startMarker, "");
    code = afterStart.split(endMarker)[0] || "";
  }
  if (!code) {
    // Typography special-case: copy just <Text>...</Text>
    if (/\/typography\//i.test(componentPath)) {
      const m = slotCode.match(/<Text[\s\S]*?<\/Text>/);
      if (m) code = m[0];
    }
  }
  if (!code) {
    // Light wrapper strip
    let s = slotCode;
    s = s.replace(/^\s*<section[^>]*>/i, "").replace(/<\/section>\s*$/i, "");
    s = s.replace(/^\s*<div[^>]*>/i, "").replace(/<\/div>\s*$/i, "");
    code = s || slotCode;
  }
}
let ppcode = "";
if (canSee) {
  try {
    ppcode = await prettier.format(code, { parser: "html" });
  } catch (error) {
    console.error(`Prettier formatting failed for ${componentPath}:`, error);
    // Fall back to unformatted code
    ppcode = code;
  }
}
---

<section
  x-data="{ tab: 'preview', copied: false, viewportSize: 'desktop' }"
  class="isolate flex flex-col relative h-auto h-full"
>
  <div
    class="flex items-center justify-between gap-2 shrink-0 w-full py-2"
  >
    <Button
      onlyIconSize="xxs"
      variant="alternative"
      href={`#${componentIndex}`}
    >
      <span class="text-xs">{componentIndex}</span>
    </Button>
    <div class="flex items-center gap-1">
      <span class="hidden md:inline-flex gap-1">
        <Button
          onlyIconSize="xxs"
          variant="alternative"
          x-on:click="viewportSize = 'mobile'"
          :class="viewportSize === 'mobile' ? 'outline-base-100' : ''"
        >
          <Mobile slot="left-icon" size="sm" />
        </Button>
        <Button
          onlyIconSize="xxs"
          variant="alternative"
          x-on:click="viewportSize = 'tablet'"
          :class="viewportSize === 'tablet' ? 'outline-base-100' : ''"
        >
          <Tablet slot="left-icon" size="sm" />
        </Button>
        <Button
          onlyIconSize="xxs"
          variant="alternative"
          x-on:click="viewportSize = 'desktop'"
          :class="viewportSize === 'desktop' ? 'outline-base-100' : ''"
        >
          <Desktop slot="left-icon" size="sm" />
        </Button>
      </span>
      <div
        aria-hidden="true"
        class="mx-1 h-4 w-[1px] bg-zinc-200 hidden md:inline-block"
      >
      </div>
      <Button
        onlyIconSize="xxs"
        variant="alternative"
        class="text-base-500"
        x-on:click="tab='preview'"
        :class="tab==='preview' && 'outline-base-100'"
        title="Preview"
        aria-label="Preview"
      >
        <Eye slot="left-icon" size="sm" />
      </Button>
      <Button
        onlyIconSize="xxs"
        variant="alternative"
        class="text-base-500"
        x-on:click="tab='code'"
        :class="tab==='code' && 'outline-base-100'"
        title="Code"
        aria-label="Code"
      >
        <CodeIcon slot="left-icon" size="sm" />
      </Button>
      <Button
        onlyIconSize="xxs"
        variant="alternative"
        class="text-base-500"
        x-on:click="$clipboard($refs.code?.innerText||''); copied = true; setTimeout(() => copied = false, 2000)"
        title="Copy"
        aria-label="Copy"
      >
        <Clipboard x-show="!copied" slot="left-icon" size="sm" />
        <Check x-show="copied" slot="right-icon" size="sm" />
      </Button>
      {
        (user || freeComponent) && canSee && (
          <>
            <Button
              onlyIconSize="xxs"
              variant="alternative"
              class="text-base-500"
              type="button"
              class="download-btn"
              data-download-index={componentIndex}
              data-download-path={componentPath}
              title="Download code"
              aria-label="Download code"
              style="height: 28px;"
            >
              <Download slot="left-icon" size="sm" />
            </Button>
            <pre
              class="download-code"
              data-download-index={componentIndex}
              style="display:none"
            >
              {ppcode}
            </pre>
          </>
        )
      }
    </div>
  </div>
  <div
    class="flex flex-col items-start justify-start scrollbar-hide h-full min-h-0 rounded-xl shadow-oxbow bg-white overflow-hidden"
  >
    <div
      x-show="tab==='preview'"
      class="w-full flex flex-col justify-center items-center h-full min-h-0 leading-none overflow-visible transition-all duration-500 ease-in-out p-0"
    >
      <div
        class="w-full flex flex-col h-auto min-h-0 leading-none overflow-visible transition-all duration-500 ease-in-out p-0"
        :class="{ 'max-w-sm': viewportSize === 'mobile', 'max-w-screen-md': viewportSize === 'tablet','max-w-full': viewportSize === 'desktop' }"
      >
        <iframe
          x-intersect.once="$el.src = $el.dataset.src"
          id={`card-iframe-${componentIndex}`}
          x-bind:style="{
            width: viewportSize === 'mobile' ? '375px' : viewportSize === 'tablet' ? '768px' : '100%',
            minWidth: '0',
            maxWidth: '100%',
            border: 'none',
            background: 'white',
            overflow: 'auto',
            transition: 'width 0.3s cubic-bezier(.4,0,.2,1)',
            display: 'block',
            verticalAlign: 'top',
            margin: '0',
            padding: '0',
          }"
          width="100%"
          class="min-h-0 leading-none"
          data-src={`/iframe/${componentPath.startsWith("/") ? componentPath : "/" + componentPath}?iframeId=card-iframe-${componentIndex}`}
          allowfullscreen
          loading="lazy"></iframe>
      </div>
      <script is:inline>
        window.addEventListener("message", (e) => {
          const d = e.data;
          if (!d || d.type !== "oxbow-iframe-height") return;
          const iframe = document.getElementById(d.id);
          if (iframe) iframe.style.height = (d.height || 80) + "px";
        });
      </script>
    </div>
    {
      canSee && (
        <div
          x-show="tab==='code'"
          class="code-pane size-full overflow-auto p-3 text-[0.65rem] bg-white rounded-xl outline outline-base-200 shadow-oxbow"
          x-ref="code"
        >
          <Code
            code={ppcode}
            lang="html"
            theme="css-variables"
            class="scrollbar-hide"
          />
        </div>
      )
    }
  </div>
</section>
<style>
  :global(.code-pane pre) {
    white-space: pre;
    overflow-x: auto;
    overflow-y: hidden;
    word-break: normal;
    word-wrap: normal;
  }
  :global(.code-pane code) {
    white-space: inherit;
  }
</style>
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".download-btn").forEach(function (btn) {
      btn.addEventListener("click", function () {
        var idx = btn.getAttribute("data-download-index");
        var path = btn.getAttribute("data-download-path");
        var codeEl = document.querySelector(
          '.download-code[data-download-index="' + idx + '"]',
        );
        if (!codeEl) return;
        var content = codeEl.textContent;
        if (!content) return;
        var blob = new Blob([content], { type: "text/html" });
        var url = URL.createObjectURL(blob);
        var a = document.createElement("a");
        a.href = url;
        a.download =
          (path.split("/").pop().replace(".astro", "") || "component") +
          ".html";
        document.body.appendChild(a);
        a.click();
        setTimeout(function () {
          URL.revokeObjectURL(url);
          a.remove();
        }, 100);
      });
    });
  });
</script>
