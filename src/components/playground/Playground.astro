---
// Fundations
import Button from "@/components/fundations/buttons/Button.astro";
import Eye from "@/components/fundations/icons/Eye.astro";
import Check from "@/components/fundations/icons/Check.astro";
import CodeIcon from "@/components/fundations/icons/Code.astro";
import Mobile from "@/components/fundations/icons/Mobile.astro";
import Tablet from "@/components/fundations/icons/Tablet.astro";
import Desktop from "@/components/fundations/icons/Desktop.astro";
import Clipboard from "@/components/fundations/icons/Clipboard.astro";
import Download from "../fundations/icons/Download.astro";

// Components
import { Code } from "astro:components";
import * as prettier from "prettier";
// Utils
import { getUserThemeColor } from "@/utils/getUserTheme";
import { canSeeCode } from "@/utils/canSeeCode";
interface Props {
  componentIndex: number;
  componentPath: string;
  playgroundRef: string;
  freeComponent?: boolean;
  initialTabIsCode?: boolean;
}
const { componentIndex, componentPath, playgroundRef, freeComponent = false, initialTabIsCode = false } = Astro.props;
const user = Astro.locals.user;
const canSeeCodeValue = canSeeCode(user, freeComponent);
// Get user's theme preference from custom claims
const userThemeColor = getUserThemeColor(user, 'blue', Astro);
// Always render the slot so we can transform it for container queries in preview
const rawSlotCode = await Astro.slots.render("default");
// Allow authors to mark the actual snippet to show/copy using HTML comments
// <!-- copy:start --> ... <!-- copy:end -->
let code = '';
if (canSeeCodeValue) {
  const startMarker = /<!--\s*copy:start\s*-->/i;
  const endMarker = /<!--\s*copy:end\s*-->/i;
  if (startMarker.test(rawSlotCode) && endMarker.test(rawSlotCode)) {
    const startIdx = rawSlotCode.search(startMarker);
    const endIdx = rawSlotCode.search(endMarker);
    if (startIdx > -1 && endIdx > startIdx) {
      const afterStart = rawSlotCode.replace(startMarker, '__COPY_START__');
      const between = afterStart.split('__COPY_START__')[1] || '';
      code = between.split(rawSlotCode.match(endMarker)?.[0] || '<!-- copy:end -->')[0] || '';
    }
  }
  // Fallback to full slot content if no markers were found
  if (!code) {
    // Special case: Typography â€“ copy only the Text component
    if (componentPath && /\/typography\//i.test(componentPath)) {
      const m = rawSlotCode.match(/<Text[\s\S]*?<\/Text>/);
      if (m) {
        code = m[0];
      }
    }
  }
  if (!code) {
    let s = rawSlotCode;
    // Try to strip one outer <section> wrapper
    const hasOuterSection = /^\s*<section[\s\S]*<\/section>\s*$/i.test(s);
    if (hasOuterSection) {
      s = s.replace(/^\s*<section[^>]*>/i, "").replace(/<\/section>\s*$/i, "");
    }
    // Try to strip one outer <div> wrapper
    const hasOuterDiv = /^\s*<div[\s\S]*<\/div>\s*$/i.test(s);
    if (hasOuterDiv) {
      s = s.replace(/^\s*<div[^>]*>/i, "").replace(/<\/div>\s*$/i, "");
    }
    code = s || rawSlotCode;
  }
}
let ppcode = '';
if (canSeeCodeValue) {
  // Always format so the Code tab shows pretty output by default
  ppcode = await prettier.format(code, { parser: 'html' });
}
// Build preview HTML that swaps viewport breakpoints (sm:, md:, ...) to container queries (@sm:, @md:, ...)
// This lets the demo respond to the resizable container instead of the viewport.
// Iframe source for same-origin preview page (align id with param)
const iframeId = `iframe-${componentIndex}`;
const iframeSrc = `/iframe/${componentPath}?iframeId=${iframeId}`;
const theme = ``;
---
<section x-data="playground" x-init="
  $nextTick(() => {
    // Listen for iframe height messages and mirror height into iframe and wrapper
    const ifr = $el.querySelector('iframe');
    const container = $refs.previewContainer;
    const id = ifr ? ifr.id : '';
    const requestHeight = () => {
      try { (ifr as HTMLIFrameElement)?.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch {}
    };
    let lastH = 0;
    const setHeights = (h) => {
      try {
        const hh = Math.max(200, parseInt(h, 10) || 0);
        lastH = hh;
        if (ifr) (ifr as HTMLIFrameElement).style.height = hh + 'px';
        // Mirror height into wrapper so parent adjusts immediately
        if (container) (container as HTMLElement).style.height = hh + 'px';
      } catch {}
    };
    // Same-origin direct measure fallback
    const measureDirect = () => {
      try {
        const d = (ifr as HTMLIFrameElement)?.contentDocument;
        if (!d) return;
        const b = d.body, e = d.documentElement;
        const h = Math.max(
          b?.scrollHeight || 0,
          e?.scrollHeight || 0,
          b?.offsetHeight || 0,
          e?.offsetHeight || 0,
          b?.clientHeight || 0,
          e?.clientHeight || 0,
        );
        if (h) setHeights(h);
      } catch {}
    };
    (function(){
      let _t = null; let _pending = 0;
      window.addEventListener('message', (e) => {
        try {
          if (e.data && e.data.type === 'oxbow-iframe-height' && e.data.id === id) {
            const h = parseInt(e.data.height||0,10) || 0; _pending = h;
            if (_t) return; _t = setTimeout(() => { setHeights(_pending); _t = null; }, 33);
          }
        } catch {}
      });
    })();
    // Fallback: if we haven't received a height shortly after load, request it
    setTimeout(requestHeight, 250);
    setTimeout(() => { if (!lastH || lastH < 150) { measureDirect(); } }, 400);
    // Re-sync on window resize (fonts/layout may change)
    window.addEventListener('resize', () => setTimeout(requestHeight, 50));

    // Helper methods to avoid long inline handlers
    this.openPreview = () => {
      try {
        const ifr = this.$refs.frame || this.$el.closest('section')?.querySelector('iframe');
        if (!ifr) return;
        const rect = this.$refs.previewContainer.getBoundingClientRect();
        const h = parseInt((ifr.style.height||'0').replace('px','')) || Math.ceil(rect.height);
        const w = Math.ceil(rect.width);
        const url = ifr.src || ifr.dataset.src;
        window.open(url, '_blank', 'width=' + w + ',height=' + (h+120) + ',noopener,noreferrer');
      } catch (e) { console.error(e); }
    };
    this.copyImage = async () => {
      try {
        const ifr = this.$refs.frame || this.$el.closest('section')?.querySelector('iframe');
        if (!ifr) return;
        const win = ifr.contentWindow; const doc = ifr.contentDocument; if (!win || !doc) return;
        const ensureLib = () => new Promise((res, rej) => {
          if (win.html2canvas) return res(win.html2canvas);
          const s = doc.createElement('script');
          s.src = 'https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js';
          s.onload = () => res(win.html2canvas); s.onerror = rej; doc.head.appendChild(s);
        });
        const html2canvas = await ensureLib();
        const node = doc.documentElement;
        const canvas = await html2canvas(node, {useCORS:true, backgroundColor:'#ffffff', scale:2, logging:false});
        const blob = await new Promise((r)=> canvas.toBlob(r, 'image/png'));
        if (!blob) return;
        if (navigator.clipboard && window.ClipboardItem) {
          try { await navigator.clipboard.write([new window.ClipboardItem({ 'image/png': blob })]); return; } catch (_) {}
        }
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        try { const base = ('${componentPath}'.split('/').pop() || 'preview').replace('.astro',''); a.download = base + '.png'; } catch(_) { a.download = 'preview.png'; }
        document.body.appendChild(a); a.click();
        setTimeout(() => { URL.revokeObjectURL(a.href); a.remove(); }, 100);
      } catch (e) { console.error('Image copy/download failed', e); }
    };

    // Copy a shareable link with current state (tab + width)
    this.copyShareLink = async () => {
      try {
        const url = new URL(window.location.href);
        // reflect state
        url.searchParams.set('tab', this.tab);
        const rect = this.$refs.previewContainer.getBoundingClientRect();
        url.searchParams.set('w', String(Math.ceil(rect.width)));
        const text = url.toString();
        if (navigator.clipboard?.writeText) await navigator.clipboard.writeText(text);
        else {
          const ta = document.createElement('textarea'); ta.value = text; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); ta.remove();
        }
        this.copied = true; setTimeout(()=> this.copied = false, 1200);
      } catch (e) { console.error('Copy link failed', e); }
    };

    // (Removed RTL/A11y methods)
  })
" data-iframe-id={`iframe-${componentIndex}`}>
  <div class="relative">
    <div class="flex items-center justify-between pb-2 gap-1 ">
      <Button onlyIconSize="xxs" variant="muted"
        href={`#${componentIndex}`}
      >
        <span class="text-xs">{componentIndex}</span>
      </Button>
      <div class="items-center justify-end hidden p-1 bg-white rounded-lg md:flex gap-2">
        <span class="items-center hidden isolate md:inline-flex gap-1">
          <Button onlyIconSize="xxs" variant="alternative"
            @click="viewportSize = 'mobile'; $refs.previewContainer.style.width = '375px'; setTimeout(() => { try { $refs.previewContainer.querySelector('iframe')?.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e){} }, 260);"
            :class="viewportSize === 'mobile' ? 'ring-2 ring-primary-500' : ''">
            <Mobile slot="left-icon" size="sm" />
          </Button>
          <Button onlyIconSize="xxs" variant="alternative"
            @click="viewportSize = 'tablet'; $refs.previewContainer.style.width = '768px'; setTimeout(() => { try { $refs.previewContainer.querySelector('iframe')?.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e){} }, 260);"
            :class="viewportSize === 'tablet' ? 'ring-2 ring-primary-500' : ''">
            <Tablet slot="left-icon" size="sm" />
          </Button>
          <Button onlyIconSize="xxs" variant="alternative"
            @click="viewportSize = 'desktop'; $refs.previewContainer.style.width = '100%'; setTimeout(() => { try { $refs.previewContainer.querySelector('iframe')?.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e){} }, 260);"
            :class="viewportSize === 'desktop' ? 'ring-2 ring-primary-500' : ''">
            <Desktop slot="left-icon" size="sm" />
          </Button>
        </span>
        <div aria-hidden="true" class="mx-1 h-4 w-[1px] bg-zinc-200 hidden md:inline-block"></div>
        {(user || freeComponent) ? (
          <div class="flex items-center gap-1 ">
            <Button onlyIconSize="xxs" variant="alternative" x-on:click="setTab('preview');" :class="tab === 'preview' ? 'outline-base-100' : ''" class="pointer-events-auto !shadow-none">
              <Eye slot="left-icon" size="sm" />
            </Button>
            <Button onlyIconSize="xxs" variant="alternative" x-on:click="setTab('code')" :class="tab === 'code' ? 'outline-base-100' : ''" class="pointer-events-auto !shadow-none">
              <CodeIcon slot="left-icon" size="sm" />
            </Button>
            <Button onlyIconSize="xxs" variant="alternative" class="shadow-base-500/50" x-on:click="copyCode" title="Copy" aria-label="Copy">
              <Clipboard x-show="!copied" slot="left-icon" size="sm" />
              <Check x-show="copied" slot="right-icon" size="sm" />
            </Button>
            <div aria-hidden="true" class="mx-1 h-4 w-[1px]  bg-zinc-200   hidden md:inline-block"></div>
            <Button
              onlyIconSize="xxs"
              variant="muted"
              class="text-base-500"
              type="button"
              title="Download code"
              aria-label="Download code">
                <Download slot="left-icon" size="sm" />
            </Button>
            <pre class="download-code" data-download-index={componentIndex} style="display:none">{ppcode}</pre>
           
            
          </div>
        ) : (
          <Button
            size="xxs"
            variant="default"
            href="/pricing"
            class="pointer-events-auto !shadow-none"
          >
            Get Access
          </Button>
        )}
      </div>
    </div>
  <div
  class="relative min-h-0 w-full flex rounded-xl shadow-oxbow bg-white z-1 overflow-hidden isolate scrollbar-hide"
  >
  <div x-show="tab === 'preview'" class="flex flex-col items-center bg-white w-full scrollbar-hide">
      <div
        x-ref="previewContainer"
        id="playground-preview-container"
        class="bg-white text-base rounded-xl shadow-oxbow border border-base-100 overflow-visible mx-auto w-full flex flex-col scrollbar-hide"
        style="transition: width 250ms ease-in-out;"
     >
        <iframe
          id={iframeId}
          data-src={iframeSrc}
          class="block w-full border-0 scrollbar-hide"
          title={`Preview ${componentPath}`}
          fetchpriority="high"
          style="height: auto; min-height: 200px;"
          x-intersect.margin.200px.once="$el.src = $el.dataset.src; $el.removeAttribute('data-src')"
          x-on:load="
            try { $event.target.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e) {}
            setTimeout(() => { try { $event.target.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e) {} }, 50);
            setTimeout(() => { try { $event.target.contentWindow?.postMessage({ type: 'oxbow-request-height' }, '*'); } catch(e) {} }, 200);
          "
        ></iframe>
      </div>
    </div>
    {(user || freeComponent) && (
      <div
        x-show="tab === 'code'"
        x-ref="code"
        class="code-pane flex-grow p-4 text-xs bg-white size-full selection:bg-zinc-100"
      >
        <Code code={ppcode} lang="html" theme="css-variables" class="scrollbar-hide"/>
      </div>
    )}
  </div>
  </div>
</section>
<style>
  :global(.code-pane pre) {
    white-space: pre;
    overflow-x: auto;
    overflow-y: hidden;
    word-break: normal;
    word-wrap: normal;
  }
  :global(.code-pane code) {
    white-space: inherit;
  }
</style>
<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.download-btn').forEach(function(btn) {
      btn.addEventListener('click', function() {
        var idx = btn.getAttribute('data-download-index');
        var path = btn.getAttribute('data-download-path');
        var codeEl = document.querySelector('.download-code[data-download-index="' + idx + '"]');
        if (!codeEl) return;
        var content = codeEl.textContent;
        if (!content) return;
        var blob = new Blob([content], {type: 'text/html'});
        var url = URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.href = url;
        a.download = (path.split('/').pop().replace('.astro', '') || 'component') + '.html';
        document.body.appendChild(a);
        a.click();
        setTimeout(function() { URL.revokeObjectURL(url); a.remove(); }, 100);
      });
    });
  });
</script>
