---
// Fundations
import Button from "@/components/fundations/buttons/Button.astro";
import Download from "@/components/fundations/icons/Download.astro";
import Mobile from "@/components/fundations/icons/Mobile.astro";
import Tablet from "@/components/fundations/icons/Tablet.astro";
import Desktop from "@/components/fundations/icons/Desktop.astro";
// Components
import { Code } from "astro:components";
import * as prettier from "prettier";
// Utils
import { getUserThemeColor } from "@/utils/getUserTheme";
import { canSeeCode } from "@/utils/canSeeCode";
interface Props {
  componentIndex: number;
  componentPath: string;
  playgroundRef: string;
  freeComponent?: boolean;
  initialTabIsCode?: boolean;
}
const { componentIndex, componentPath, playgroundRef, freeComponent = false, initialTabIsCode = false } = Astro.props;
const user = Astro.locals.user;
const canSeeCodeValue = canSeeCode(user, freeComponent);
// Get user's theme preference from custom claims
const userThemeColor = getUserThemeColor(user, 'blue', Astro);
// Always render the slot so we can transform it for container queries in preview
const rawSlotCode = await Astro.slots.render("default");
// Allow authors to mark the actual snippet to show/copy using HTML comments
// <!-- copy:start --> ... <!-- copy:end -->
let code = '';
if (canSeeCodeValue) {
  const startMarker = /<!--\s*copy:start\s*-->/i;
  const endMarker = /<!--\s*copy:end\s*-->/i;
  if (startMarker.test(rawSlotCode) && endMarker.test(rawSlotCode)) {
    const startIdx = rawSlotCode.search(startMarker);
    const endIdx = rawSlotCode.search(endMarker);
    if (startIdx > -1 && endIdx > startIdx) {
      const afterStart = rawSlotCode.replace(startMarker, '__COPY_START__');
      const between = afterStart.split('__COPY_START__')[1] || '';
      code = between.split(rawSlotCode.match(endMarker)?.[0] || '<!-- copy:end -->')[0] || '';
    }
  }
  // Fallback to full slot content if no markers were found
  if (!code) {
    // Special case: Typography â€“ copy only the Text component
    if (componentPath && /\/typography\//i.test(componentPath)) {
      const m = rawSlotCode.match(/<Text[\s\S]*?<\/Text>/);
      if (m) {
        code = m[0];
      }
    }
  }
  if (!code) {
    let s = rawSlotCode;
    // Try to strip one outer <section> wrapper
    const hasOuterSection = /^\s*<section[\s\S]*<\/section>\s*$/i.test(s);
    if (hasOuterSection) {
      s = s.replace(/^\s*<section[^>]*>/i, "").replace(/<\/section>\s*$/i, "");
    }
    // Try to strip one outer <div> wrapper
    const hasOuterDiv = /^\s*<div[\s\S]*<\/div>\s*$/i.test(s);
    if (hasOuterDiv) {
      s = s.replace(/^\s*<div[^>]*>/i, "").replace(/<\/div>\s*$/i, "");
    }
    code = s || rawSlotCode;
  }
}
let ppcode = '';
if (canSeeCodeValue) {
  // Always format so the Code tab shows pretty output by default
  ppcode = await prettier.format(code, { parser: 'html' });
}
// Build preview HTML that swaps viewport breakpoints (sm:, md:, ...) to container queries (@sm:, @md:, ...)
// This lets the demo respond to the resizable container instead of the viewport.
// Iframe source for same-origin preview page
const iframeId = `play-${componentIndex}`;
const iframeSrc = `/iframe/${componentPath}?iframeId=${iframeId}`;
const theme = ``;
---
<section x-data="playground" x-init="
  $nextTick(() => {
    // Listen for iframe height messages and adjust this iframe only
    const ifr = $el.querySelector('iframe');
    const id = ifr ? ifr.id : '';
    window.addEventListener('message', (e) => {
      try {
        if (e.data && e.data.type === 'oxbow-iframe-height' && e.data.id === id) {
          if (ifr) (ifr as HTMLIFrameElement).style.height = Math.max(200, e.data.height) + 'px';
        }
      } catch {}
    });
  })
" data-iframe-id={`iframe-${componentIndex}`}>
  <div class="relative">
    <div class="flex items-center justify-between pb-2 gap-1 ">
      <Button onlyIconSize="xxs" variant="muted"
        href={`#${componentIndex}`}
      >
        <span class="text-xs">{componentIndex}</span>
      </Button>
      <div class="items-center justify-end hidden p-1 bg-white rounded-lg md:flex gap-2">
        <span class="items-center hidden isolate md:inline-flex gap-1">
          <Button onlyIconSize="xxs" variant="muted"
            @click="viewportSize = 'mobile'; $refs.previewContainer.style.width = '375px'"
            :class="viewportSize === 'mobile' ? 'ring-2 ring-primary-500' : ''">
            <Mobile slot="left-icon" size="sm" />
          </Button>
          <Button onlyIconSize="xxs" variant="muted"
            @click="viewportSize = 'tablet'; $refs.previewContainer.style.width = '768px'"
            :class="viewportSize === 'tablet' ? 'ring-2 ring-primary-500' : ''">
            <Tablet slot="left-icon" size="sm" />
          </Button>
          <Button onlyIconSize="xxs" variant="muted"
            @click="viewportSize = 'desktop'; $refs.previewContainer.style.width = '100%'"
            :class="viewportSize === 'desktop' ? 'ring-2 ring-primary-500' : ''">
            <Desktop slot="left-icon" size="sm" />
          </Button>
        </span>
        <div aria-hidden="true" class="mx-1 h-4 w-[1px] bg-zinc-200 hidden md:inline-block"></div>
        {(user || freeComponent) ? (
          <div class="flex items-center gap-1 ">
            <Button
              size="xxs"
              variant="muted"
              x-on:click="setTab('preview');" 
              :class="tab === 'preview' ? ' outline-zinc-100  ' : ''"
              class="pointer-events-auto !shadow-none">
              Preview
            </Button>
            <Button
              size="xxs"
              variant="muted"
              x-on:click="setTab('code')" 
              :class="tab === 'code' ? 'outline-zinc-100  ' : ''"
              class="pointer-events-auto !shadow-none">
              Code
            </Button>
            <div aria-hidden="true" class="mx-1 h-4 w-[1px]  bg-zinc-200   hidden md:inline-block"></div>
            <Button
              size="xxs"
              variant="muted"
              class="w-20 pointer-events-auto !shadow-none"
              x-on:click="copyCode"
            >
              <span
                x-text="copied ? 'Copied!' : 'Copy'"
                class="transition"
              />
            </Button>
            <Button
              onlyIconSize="xxs"
              variant="muted"
              class="text-base-500"
              type="button"
              title="Download code"
              aria-label="Download code">
                <Download slot="left-icon" size="sm" />
            </Button>
            <pre class="download-code" data-download-index={componentIndex} style="display:none">{ppcode}</pre>
          </div>
        ) : (
          <Button
            size="xxs"
            variant="default"
            href="/pricing"
            class="pointer-events-auto !shadow-none"
          >
            Get Access
          </Button>
        )}
      </div>
    </div>
  <div
  class="relative min-h-[400px] w-full flex justify-center items-start rounded-xl shadow-oxbow bg-white z-1 overflow-visible isolate"
  >
  <div x-show="tab === 'preview'" class="flex flex-col items-center bg-white w-full">
      <div class="relative w-full max-w-full">
        <div
          x-ref="previewContainer"
          id="playground-preview-container"
          class="bg-white text-base rounded-xl shadow-oxbow transition-all border border-base-100 overflow-hidden mx-auto w-full"
          style="min-width:0px; max-width:100%; height:auto; margin-left:auto; margin-right:auto;"
        >
          <iframe
            id={iframeId}
            src={iframeSrc}
            class="block w-full border-0"
            style="height: 600px;"
          ></iframe>
        </div>
        <!-- Resizer via buttons only; no drag handle -->
      </div>
    </div>
    {(user || freeComponent) && (
      <div
        x-show="tab === 'code'"
        x-ref="code"
        class="code-pane flex-grow p-4 text-xs bg-base-100 size-full selection:bg-zinc-100"
      >
        <Code code={ppcode} lang="html" theme="css-variables" class="scrollbar-hide"/>
      </div>
    )}
  </div>
  </div>
</section>
<style>
  :global(.code-pane pre) {
    white-space: pre;
    overflow-x: auto;
    overflow-y: hidden;
    word-break: normal;
    word-wrap: normal;
  }
  :global(.code-pane code) {
    white-space: inherit;
  }
</style>
<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.download-btn').forEach(function(btn) {
      btn.addEventListener('click', function() {
        var idx = btn.getAttribute('data-download-index');
        var path = btn.getAttribute('data-download-path');
        var codeEl = document.querySelector('.download-code[data-download-index="' + idx + '"]');
        if (!codeEl) return;
        var content = codeEl.textContent;
        if (!content) return;
        var blob = new Blob([content], {type: 'text/html'});
        var url = URL.createObjectURL(blob);
        var a = document.createElement('a');
        a.href = url;
        a.download = (path.split('/').pop().replace('.astro', '') || 'component') + '.html';
        document.body.appendChild(a);
        a.click();
        setTimeout(function() { URL.revokeObjectURL(url); a.remove(); }, 100);
      });
    });
  });
</script>
