---
// Fundations
import Text from "@/components/fundations/typography/Text.astro";
import Button from "@/components/fundations/buttons/Button.astro";
// Components
import { Code } from "astro:components";
import * as prettier from "prettier";
// Utils
import { getUserThemeColor } from "@/utils/getUserTheme";
import { canSeeCode } from "@/utils/canSeeCode";

interface Props {
  componentIndex: number;
  componentPath: string;
  playgroundRef: string;
  freeComponent?: boolean;
  initialTabIsCode?: boolean;
}
const { componentIndex, componentPath, playgroundRef, freeComponent = false, initialTabIsCode = false } = Astro.props;
const user = Astro.locals.user;
const canSeeCodeValue = canSeeCode(user, freeComponent);

// Get user's theme preference from custom claims
const userThemeColor = getUserThemeColor(user, 'blue', Astro);

const rawSlotCode = canSeeCodeValue ? await Astro.slots.render("default") : '';

// Allow authors to mark the actual snippet to show/copy using HTML comments
// <!-- copy:start --> ... <!-- copy:end -->
let code = '';
if (canSeeCodeValue) {
  const startMarker = /<!--\s*copy:start\s*-->/i;
  const endMarker = /<!--\s*copy:end\s*-->/i;
  if (startMarker.test(rawSlotCode) && endMarker.test(rawSlotCode)) {
    const startIdx = rawSlotCode.search(startMarker);
    const endIdx = rawSlotCode.search(endMarker);
    if (startIdx > -1 && endIdx > startIdx) {
      const afterStart = rawSlotCode.replace(startMarker, '__COPY_START__');
      const between = afterStart.split('__COPY_START__')[1] || '';
      code = between.split(rawSlotCode.match(endMarker)?.[0] || '<!-- copy:end -->')[0] || '';
    }
  }
  // Fallback to full slot content if no markers were found
  if (!code) {
    // Special case: Typography â€“ copy only the Text component
    if (componentPath && /\/typography\//i.test(componentPath)) {
      const m = rawSlotCode.match(/<Text[\s\S]*?<\/Text>/);
      if (m) {
        code = m[0];
      }
    }
  }
  if (!code) {
    let s = rawSlotCode;
    // Try to strip one outer <section> wrapper
    const hasOuterSection = /^\s*<section[\s\S]*<\/section>\s*$/i.test(s);
    if (hasOuterSection) {
      s = s.replace(/^\s*<section[^>]*>/i, "").replace(/<\/section>\s*$/i, "");
    }
    // Try to strip one outer <div> wrapper
    const hasOuterDiv = /^\s*<div[\s\S]*<\/div>\s*$/i.test(s);
    if (hasOuterDiv) {
      s = s.replace(/^\s*<div[^>]*>/i, "").replace(/<\/div>\s*$/i, "");
    }
    code = s || rawSlotCode;
  }
}

let ppcode = '';
if (canSeeCodeValue) {
  // Always format so the Code tab shows pretty output by default
  ppcode = await prettier.format(code, { parser: 'html' });

  // Replace accent color classes with user's theme color if a user is logged in
  const accentRegex = /(class=["'].*?)bg-accent-(\d+)(.*?["'])/g;
  const textAccentRegex = /(class=["'].*?)text-accent-(\d+)(.*?["'])/g;
  const borderAccentRegex = /(class=["'].*?)border-accent-(\d+)(.*?["'])/g;
  const hoverRegex = /(class=["'].*?)hover:([^-]+)-accent-(\d+)(.*?["'])/g;
  const fromAccentRegex = /(class=["'].*?)from-accent-(\d+)(.*?["'])/g;
  const toAccentRegex = /(class=["'].*?)to-accent-(\d+)(.*?["'])/g;

  // Apply all replacements in sequence
  ppcode = ppcode
    .replace(accentRegex, `$1bg-${userThemeColor}-$2$3`)
    .replace(textAccentRegex, `$1text-${userThemeColor}-$2$3`)
    .replace(borderAccentRegex, `$1border-${userThemeColor}-$2$3`)
    .replace(hoverRegex, `$1hover:$2-${userThemeColor}-$3$4`)
    .replace(fromAccentRegex, `$1from-${userThemeColor}-$2$3`)
    .replace(toAccentRegex, `$1to-${userThemeColor}-$2$3`);
}

const theme = ``;
---
<section x-data="playground" data-iframe-id={`iframe-${componentIndex}`}>
  <div class="relative" @theme="setTheme($event.detail.color)">
    <div class="flex items-center justify-between pb-2 gap-1 ">
     
      <Button onlyIconSize="xxs" variant="muted"
        href={`#${componentIndex}`}
      >
        <span class="text-xs">{componentIndex}</span>
      </Button>
      <div class="items-center justify-end hidden p-1 bg-white rounded-lg  md:flex gap-1">
        <span class="items-center hidden isolate md:inline-flex  gap-1" >
          <Button onlyIconSize="xxs" variant="muted"
          @click="viewportSize = 'mobile'" :class="viewportSize === 'mobile' ? '' : ''">
            <svg slot="left-icon" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M4 2.5C4 2.22386 4.22386 2 4.5 2H10.5C10.7761 2 11 2.22386 11 2.5V12.5C11 12.7761 10.7761 13 10.5 13H4.5C4.22386 13 4 12.7761 4 12.5V2.5ZM4.5 1C3.67157 1 3 1.67157 3 2.5V12.5C3 13.3284 3.67157 14 4.5 14H10.5C11.3284 14 12 13.3284 12 12.5V2.5C12 1.67157 11.3284 1 10.5 1H4.5ZM6 11.65C5.8067 11.65 5.65 11.8067 5.65 12C5.65 12.1933 5.8067 12.35 6 12.35H9C9.1933 12.35 9.35 12.1933 9.35 12C9.35 11.8067 9.1933 11.65 9 11.65H6Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
           </svg>
          </Button>
          
          <Button
             onlyIconSize="xxs" variant="muted"
             @click="viewportSize = 'tablet'" :class="viewportSize === 'tablet' ? '' : '"
             >
             <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="1.5"
                stroke-linecap="round"
                stroke-linejoin="round"
               
                >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path
                   d="M3 6a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-12z"
                   ></path>
                <path d="M9 17h6"></path>
             </svg>
          </Button>
          <Button
             onlyIconSize="xxs" variant="muted"
             @click="viewportSize = 'desktop'" :class="viewportSize === 'desktop' ? '' : ''"
             >
             <svg   viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M1 3.25C1 3.11193 1.11193 3 1.25 3H13.75C13.8881 3 14 3.11193 14 3.25V10.75C14 10.8881 13.8881 11 13.75 11H1.25C1.11193 11 1 10.8881 1 10.75V3.25ZM1.25 2C0.559643 2 0 2.55964 0 3.25V10.75C0 11.4404 0.559644 12 1.25 12H5.07341L4.82991 13.2986C4.76645 13.6371 5.02612 13.95 5.37049 13.95H9.62951C9.97389 13.95 10.2336 13.6371 10.1701 13.2986L9.92659 12H13.75C14.4404 12 15 11.4404 15 10.75V3.25C15 2.55964 14.4404 2 13.75 2H1.25ZM9.01091 12H5.98909L5.79222 13.05H9.20778L9.01091 12Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
             </svg>
          </Button>
       </span>
       <div aria-hidden="true" class="mx-1 h-4 w-[1px]  bg-zinc-200   hidden md:inline-block"></div>
        {
          canSeeCodeValue ? (
            <div class="flex items-center gap-1 ">
              <Button
               size="xxs"
                variant="muted"
                x-on:click="setTab('preview');" 
                :class="tab === 'preview' ? ' outline-zinc-100  ' : ''"
                data-umami-event="click-view-preview"
                data-umami-data-id={user?.uid}
                data-umami-event-componentref={componentPath}
                class="pointer-events-auto !shadow-none">
                Preview
              </Button>
              <Button
               size="xxs"
                variant="muted"
                x-on:click="setTab('code')" 
                :class="tab === 'code' ? 'outline-zinc-100  ' : ''"
                data-umami-event="click-view-code"
                data-umami-data-id={user?.uid}
                data-umami-event-componentref={componentPath}
                class="pointer-events-auto !shadow-none">
                Code
              </Button>
              <div aria-hidden="true" class="mx-1 h-4 w-[1px]  bg-zinc-200   hidden md:inline-block"></div>
              <Button
                size="xxs"
                variant="muted"
                data-umami-event="click-copy-component"
                data-umami-data-id={user?.uid}
                data-umami-event-componentref={componentPath}
                class="w-20 pointer-events-auto !shadow-none"
                x-on:click="copyCode"
              >
                <span
                  x-text="copied ? 'Copied!' : 'Copy'"
                  class="transition"
                />
              </Button>
            </div>
          ) : (
            <Button
            size="xxs"
            variant="default"
            href="/pricing"
            data-umami-event="click-get-access"
            data-umami-data-id={user?.uid}
            data-umami-event-componentref={componentPath}
            class="pointer-events-auto !shadow-none"
            >
              Get Access
            </Button>
          )
        }
      </div>
    </div>
  <div
    class="relative min-h-[400px] w-full flex rounded-xl shadow-oxbow bg-white z-1 overflow-hidden isolate"
  >
    <div
      x-show="tab === 'preview'"
      class="flex justify-center flex-grow w-full bg-white"
    >
      <div
        class="w-full overflow-auto border-x border-zinc-100"
        :class="{ 'max-w-sm border-x border-zinc-100': viewportSize === 'mobile', 'max-w-screen-md border-x border-zinc-100': viewportSize === 'tablet','max-w-full': viewportSize === 'desktop' }">
  <Fragment set:html={await Astro.slots.render("default")} />
      </div>
    </div>
    {canSeeCodeValue && (
      <div
        x-show="tab === 'code'"
        x-ref="code"
        class="code-pane flex-grow p-4 text-xs bg-sand-100 size-full selection:bg-zinc-100"
      >
        <Code code={ppcode} lang="html" theme="css-variables" class="scrollbar-hide"/>
      </div>
    )}
  </div>
  </div>
</section>

<style>
  :global(.code-pane pre) {
    white-space: pre;
    overflow-x: auto;
    overflow-y: hidden;
    word-break: normal;
    word-wrap: normal;
  }
  :global(.code-pane code) {
    white-space: inherit;
  }
</style>

<script define:vars={{ userThemeColor }}>
  // Set initial theme based on user preference from claims/cookies
  document.addEventListener('DOMContentLoaded', () => {
    // Store the original server-rendered theme color for comparison
    window.originalRenderedTheme = userThemeColor;
    
    // Wait for Alpine to initialize components
    setTimeout(() => {
      const playgrounds = document.querySelectorAll('section[x-data="playground"]');
      
      if (playgrounds.length > 0) {
        
        // Dispatch theme event to set the initial theme in the playground
        playgrounds.forEach(playground => {
          playground.dispatchEvent(new CustomEvent('theme', {
            detail: {
              color: userThemeColor
            }
          }));
        });
      }
    }, 500); // Delay to ensure Alpine components are initialized
  });
</script>
