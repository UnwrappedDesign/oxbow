---
import Text from "@/components/fundations/typography/Text.astro";
import EntryStructure from "@/components/landing/EntryStructure.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
//
//
// Marketing
import { pageSections } from "@/data/entries.json";
import { pageExamples } from "@/data/entries.json";
//
//
// Application
import { forms, elements, overlay, navigation } from "@/data/entries.json";
//
//
// Ecommerce
import { storeSections } from "@/data/entries.json";
const groupedEntries = [
  {
    id: "marketing",
    title: "Marketing",
    description:
      "Heroes, pricing, features, footers, everything you need to make a landing page that looks legit instead of a template graveyard.",
    groups: [
      { id: "pageSections", label: "Page sections", data: pageSections },
      { id: "pageExamples", label: "Landing Pages", data: pageExamples },
    ],
  },
  {
    id: "application",
    title: "Application",
    description:
      "Navs, buttons, forms, layouts, all the boring but necessary pieces that stop your app from looking like a hackathon project.",
    groups: [
      { id: "navigation", label: "Navigation", data: navigation },
      { id: "overlay", label: "Overlay", data: overlay },
      { id: "forms", label: "Forms", data: forms },
      { id: "elements", label: "Elements", data: elements },
    ],
  },
  {
    id: "ecommerce",
    title: "eCommerce",
    description:
      "Carts, checkouts, promos, product pages, basically everything except the product itself. That partâ€™s on you.",
    groups: [{ id: "storeSections", label: "Pages", data: storeSections }],
  },
];
---
<section
  data-fast-goal="navigated-to-components"
  x-data="{ tab: 'marketing', setTab(id){ this.tab = id; history.replaceState({}, '', `#${id}`) } }"
  x-init="(() => { const id = location.hash?.slice(1); if (id) tab = id })()"
>
  <Wrapper variant="standard" class="pt-12">
    
    <nav class="relative flex space-x-4 w-full  border-b border-base-200 dark:border-base-800" role="tablist" aria-label="Components sections">
      {groupedEntries.map(({ id, title }) => (
        <a
          role="tab"
          href={`#${id}`}
          data-id={id}
          @click.prevent="setTab($el.dataset.id)"
          :aria-selected={`tab === '${id}'`}
          class="inline-flex items-center justify-center font-semibold text-sm transition-colors pb-2 border-b-2 -mb-[2px]"
          :class={`tab === '${id}' ? 'text-base-950 dark:text-white font-medium border-base-950 dark:border-white' : 'text-base-600 hover:text-base-950 dark:text-base-400 dark:hover:text-white border-transparent'`}
        >{title}</a>
      ))}
    </nav>
    {groupedEntries.map(({ id, title, description, groups }) => {
      const firstGroup = groups[0]?.id || '';
      return (
        <div class="pt-4"
          id={id}
          x-show={`tab === '${id}'`}
          x-cloak
          style={id === 'marketing' ? '' : 'display:none'}
          x-data={`{ inner: '${firstGroup}', setInner(id){ this.inner = id } }`}
        >
        
                <Text tag="p" variant="textSM" class="max-w-md  text-base-600 dark:text-base-400 md:text-balance font-medium">{description}</Text>
                {/* Nested tabs for groups */}
                <nav class="flex items-center mt-12 gap-4 w-full border-b border-base-200 dark:border-base-800 " role="tablist" aria-label={`${title} groups`}>
                  {groups.map(({ id: groupId, label }) => (
                    <a
                      role="tab"
                      href={`#${id}-${groupId}`}
                      data-id={groupId}
                      @click.prevent="setInner($el.dataset.id)"
                      class="inline-flex items-center justify-center font-semibold text-sm transition-colors pb-2 border-b-2 -mb-[2px]"
                      :class={`inner === '${groupId}' ? 'text-base-950 dark:text-white font-medium border-base-950 dark:border-white' : 'text-base-600 hover:text-base-950 dark:text-base-400 dark:hover:text-white border-transparent'`}
                    >{label}</a>
                  ))}
                </nav>
                <div class="mt-2">
                  {groups.map(({ id: groupId, label, data }, idx) => (
                    <div
                      id={groupId}
                      x-show={`inner === '${groupId}'`}
                      x-cloak
                      style={idx === 0 ? '' : 'display:none'}
                      class="flex flex-col gap-6"
                    >
                      <EntryStructure entries={data} />
                    </div>
                  ))}
                </div>
           
        </div>
      );
    })}
  </Wrapper>
</section>
