---
import Text from "@/components/fundations/typography/Text.astro";
import EntryStructure from "@/components/landing/EntryStructure.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
//
//
// Marketing
import { pageSections } from "@/data/entries.json";
import { pageExamples } from "@/data/entries.json";
//
//
// Application
import { forms, elements, overlay, navigation } from "@/data/entries.json";
//
//
// Ecommerce
import { storeSections } from "@/data/entries.json";
const groupedEntries = [
  {
    id: "marketing",
    title: "Marketing",
    description:
      "Heroes, pricing, features, footers, everything you need to make a landing page that looks legit instead of a template graveyard.",
    groups: [
      { id: "pageSections", label: "Page sections", data: pageSections },
      { id: "pageExamples", label: "Landing Pages", data: pageExamples },
    ],
  },
  {
    id: "application",
    title: "Application",
    description:
      "Navs, buttons, forms, layouts, all the boring but necessary pieces that stop your app from looking like a hackathon project.",
    groups: [
      { id: "navigation", label: "Navigation", data: navigation },
      { id: "overlay", label: "Overlay", data: overlay },
      { id: "forms", label: "Forms", data: forms },
      { id: "elements", label: "Elements", data: elements },
    ],
  },
  {
    id: "ecommerce",
    title: "eCommerce",
    description:
      "Carts, checkouts, promos, product pages, basically everything except the product itself. That partâ€™s on you.",
    groups: [{ id: "storeSections", label: "Pages", data: storeSections }],
  },
];
---
<div
  data-fast-goal="navigated-to-components"
  x-data="{ tab: 'marketing', setTab(id){ this.tab = id; history.replaceState({}, '', `#${id}`) } }"
  x-init="(() => { 
    const hash = location.hash?.slice(1); 
    if (hash) {
      // Extract main tab (part before '-' or the whole hash)
      const mainTab = hash.includes('-') ? hash.split('-')[0] : hash;
      if (mainTab) tab = mainTab;
    }
  })()"
>
 
<div class="border-b border-base-200 dark:border-base-800">
    <Wrapper variant="standard" >
      <nav class="relative flex gap-6" role="tablist" aria-label="Components sections">
        {groupedEntries.map(({ id, title }) => (
          <a
            role="tab"
            href={`#${id}`}
            data-id={id}
            @click.prevent="setTab($el.dataset.id)"
            :aria-selected={`tab === '${id}'`}
            class="relative pb-3 text-base font-medium transition-colors"
            :class={`tab === '${id}' ? 'text-base-900 dark:text-white' : 'text-base-600 hover:text-base-900 dark:text-base-400 dark:hover:text-white'`}
          >
            {title}
            <span 
              class="absolute bottom-0 left-0 right-0 h-0.5 bg-base-900 dark:bg-white transition-opacity"
              :class={`tab === '${id}' ? 'opacity-100' : 'opacity-0'`}
            ></span>
          </a>
        ))}
      </nav>
    </Wrapper>
  
</div>
  
<div class="bg-base-50 dark:bg-white/2 py-8">
    <Wrapper variant="standard">{groupedEntries.map(({ id, title, description, groups }) => {
        const firstGroup = groups[0]?.id || '';
        return (
          <div
            id={id}
            x-show={`tab === '${id}'`}
            x-cloak
            style={id === 'marketing' ? '' : 'display:none'}
            x-data={`{ 
              inner: localStorage.getItem('oxbow-inner-${id}') || '${firstGroup}', 
              setInner(id){ 
                this.inner = id; 
                localStorage.setItem('oxbow-inner-${id}', id);
                history.replaceState({}, '', \`#${id}-\${id}\`);
              } 
            }`}
            x-init={`(() => { 
              const hash = location.hash?.slice(1); 
              if (hash?.startsWith('${id}-')) {
                const groupId = hash.replace('${id}-', '');
                if (groupId) this.inner = groupId;
              }
            })()`}
          >
          
                <div class="flex flex-col gap-4">
                    <Text tag="p" variant="textSM" class="text-base-600 dark:text-base-400 font-medium max-w-sm text-balance">{description}</Text>
                    {/* Nested tabs for groups */}
                    <nav class="flex items-center gap-4 border-b border-base-200 dark:border-base-700 mt-8" role="tablist" aria-label={`${title} groups`}>
                      {groups.map(({ id: groupId, label }) => (
                        <a
                          role="tab"
                          href={`#${id}-${groupId}`}
                          data-id={groupId}
                          @click.prevent="setInner($el.dataset.id)"
                          class="relative pb-2 text-sm font-medium transition-colors"
                          :class={`inner === '${groupId}' ? 'text-base-900 dark:text-white' : 'text-base-600 hover:text-base-900 dark:text-base-400 dark:hover:text-white'`}
                        >
                          {label}
                          <span 
                            class="absolute bottom-0 left-0 right-0 h-0.5 bg-base-900 dark:bg-white transition-opacity"
                            :class={`inner === '${groupId}' ? 'opacity-100' : 'opacity-0'`}
                          ></span>
                        </a>
                      ))}
                    </nav>
                </div>
                  <div class="mt-2">
                    {groups.map(({ id: groupId, label, data }, idx) => (
                      <div
                        id={groupId}
                        x-show={`inner === '${groupId}'`}
                        x-cloak
                        style={idx === 0 ? '' : 'display:none'}
                        class="flex flex-col gap-6"
                      >
                        <EntryStructure entries={data} />
                      </div>
                    ))}
                  </div>
             
          </div>
        );
      })}
    </Wrapper>
</div>
</div>


