---
import Text from "@/components/fundations/typography/Text.astro";
import EntryStructure from "@/components/landing/EntryStructure.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
//
//
// Marketing
import { pageSections } from "@/data/entries.json";
import { pageExamples } from "@/data/entries.json";
//
//
// Application
import { forms, elements, overlay, navigation } from "@/data/entries.json";
//
//
// Ecommerce
import { storeSections } from "@/data/entries.json";
const groupedEntries = [
  {
    id: "marketing",
    title: "Marketing",
    description:
      "Heroes, pricing, features, footers, everything you need to make a landing page that looks legit instead of a template graveyard.",
    groups: [
      { id: "pageSections", label: "Page sections", data: pageSections },
      { id: "pageExamples", label: "Landing Pages", data: pageExamples },
    ],
  },
  {
    id: "application",
    title: "Application",
    description:
      "Navs, buttons, forms, layouts, all the boring but necessary pieces that stop your app from looking like a hackathon project.",
    groups: [
      { id: "navigation", label: "Navigation", data: navigation },
      { id: "overlay", label: "Overlay", data: overlay },
      { id: "forms", label: "Forms", data: forms },
      { id: "elements", label: "Elements", data: elements },
    ],
  },
  {
    id: "ecommerce",
    title: "eCommerce",
    description:
      "Carts, checkouts, promos, product pages, basically everything except the product itself. That partâ€™s on you.",
    groups: [{ id: "storeSections", label: "Pages", data: storeSections }],
  },
];
---
<section
  data-fast-goal="navigated-to-components"
  x-data="{ tab: 'marketing', setTab(id){ this.tab = id; history.replaceState({}, '', `#${id}`) } }"
  x-init="(() => { 
    const hash = location.hash?.slice(1); 
    if (hash) {
      // Extract main tab (part before '-' or the whole hash)
      const mainTab = hash.includes('-') ? hash.split('-')[0] : hash;
      if (mainTab) tab = mainTab;
    }
  })()"
>
  <Wrapper variant="standard" >
    
    <nav class="relative flex gap-1 size-fit p-1 bg-base-100 dark:bg-base-800 rounded-lg" role="tablist" aria-label="Components sections">
      {groupedEntries.map(({ id, title }) => (
        <a
          role="tab"
          href={`#${id}`}
          data-id={id}
          @click.prevent="setTab($el.dataset.id)"
          :aria-selected={`tab === '${id}'`}
          class="flex items-center justify-center h-7 px-3 text-xs transition-colors rounded-md shadow-oxbow"
          :class={`tab === '${id}' ? 'bg-base-900 text-white dark:bg-white dark:text-base-900' : 'bg-base-50 text-base-600 hover:bg-white hover:text-base-950 dark:bg-base-900 dark:text-base-400 dark:hover:bg-base-700 dark:hover:text-white '`}
        >{title}</a>
      ))}
    </nav>
    {groupedEntries.map(({ id, title, description, groups }) => {
      const firstGroup = groups[0]?.id || '';
      return (
        <div class=" mt-2 "
          id={id}
          x-show={`tab === '${id}'`}
          x-cloak
          style={id === 'marketing' ? '' : 'display:none'}
          x-data={`{ 
            inner: localStorage.getItem('oxbow-inner-${id}') || '${firstGroup}', 
            setInner(id){ 
              this.inner = id; 
              localStorage.setItem('oxbow-inner-${id}', id);
              history.replaceState({}, '', \`#${id}-\${id}\`);
            } 
          }`}
          x-init={`(() => { 
            const hash = location.hash?.slice(1); 
            if (hash?.startsWith('${id}-')) {
              const groupId = hash.replace('${id}-', '');
              if (groupId) this.inner = groupId;
            }
          })()`}
        >
        
              <div class="mt-4 pt-4 flex flex-col gap-y-4 gap-x-4 md:flex-row lg:justify-between border-t border-base-200 dark:border-base-800" >
                  <Text tag="p" variant="textSM" class="max-w-md  text-base-600 dark:text-base-400 md:text-balance font-medium">{description}</Text>
                  {/* Nested tabs for groups */}
                  <nav class="flex items-center  gap-1 size-fit p-1 bg-base-100 dark:bg-base-800 rounded-lg" role="tablist" aria-label={`${title} groups`}>
                    {groups.map(({ id: groupId, label }) => (
                      <a
                        role="tab"
                        href={`#${id}-${groupId}`}
                        data-id={groupId}
                        @click.prevent="setInner($el.dataset.id)"
                        class="flex items-center justify-center h-7 px-3 text-xs transition-colors rounded-md shadow-oxbow"
                        :class={`inner === '${groupId}' ? 'bg-base-900 text-white dark:bg-white dark:text-base-900' : 'bg-base-50 text-base-600 hover:bg-white hover:text-base-950 dark:bg-base-900 dark:text-base-400 dark:hover:bg-base-700 dark:hover:text-white'`}
                      >{label}</a>
                    ))}
                  </nav>
              </div>
                <div class="mt-8">
                  {groups.map(({ id: groupId, label, data }, idx) => (
                    <div
                      id={groupId}
                      x-show={`inner === '${groupId}'`}
                      x-cloak
                      style={idx === 0 ? '' : 'display:none'}
                      class="flex flex-col gap-6"
                    >
                      <EntryStructure entries={data} />
                    </div>
                  ))}
                </div>
           
        </div>
      );
    })}
  </Wrapper>
  
</section>

