---
import Text from "@/components/fundations/typography/Text.astro";
import { Image } from "astro:assets";
import { formatDistanceToNowStrict } from "date-fns";

import type { Template } from "@/data/entries.json";
import updates from "@/data/updates.json";

interface Props {
  entries: Template[];
}

const { entries } = Astro.props; // Make sure entries is correctly passed and used
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/images/**/*.{jpeg,jpg,png,gif}"
);
const components = await Astro.glob("@/components/oxbow/**/*.astro");
const componentBySection = components.reduce((acc, component) => {
  const [section, subsection] = component.file
    .replace(/.*\/src\/components\/oxbow\//, "")
    .split("/");
  const path = ["/playground", section, subsection].filter(Boolean).join("/");
  return {
    ...acc,
    [path]: acc[path] ? acc[path] + 1 : 1,
  };
}, {});
// Add quantity to each entry
const entriesWithQuantity = entries
  .map((entry: Template) => {
    const imagePath = `/src/images/${entry.image}`;
    if (!images[imagePath])
      throw new Error(
        `"${imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`
      );
    return {
      ...entry,
      image: images[imagePath],
      quantity: componentBySection[entry.link] || 0,
    };
  })
  // Filter out entries with quantity 0
  .filter((entry) => entry.quantity > 0);

const updatedSubsections = Object.keys(updates).reduce((acc, path) => {
  const [section, subsection] = path.split("/");
  acc[subsection] = acc[subsection]
    ? acc[subsection] > updates[path]
      ? acc[subsection]
      : updates[path]
    : updates[path];
  return acc;
}, {});

const SEVEN_DAYS_AGO = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
---

<ul
  class="grid grid-cols-1 col-span-3 gap-y-6 sm:grid-cols-2 sm:gap-y-10 md:grid-cols-3 gap-x-8"
>
  {
    entriesWithQuantity.map((template) => {
      const subsection = template.link.split("/").pop();
      const updated = updatedSubsections[subsection];

      const updatedAt = new Date(updated * 1000);

      const isUpdatedLastWeek = updatedAt > SEVEN_DAYS_AGO;

      return (
        <li class="relative ">
          <div class="relative rounded-lg group ">
            <div>
              <Image
                class="object-cover object-bottom  transition-all duration-300 ease-in-out rounded-xl"
                alt={template.name}
                src={template.image()}
              />
            </div>
            <div class="flex flex-col mt-2 ">
              <div class="flex items-center justify-between gap-2">
                <Text
                  tag="p"
                  variant="textSM"
                  class="relative font-medium text-black  group-hover:text-blue-500"
                >
                  {template.name}
                </Text>
                <a title={template.name} href={template.link}>
                  <span class="absolute inset-0" />
                </a>
                {isUpdatedLastWeek && (
                  <div class="relative" x-data="{ showTooltip: false }">
                    <div
                      @mouseenter="showTooltip = true"
                      @mouseleave="showTooltip = false"
                      class="inline-flex items-center font-medium z-10 text-accent-500 cursor-default  bottom-2 right-2 bg-base-900 px-2.5 py-1 text-xs rounded-md"
                    >
                      Updated
                    </div>
                    <div
                      x-show="showTooltip"
                      class="absolute right-0 px-2 py-1 mb-1 text-xs text-center bg-white shadow-md bottom-full text-base-500 rounded-md min-w-24"
                    >
                      {formatDistanceToNowStrict(updatedAt, {
                        unit: "day",
                        roundingMethod: "ceil",
                      })}
                      {" ago"}
                    </div>
                  </div>
                )}
              </div>
              <Text
                tag="p"
                variant="textXS"
                class="relative flex items-center gap-1  2xl:text-sm text-base-500"
              >
                {template.quantity} Components
              </Text>
            </div>
          </div>
        </li>
      );
    })
  }
</ul>
