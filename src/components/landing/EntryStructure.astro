---
import Text from "@/components/fundations/typography/Text.astro";
import { Image } from "astro:assets";
import { formatDistanceToNowStrict } from "date-fns";

import type { Template } from "@/data/entries.json";
import updates from "@/data/updates.json";

interface Props {
  entries: Template[];
}

const { entries } = Astro.props; // Make sure entries is correctly passed and used
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/images/**/*.{jpeg,jpg,png,gif}"
);
const components = await Astro.glob("@/components/oxbow/**/*.astro");
const componentBySection = components.reduce((acc, component) => {
  const [section, subsection] = component.file
    .replace(/.*\/src\/components\/oxbow\//, "")
    .split("/");
  const path = ["/playground", section, subsection].filter(Boolean).join("/");
  return {
    ...acc,
    [path]: acc[path] ? acc[path] + 1 : 1,
  };
}, {});
// Add quantity to each entry
const entriesWithQuantity = entries
  .map((entry: Template) => {
    const imagePath = `/src/images/${entry.image}`;
    if (!images[imagePath])
      throw new Error(
        `"${imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`
      );
    return {
      ...entry,
      image: images[imagePath],
      quantity: componentBySection[entry.link] || 0,
    };
  })
  // Filter out entries with quantity 0
  .filter((entry) => entry.quantity > 0);

const updatedSubsections = Object.keys(updates).reduce((acc, path) => {
  const [section, subsection] = path.split("/");
  acc[subsection] = acc[subsection]
    ? acc[subsection] > updates[path]
      ? acc[subsection]
      : updates[path]
    : updates[path];
  return acc;
}, {});

const SEVEN_DAYS_AGO = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
---

<ul
  class="col-span-3 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 2xl:col-span-full gap-x-4 gap-y-8"
>
  {
    entriesWithQuantity.map((template) => {
      const subsection = template.link.split("/").pop();
      const updated = updatedSubsections[subsection];

      const updatedAt = new Date(updated * 1000);

      const isUpdatedLastWeek = updatedAt > SEVEN_DAYS_AGO;

      return (
        <li class="relative ">
          <a
            title={template.name}
            href={template.link}
            class="absolute inset-0 z-1"
          />
          <div class="relative rounded-lg group ">
            <div>
              <Image
                class="object-cover object-center rounded-lg  transition-all duration-300 ease-in-out shadow-oxbow outline outline-base-200"
                alt={template.name}
                src={template.image()}
              />
            </div>
            <div class="flex flex-col mt-2 ">
              <Text
                tag="p"
                variant="textSM"
                class="relative font-medium text-black  group-hover:text-blue-500"
              >
                {template.name}
              </Text>
              <Text
                tag="p"
                variant="textXS"
                class="relative flex items-center gap-1  2xl:text-sm text-base-500"
              >
                {template.quantity} Components
              </Text>
              {/* {isUpdatedLastWeek && (
                <Text
                  tag="p"
                  variant="textXXS"
                  class="relative flex items-center mt-2 gap-1  text-base-500"
                >
                  Updated
                  {formatDistanceToNowStrict(updatedAt, {
                    unit: "day",
                    roundingMethod: "ceil",
                  })}
                  {" ago"}
                </Text>
              )} */}
            </div>
          </div>
        </li>
      );
    })
  }
</ul>
