---
import Text from "@/components/fundations/typography/Text.astro";
import { Image } from "astro:assets";
import { formatDistanceToNowStrict } from "date-fns";

import type { Template } from "@/data/entries.json";
import updates from "@/data/updates.json";

interface Props {
  entries: Template[];
}

const { entries } = Astro.props; // Make sure entries is correctly passed and used
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/images/**/*.{jpeg,jpg,png,gif}"
);
const modules = import.meta.glob("@/components/oxbow/**/*.astro", {
  eager: true,
});
const componentBySection = Object.keys(modules).reduce((acc, file) => {
  const [section, subsection] = file
    .replace(/.*\/src\/components\/oxbow\//, "")
    .split("/");
  const path = ["/playground", section, subsection].filter(Boolean).join("/");
  return {
    ...acc,
    [path]: acc[path] ? acc[path] + 1 : 1,
  };
}, {});
// Add quantity to each entry
const entriesWithQuantity = entries
  .map((entry: Template) => {
    const imagePath = `/src/images/${entry.image}`;
    if (!images[imagePath])
      throw new Error(
        `"${imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`
      );
    return {
      ...entry,
      image: images[imagePath],
      quantity: componentBySection[entry.link] || 0,
    };
  })
  // Filter out entries with quantity 0
  .filter((entry) => entry.quantity > 0);

const updatedSubsections = Object.keys(updates).reduce((acc, path) => {
  const [section, subsection] = path.split("/");
  acc[subsection] = acc[subsection]
    ? acc[subsection] > updates[path]
      ? acc[subsection]
      : updates[path]
    : updates[path];
  return acc;
}, {});

const SEVEN_DAYS_AGO = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
---

<ul class="flex flex-col divide-y divide-zinc-200">
  {
    entriesWithQuantity.map((template) => {
      const subsection = template.link.split("/").pop();
      const updated = updatedSubsections[subsection];

      const updatedAt = new Date(updated * 1000);

      const isUpdatedLastWeek = updatedAt > SEVEN_DAYS_AGO;

      return (
        <li class="relative group py-2 ">
          <a
            title={template.name}
            href={template.link}
            class="absolute inset-0 z-1"
          />
          <div>
            {/*   <Image
              class="object-cover object-top rounded-lg  transition-all duration-300 ease-in-out shadow-subtle shadow-zinc-500/10  aspect-16/9"
              alt={template.name}
              src={template.image()}
            /> */}
            <div class="grid grid-cols-2  group-hover:text-accent-600 lg:items-center">
              <div class="   flex items-center gap-4">
                <div class="rounded-full text-zinc-900 p-1 text-xs bg-white size-6 transition-colors duration-500 flex items-center justify-center">
                  {template.quantity}
                </div>
                <Text
                  tag="p"
                  variant="textSM"
                  class="relative font-medium text-zinc-600 group-hover:text-accent-600"
                >
                  {template.name}
                </Text>
              </div>

              <Text
                tag="p"
                variant="textXXS"
                class="relative flex items-center gap-1 text-zinc-500 group-hover:text-accent-600 ml-auto"
              >
                Updated
                {formatDistanceToNowStrict(updatedAt, {
                  unit: "day",
                  roundingMethod: "ceil",
                })}
                {" ago"}
              </Text>
             
            </div>
          </div>
        </li>
      );
    })
  }
</ul>
