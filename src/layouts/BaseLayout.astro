---
import { getAuth } from "firebase-admin/auth";
import { ViewTransitions } from 'astro:transitions';
import BaseHead from "@/components/BaseHead.astro";
import Navigation from "@/components/global/Navigation.astro";
import Footer from "@/components/global/Footer.astro";
import NinjaScript from "@/components/commandBar/NinjaScript.astro";

import { app } from "@/firebase/server";

const auth = getAuth(app);
const uid = Astro.locals.user?.uid;
const customToken = uid ? await auth.createCustomToken(uid) : null;
const siteUrl = (Astro.site && Astro.site.toString()) || "https://oxbowui.com";
const canonicalUrl = new URL(Astro.url.pathname, Astro.site ?? siteUrl).toString();
const privatePaths = [
  /^\/404$/,
  /^\/login(\b|\/)/,
  /^\/login-password(\b|\/)/,
  /^\/email-signin(\b|\/)/,
  /^\/thankyou(\b|\/)/,
  /^\/webhooks\//,
  /^\/api\//,
  /^\/iframe\//,
];
const defaultNoindex = privatePaths.some((rx) => rx.test(Astro.url.pathname));

// Optional per-page SEO overrides
interface HeadOverrides {
  title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  structuredData?: any | any[];
}
const { title, description, image, noindex, structuredData }: HeadOverrides = (Astro.props ?? {}) as HeadOverrides;
---

<html lang="en" class="scroll-smooth">
  <head>
    <BaseHead
      pathname={Astro.url.pathname}
      canonicalUrl={canonicalUrl}
      siteUrl={siteUrl}
      title={title}
      description={description}
      image={image}
      noindex={noindex ?? defaultNoindex}
      structuredData={structuredData}
    />
  </head>
  <body class="bg-base-100" style="background-color:#ffffff">
    <ViewTransitions />
    <Navigation />
    <main class="grow z-1">
      <slot />
    </main>
    <Footer />

    <ninja-keys
      id="ninja"
      class="light"
      selectHotkey="enter"
      placeholder="Search for anything..."
    >
      <slot name="footer" />
    </ninja-keys>
    <NinjaScript />

    <astro-firebase data-customtoken={customToken}></astro-firebase>

    <script>
      import {
        inMemoryPersistence,
        signInWithCustomToken,
      } from "firebase/auth";
      import { auth } from "@/firebase/client";


      class AstroFirebase extends HTMLElement {
        constructor() {
          super();
          const customToken = this.dataset.customtoken;

          if (customToken) {
            auth.setPersistence(inMemoryPersistence);

            signInWithCustomToken(auth, customToken)
              .then((credentials) => {
                window.umami?.track("login", {
                  id: credentials.user.uid,
                });
                window.umami?.identify({
                  id: credentials.user.uid,
                });

                console.log("Successfully signed in with custom token");
              })
              .catch((error) => {
                console.error("Error signing in with custom token", error);
              });
          }
        }
      }
      customElements.define("astro-firebase", AstroFirebase);
    </script>

    <script is:inline>
      // Ensure changelog accordion is built on initial load and after client-side navigations
      (function () {
        function buildChangelogAccordion() {
          const container = document.getElementById('changelog');
          if (!container) return;
          if (container.querySelector('details')) return; // already built

          const headings = Array.from(container.querySelectorAll('h2'));
          if (!headings.length) return;

          const sections = headings.map((h2) => {
            const title = (h2.textContent || '').trim();
            const m = title.match(/(\d{4})-(\d{2})-(\d{2})/);
            let year = '0000', month = '01';
            if (m) { year = m[1]; month = m[2]; }
            const key = `${year}-${month}`;
            const nodes = [] as ChildNode[];
            let el: ChildNode | null = h2.nextSibling;
            while (el && !(el.nodeType === 1 && (el as HTMLElement).tagName === 'H2')) {
              const next = el.nextSibling;
              nodes.push(el);
              el = next;
            }
            return { h2, key, year, month, nodes };
          });

          const groups: any[] = [];
          const map = new Map<string, any>();
          for (const s of sections) {
            if (!map.has(s.key)) {
              map.set(s.key, { key: s.key, year: s.year, month: s.month, items: [] as any[] });
              groups.push(map.get(s.key));
            }
            map.get(s.key).items.push(s);
          }

          while (container.firstChild) container.removeChild(container.firstChild);
          const list = document.createElement('div');
          list.className = 'relative w-full mx-auto mt-6 divide-y divide-base-200';
          const MONTHS = ['January','February','March','April','May','June','July','August','September','October','November','December'];
          groups.forEach((g) => {
            const details = document.createElement('details');
            details.className = 'text-left cursor-pointer group py-4';
            const summary = document.createElement('summary');
            summary.className = 'flex items-center justify-between w-full pb-1 text-left select-none text-base-600 hover:text-accent-500';
            const monthIndex = Math.max(0, Math.min(11, parseInt(g.month, 10) - 1));
            const label = document.createElement('span');
            label.textContent = `${MONTHS[monthIndex]} ${g.year}`;
            const svgNS = 'http://www.w3.org/2000/svg';
            const icon = document.createElementNS(svgNS, 'svg');
            icon.setAttribute('class', 'w-5 h-5 duration-300 ease-out text-accent-500 transform group-open:-rotate-45');
            icon.setAttribute('fill', 'none');
            icon.setAttribute('viewBox', '0 0 24 24');
            icon.setAttribute('stroke-width', '1.5');
            icon.setAttribute('stroke', 'currentColor');
            const path = document.createElementNS(svgNS, 'path');
            path.setAttribute('stroke-linecap', 'round');
            path.setAttribute('stroke-linejoin', 'round');
            path.setAttribute('d', 'M12 6v12m6-6H6');
            icon.appendChild(path);
            summary.appendChild(label);
            summary.appendChild(icon);
            const panel = document.createElement('div');
            panel.className = 'py-4 pt-2 text-base-500';
            g.items.forEach((s: any) => {
              panel.appendChild(s.h2);
              s.nodes.forEach((n: ChildNode) => panel.appendChild(n));
            });
            details.appendChild(summary);
            details.appendChild(panel);
            list.appendChild(details);
          });
          container.appendChild(list);
        }

        function run() { try { buildChangelogAccordion(); } catch (e) { /* noop */ } }
        if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', run, { once: true }); else run();
        window.addEventListener('astro:page-load', run);
        window.addEventListener('astro:after-swap', run);
      })();
    </script>
  </body>
</html>
